{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"pane.mjs","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/i18n/index.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/DocTitle.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneItem/PaneItemPreview.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneRouter/BackLink.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/usePaneLayout.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneRouter/ChildLink.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneRouter/ParameterizedLink.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneRouter/ReferenceChildLink.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneRouter/usePaneRouter.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/confirmDeleteDialog/index.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/Delay.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/constants.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneDivider.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/Pane.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneContent.styles.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/usePane.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneContent.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/util/toLowerCaseNoSpaces.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneMenuButtonItem.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneContextMenuButton.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneFooter.styles.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneFooter.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneHeader.styles.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneHeader.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneHeaderActionButton.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneLayout.styles.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/helpers/_calcPaneResize.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/helpers/_getDOMPath.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/helpers/_sortElements.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/paneLayoutController.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/pane/PaneLayout.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/menuNodes.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/IntentButton.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/MissingSchemaType.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneItem/PaneItem.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/RenderActionCollectionState.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/RenderBadgeCollectionState.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/error/ErrorPane.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/loading/getWaitMessages.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/loading/LoadingPane.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/useDocumentPane.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/comments/CommentsWrapper.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/constants.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/useStructureTool.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/constants.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/useDocumentTitle.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/DocumentOperationResults.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/paneItem/helpers.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/useStructureToolSetting.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectDialog/constants.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectDialog/helpers.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectDialog/Search.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectDialog/InspectDialog.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/Banner.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DeletedDocumentBanners.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/AddToReleaseBanner.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/ArchivedReleaseDocumentBanner.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/banners/ScheduledReleaseBanner.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/FormView.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/DocumentPanel.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/constants.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/ActionStateDialog.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/ActionMenuButton.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/documentActions/DeleteAction.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/documentActions/DiscardChangesAction.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/documentActions/DuplicateAction.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/documentActions/HistoryRestoreAction.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/documentActions/PublishAction.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/documentActions/UnpublishAction.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/header/perspective/DocumentPerspectiveList.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/components/spacerButton/SpacerButton.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/DocumentBadges.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/constants.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/helpers.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/timeline.styled.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/timelineI18n.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/userAvatarStack.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/timelineItem.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/utils.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/timeline.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/TimelineError.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/timelineMenu.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusLine.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/RevisionStatusLine.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/useResizeObserver.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusBar.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/menuItems.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/usePreviewUrl.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/document-layout/DocumentLayoutError.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/document-layout/DocumentLayout.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/getInitialValueTemplateOpts.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/DocumentPaneProvider.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/DocumentEventsPane.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/DocumentPaneLegacyTimeline.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/DocumentPaneProviderWrapper.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/useResetHistoryParams.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/DocumentPane.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/constants.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/DocumentListPaneContent.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/helpers.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/util/getExtendedProjection.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/listenSearchQuery.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/useDocumentList.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/DocumentListPane.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/PaneHeader.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/SheetListCell.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/ColumnsControl.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/documentList/PaneContainer.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/SerializeError.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/Sort.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/MenuItem.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/MenuItemGroup.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/util/validateId.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/util/getStructureNodeId.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/Component.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/util/resolveTypeForDocument.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/views/View.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/views/ComponentView.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/views/FormView.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/views/index.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/Document.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/InitialValueTemplateItem.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/Intent.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/Layout.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/GenericList.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/DocumentList.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/List.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/ListItem.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/DocumentListItem.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/DocumentTypeList.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/documentTypeListItems.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureBuilder/createStructureBuilder.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/documentBadges/LiveEditBadge.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/getIntentState.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/events/EventTimelineItem.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/events/PublishedEventMenu.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/events/EventsTimeline.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/timeline/events/EventsTimelineMenu.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/changes/EventsInspector.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/changes/EventsSelector.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/changes/HistorySelector.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/changes/index.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/validation/getPathTitles.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/panes/document/inspectors/validation/index.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/router.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/structureTool.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/sanity/src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n  useActiveReleases,\n  usePerspective,\n  useReleasesIds,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const {data, loading} = useActiveReleases()\n  const {releasesIds} = useReleasesIds(data)\n  const {perspectiveStack, selectedPerspectiveName} = usePerspective()\n\n  const previewStateObservable = useMemo(\n    () =>\n      getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title, {\n        ids: releasesIds,\n        stack: perspectiveStack,\n      }),\n    [props.documentPreviewStore, schemaType, value._id, title, releasesIds, perspectiveStack],\n  )\n\n  const {\n    draft,\n    published,\n    version,\n    versions,\n    isLoading: previewIsLoading,\n  } = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n    version: null,\n    versions: {},\n    selectedPerspectiveName,\n  })\n\n  const isLoading = previewIsLoading || loading\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} versions={versions} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} versions={versions} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({\n        value,\n        draft,\n        published,\n        version,\n        perspective: selectedPerspectiveName,\n      })}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <Button\n                                  mode=\"bleed\"\n                                  icon={CopyIcon}\n                                  tooltipProps={{\n                                    content: t(\n                                      'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                    ),\n                                  }}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onClick={() => {\n                                    navigator.clipboard\n                                      .writeText(documentId)\n                                      .then(() => {\n                                        toast.push({\n                                          status: 'success',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                          ),\n                                        })\n                                      })\n                                      .catch(() => {\n                                        toast.push({\n                                          status: 'error',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title-failed',\n                                          ),\n                                        })\n                                      })\n                                  }}\n                                />\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: React.JSX.Element | (() => React.JSX.Element)\n  ms?: number\n}): React.JSX.Element {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useLayoutEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof React.JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","/**\n * Remove the spaces and lower case the string\n *\n * @param str - string to remove the spaces and lower case\n * @returns str with no spaces and lower case\n */\nexport function toLowerCaseNoSpaces(str: string | undefined): string {\n  if (!str) return ''\n  return str.toLocaleLowerCase().replaceAll(' ', '')\n}\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {toLowerCaseNoSpaces} from '../../util/toLowerCaseNoSpaces'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n        data-testid={`action-${toLowerCaseNoSpaces(node.title)}`}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed || !showTabsOrSubActions ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && (\n                  <Box padding={2}>\n                    <TitleTextSkeleton animated radius={1} size={1} />\n                  </Box>\n                )}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Box hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Box>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const [controller] = useState(() => createPaneLayoutController())\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink\n            {...linkProps}\n            intent={intent.type}\n            params={intent.params}\n            ref={linkRef}\n            searchParams={intent.searchParams}\n          />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {type ReleaseId} from '@sanity/client'\nimport {AddIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useIsReleaseActive,\n  usePerspective,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  templates: Template[],\n  item: InitialValueTemplateItem,\n  version?: ReleaseId,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    version,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n    searchParams: version ? [['perspective', version]] : undefined,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const templates = useTemplates()\n  const {selectedReleaseId} = usePerspective()\n  const isReleaseActive = useIsReleaseActive()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted || !isReleaseActive\n    const intent = getIntent(templates, firstItem, selectedReleaseId)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={\n            disabled\n              ? {content: tCore('new-document.disabled-release.tooltip')}\n              : {content: t('pane-header.create-new-button.tooltip')}\n          }\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          disabled={!isReleaseActive}\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={\n            isReleaseActive\n              ? {content: t('pane-header.create-new-button.tooltip')}\n              : {content: tCore('new-document.disabled-release.tooltip')}\n          }\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(templates, item, selectedReleaseId)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  searchParams={intent.searchParams}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useEditState,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  // Preloads the edit state on hover, using concurrent rendering with `startTransition` so preloads can be interrupted and not block rendering\n  const [preloading, setPreload] = useState(false)\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const handleMouseEnter = useCallback(() => {\n    timeoutRef.current = setTimeout(() => startTransition(() => setPreload(true)), 400)\n  }, [])\n  const handleMouseLeave = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    startTransition(() => setPreload(false))\n  }, [])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={ChildLink as FIXME}\n      // @ts-expect-error - `childId` is a valid prop on `ChildLink`\n      childId={id}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n      {preloading && schemaType?.name && value && isSanityDocument(value) && (\n        <PreloadDocumentPane documentId={id} documentType={schemaType.name} />\n      )}\n    </PreviewCard>\n  )\n}\n\nfunction PreloadDocumentPane(props: {documentId: string; documentType: string}) {\n  const {documentId, documentType} = props\n  // Preload the edit state for the document, and keep it alive until mouse leave\n  useEditState(documentId, documentType)\n\n  return null\n}\nPreloadDocumentPane.displayName = 'PreloadDocumentPane'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n  usePerspective,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n      releaseId={selectedReleaseId}\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = Object.freeze({})\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  useEffect(() => {\n    if (menuItems.length !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItems[i]\n      }\n\n      setMenuItems(newFieldActions)\n    }\n  }, [len, menuItems])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\nDocumentInspectorMenuItemsResolver.displayName = 'DocumentInspectorMenuItemsResolver'\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, displayed} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const subscribed = Boolean(displayed)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: displayed,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!displayed) {\n    return {\n      error: undefined,\n      title: t('panes.document-header-title.new.text', {\n        schemaType: schemaType?.title || schemaType?.name,\n      }),\n    }\n  }\n\n  if (error) {\n    return {\n      error: t('panes.document-list-pane.error.text', {error: error.message}),\n      title: undefined,\n    }\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Resizable} from 'sanity'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(\n  props: DocumentInspectorPanelProps,\n): React.JSX.Element | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const Component = inspector.component\n  const element = (\n    <Component onClose={handleClose} documentId={documentId} documentType={documentType} />\n  )\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        resizerPosition=\"left\"\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import {JsonInspector} from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JsonInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof React.JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n  paddingY?: number\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', paddingY = 2, ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={paddingY} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {DocumentRemoveIcon, ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  isDraftPerspective,\n  isPublishedPerspective,\n  type ReleaseDocument,\n  Translate,\n  useDocumentOperation,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeletedDocumentBanners() {\n  const {isDeleted, isDeleting} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n\n  if (\n    !isPublishedPerspective(selectedPerspective) &&\n    !isDraftPerspective(selectedPerspective) &&\n    selectedPerspective.state === 'archived'\n  ) {\n    return <ArchivedReleaseBanner release={selectedPerspective as ReleaseDocument} />\n  }\n  if (isDeleted && !isDeleting) return <DeletedDocumentBanner />\n}\n\nfunction DeletedDocumentBanner() {\n  const {documentId, documentType, lastNonDeletedRevId} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n\n  const handleRestore = useCallback(() => {\n    if (lastNonDeletedRevId) {\n      restore.execute(lastNonDeletedRevId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, lastNonDeletedRevId])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        lastNonDeletedRevId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n\nconst ArchivedReleaseBanner = ({release}: {release: ReleaseDocument}) => {\n  const {t} = useTranslation()\n\n  return (\n    <Banner\n      tone=\"caution\"\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate\n            t={t}\n            i18nKey=\"banners.deleted-release-banner.text\"\n            values={{title: release.metadata?.title}}\n          />\n        </Text>\n      }\n      data-testid=\"deleted-release-banner\"\n      icon={DocumentRemoveIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {\n      draft: DocumentAvailability\n      published: DocumentAvailability\n      version?: DocumentAvailability\n    }\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {selectedReleaseId} = usePerspective()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n          {\n            version: selectedReleaseId,\n          },\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published, version}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                  ...(version?.availability\n                    ? {\n                        version: version.availability,\n                      }\n                    : {}),\n                },\n                refValue: pathGet<Reference>(\n                  version?.snapshot || draft.snapshot || published.snapshot,\n                  parentRefPath,\n                )?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [selectedReleaseId, documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {Flex, Text} from '@sanity/ui'\nimport {type CSSProperties, useCallback} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  LATEST,\n  type ReleaseDocument,\n  Translate,\n  useTranslation,\n  useVersionOperations,\n} from 'sanity'\nimport {structureLocaleNamespace} from 'sanity/structure'\n\nimport {Button} from '../../../../../ui-components'\nimport {Banner} from './Banner'\n\nexport function AddToReleaseBanner({\n  documentId,\n  currentRelease,\n  value,\n}: {\n  documentId: string\n  currentRelease: ReleaseDocument\n  value?: Record<string, unknown>\n}): React.JSX.Element {\n  const tone = getReleaseTone(currentRelease ?? LATEST)\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n\n  const {createVersion} = useVersionOperations()\n\n  const handleAddToRelease = useCallback(async () => {\n    if (currentRelease._id) {\n      await createVersion(getReleaseIdFromReleaseDocumentId(currentRelease._id), documentId, value)\n    }\n  }, [createVersion, currentRelease._id, documentId, value])\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Translate\n              i18nKey=\"banners.release.not-in-release\"\n              t={t}\n              values={{\n                title:\n                  currentRelease?.metadata?.title || tCore('release.placeholder-untitled-release'),\n              }}\n              components={{\n                Label: ({children}) => {\n                  return (\n                    <span\n                      style={\n                        {\n                          color: `var(--card-badge-${tone ?? 'default'}-fg-color)`,\n                          backgroundColor: `var(--card-badge-${tone ?? 'default'}-bg-color)`,\n                          borderRadius: 3,\n                          textDecoration: 'none',\n                          padding: '0px 2px',\n                          fontWeight: 500,\n                        } as CSSProperties\n                      }\n                    >\n                      {children}\n                    </span>\n                  )\n                },\n              }}\n            />\n          </Text>\n\n          <Button\n            text={t('banners.release.action.add-to-release')}\n            tone={tone}\n            onClick={handleAddToRelease}\n          />\n        </Flex>\n      }\n    />\n  )\n}\n","import {Flex, Text} from '@sanity/ui'\nimport {useMemo} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  Translate,\n  useArchivedReleases,\n  useTranslation,\n  VersionInlineBadge,\n} from 'sanity'\nimport {structureLocaleNamespace, usePaneRouter} from 'sanity/structure'\n\nimport {Banner} from './Banner'\n\nexport function ArchivedReleaseDocumentBanner(): React.JSX.Element {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {data: archivedReleases} = useArchivedReleases()\n\n  const {params, setParams} = usePaneRouter()\n  const handleGoBack = () => {\n    setParams({\n      ...params,\n      rev: params?.historyEvent || undefined,\n      since: undefined,\n      historyVersion: undefined,\n    })\n  }\n\n  const release = useMemo(() => {\n    return archivedReleases.find(\n      (r) => getReleaseIdFromReleaseDocumentId(r._id) === params?.historyVersion,\n    )\n  }, [archivedReleases, params?.historyVersion])\n\n  const description =\n    release?.state === 'published'\n      ? 'banners.published-release.description'\n      : 'banners.archived-release.description'\n\n  return (\n    <Banner\n      tone=\"caution\"\n      paddingY={2}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Translate\n              t={t}\n              i18nKey={description}\n              components={{\n                VersionBadge: ({children}) => {\n                  if (!release) return children\n                  return (\n                    <VersionInlineBadge $tone={getReleaseTone(release)}>\n                      {release?.metadata.title}\n                    </VersionInlineBadge>\n                  )\n                },\n              }}\n            />\n          </Text>\n        </Flex>\n      }\n      action={{\n        text: 'Go back to published version',\n        onClick: handleGoBack,\n      }}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'LiveEdit Draft Resolved',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {type ObjectSchemaType, Translate, useDocumentOperation, useTranslation} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): React.JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  return (\n    <Banner\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={2} paddingTop={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {LockIcon} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {\n  formatRelativeLocalePublishDate,\n  getReleaseTone,\n  LATEST,\n  type ReleaseDocument,\n  Translate,\n  useTranslation,\n} from 'sanity'\n\nimport {Banner} from './Banner'\n\nexport function ScheduledReleaseBanner({\n  currentRelease,\n}: {\n  currentRelease: ReleaseDocument\n}): React.JSX.Element {\n  const tone = getReleaseTone(currentRelease ?? LATEST)\n\n  const {t: tCore} = useTranslation()\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Flex align=\"center\" justify=\"center\" gap={2}>\n              <LockIcon />{' '}\n              <Translate\n                t={tCore}\n                i18nKey=\"release.banner.scheduled-for-publishing-on\"\n                values={{\n                  date: formatRelativeLocalePublishDate(currentRelease),\n                }}\n              />\n            </Flex>\n          </Text>\n        </Flex>\n      }\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const [patchChannel] = useState(() => createPatchChannel())\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType, selectedReleaseId)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel, selectedReleaseId])\n\n  const hasRev = Boolean(value?._rev)\n  const handleInitialValue = useEffectEvent(() => {\n    // this is a workaround for an issue that caused the document pushed to withDocument to get\n    // stuck at the first initial value.\n    // This effect is triggered only when the document goes from not having a revision, to getting one\n    // so it will kick in as soon as the document is received from the backend\n    patchChannel.publish({\n      type: 'mutation',\n      patches: [],\n      snapshot: value,\n    })\n  })\n  useEffect(() => {\n    if (hasRev) {\n      handleInitialValue()\n    }\n    // React to changes in hasRev only\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  getVersionFromId,\n  isReleaseDocument,\n  isReleaseScheduledOrScheduling,\n  type ReleaseDocument,\n  ScrollContainer,\n  usePerspective,\n  VirtualizerScrollInstanceProvider,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanners,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {AddToReleaseBanner} from './banners/AddToReleaseBanner'\nimport {ArchivedReleaseDocumentBanner} from './banners/ArchivedReleaseDocumentBanner'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {ScheduledReleaseBanner} from './banners/ScheduledReleaseBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n  } = useDocumentPane()\n  const {params} = usePaneRouter()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const [_portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? _portalElement || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(() => {\n    if (activeView.type === 'component' && activeView.component) {\n      const ActiveViewComponent = activeView.component\n      return (\n        <ActiveViewComponent\n          document={{\n            draft: editState?.draft || null,\n            displayed: displayed || value,\n            historical: displayed,\n            published: editState?.published || null,\n          }}\n          documentId={documentId}\n          options={activeView.options}\n          schemaType={schemaType}\n        />\n      )\n    }\n    return false\n  }, [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value])\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n  const {selectedPerspective, selectedReleaseId} = usePerspective()\n\n  const banners = useMemo(() => {\n    if (params?.historyVersion) {\n      return <ArchivedReleaseDocumentBanner />\n    }\n    const isCreatingDocument = displayed && !displayed._createdAt\n    const isScheduledRelease =\n      isReleaseDocument(selectedPerspective) && isReleaseScheduledOrScheduling(selectedPerspective)\n\n    if (isScheduledRelease) {\n      return <ScheduledReleaseBanner currentRelease={selectedPerspective as ReleaseDocument} />\n    }\n    if (\n      displayed?._id &&\n      getVersionFromId(displayed._id) !== selectedReleaseId &&\n      ready &&\n      !isCreatingDocument\n    ) {\n      return (\n        <AddToReleaseBanner\n          documentId={value._id}\n          currentRelease={selectedPerspective as ReleaseDocument}\n          value={displayed || undefined}\n        />\n      )\n    }\n\n    if (\n      activeView.type === 'form' &&\n      isLiveEdit &&\n      ready &&\n      editState?.draft?._id &&\n      !selectedReleaseId\n    ) {\n      return (\n        <DraftLiveEditBanner\n          displayed={displayed}\n          documentId={documentId}\n          schemaType={schemaType}\n        />\n      )\n    }\n\n    if (activeView.type !== 'form' || isPermissionsLoading || !ready) return null\n\n    return (\n      <>\n        {!permissions?.granted && (\n          <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n        )}\n        <ReferenceChangedBanner />\n        <DeprecatedDocumentTypeBanner />\n        <DeletedDocumentBanners />\n      </>\n    )\n  }, [\n    params?.historyVersion,\n    displayed,\n    selectedPerspective,\n    selectedReleaseId,\n    ready,\n    activeView.type,\n    isLiveEdit,\n    editState?.draft?._id,\n    isPermissionsLoading,\n    permissions?.granted,\n    requiredPermission,\n    value._id,\n    documentId,\n    schemaType,\n  ])\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {banners}\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={setPortalElement} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\nDocumentPanel.displayName = 'DocumentPanel'\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete, release}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type, release)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n  release,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type, release)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete, release}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type, release)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({\n  id,\n  type,\n  revision,\n  onComplete,\n  release,\n}) => {\n  const {restore} = useDocumentOperation(id, type, release)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published, release} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (release) {\n      // Version documents are not publishable by this action, they should be published as part of a release\n      return null\n    }\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    release,\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n  release,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (release) {\n      // Version documents cannot be unpublished by this action, they should be unpublished as part of a release\n      return null\n    }\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    release,\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable no-warning-comments */\n/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  usePerspective,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {toLowerCaseNoSpaces} from '../../../util/toLowerCaseNoSpaces'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  const sideMenuItems = useMemo(() => {\n    return selectedReleaseId ? [firstActionState, ...menuActionStates] : menuActionStates\n  }, [selectedReleaseId, firstActionState, menuActionStates])\n\n  /* Version / Bundling handling */\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && !selectedReleaseId && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${toLowerCaseNoSpaces(firstActionState.label)}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {/* if it's in version we always only want to show the items on the side menu and not on the main action */}\n      {((showMenu && menuActionStates.length > 0) || selectedReleaseId) && (\n        <ActionMenuButton actionStates={sideMenuItems} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, revisionId: revision} = useDocumentPane()\n\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): React.JSX.Element {\n  const {connectionState, schemaType, title, value: documentValue} = useDocumentPane()\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo} from 'react'\nimport {\n  formatRelativeLocalePublishDate,\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  getVersionFromId,\n  isDraftId,\n  isPublishedId,\n  isPublishedPerspective,\n  isReleaseScheduledOrScheduling,\n  isVersionId,\n  type ReleaseDocument,\n  Translate,\n  useActiveReleases,\n  useArchivedReleases,\n  useDateTimeFormat,\n  type UseDateTimeFormatOptions,\n  useDocumentVersions,\n  usePerspective,\n  useSchema,\n  useSetPerspective,\n  useTranslation,\n  VersionChip,\n} from 'sanity'\nimport {usePaneRouter} from 'sanity/structure'\n\nimport {isLiveEditEnabled} from '../../../../../components/paneItem/helpers'\nimport {useDocumentPane} from '../../../useDocumentPane'\n\ntype FilterReleases = {\n  notCurrentReleases: ReleaseDocument[]\n  currentReleases: ReleaseDocument[]\n  inCreation: ReleaseDocument | null\n}\n\nconst TooltipContent = ({release}: {release: ReleaseDocument}) => {\n  const {t} = useTranslation()\n\n  if (release.metadata.releaseType === 'asap') {\n    return <Text size={1}>{t('release.type.asap')}</Text>\n  }\n  if (release.metadata.releaseType === 'scheduled') {\n    const isActive = release.state === 'active'\n\n    return (\n      release.metadata.intendedPublishAt && (\n        <Text size={1}>\n          {isActive ? (\n            <Translate\n              t={t}\n              i18nKey=\"release.chip.tooltip.intended-for-date\"\n              values={{\n                date: formatRelativeLocalePublishDate(release),\n              }}\n            />\n          ) : (\n            <Translate\n              t={t}\n              i18nKey=\"release.chip.tooltip.scheduled-for-date\"\n              values={{\n                date: formatRelativeLocalePublishDate(release),\n              }}\n            />\n          )}\n        </Text>\n      )\n    )\n  }\n\n  if (release.metadata.releaseType === 'undecided') {\n    return <Text size={1}>{t('release.type.undecided')}</Text>\n  }\n  return null\n}\n\nconst DATE_TIME_FORMAT: UseDateTimeFormatOptions = {\n  dateStyle: 'medium',\n  timeStyle: 'short',\n}\n\nexport const DocumentPerspectiveList = memo(function DocumentPerspectiveList() {\n  const {selectedReleaseId, selectedPerspectiveName} = usePerspective()\n  const {t} = useTranslation()\n  const setPerspective = useSetPerspective()\n  const {params} = usePaneRouter()\n  const dateTimeFormat = useDateTimeFormat(DATE_TIME_FORMAT)\n  const {data: releases, loading} = useActiveReleases()\n  const {data: archivedReleases} = useArchivedReleases()\n  const schema = useSchema()\n  const {editState, displayed, documentType, documentId} = useDocumentPane()\n  const {data: documentVersions} = useDocumentVersions({documentId})\n  const isCreatingDocument = displayed && !displayed._createdAt\n\n  const filteredReleases: FilterReleases = useMemo(() => {\n    if (!documentVersions) return {notCurrentReleases: [], currentReleases: [], inCreation: null}\n    // Gets the releases ids from the document versions, it means, the releases that the document belongs to\n    const releasesIds = documentVersions.map((id) => getVersionFromId(id))\n    const activeReleases = releases.reduce(\n      (acc: FilterReleases, release) => {\n        const versionDocExists = releasesIds.includes(\n          getReleaseIdFromReleaseDocumentId(release._id),\n        )\n        const releaseId = getReleaseIdFromReleaseDocumentId(release._id)\n        const isCreatingThisVersion =\n          isCreatingDocument &&\n          releaseId === getVersionFromId(displayed._id || '') &&\n          releaseId === selectedReleaseId\n\n        if (isCreatingThisVersion) {\n          acc.inCreation = release\n        } else if (versionDocExists) {\n          acc.currentReleases.push(release)\n        } else {\n          acc.notCurrentReleases.push(release)\n        }\n        return acc\n      },\n      {notCurrentReleases: [], currentReleases: [], inCreation: null},\n    )\n\n    // without historyVersion, version is not in an archived release\n    if (!params?.historyVersion) return activeReleases\n\n    const archivedRelease = archivedReleases.find(\n      (r) => getReleaseIdFromReleaseDocumentId(r._id) === params?.historyVersion,\n    )\n\n    // only for explicitly archived releases; published releases use published perspective\n    if (archivedRelease?.state === 'archived') {\n      activeReleases.currentReleases.push(archivedRelease)\n    }\n\n    return activeReleases\n  }, [\n    archivedReleases,\n    isCreatingDocument,\n    displayed?._id,\n    documentVersions,\n    params?.historyVersion,\n    releases,\n    selectedReleaseId,\n  ])\n\n  const handlePerspectiveChange = useCallback(\n    (perspective: Parameters<typeof setPerspective>[0]) => () => {\n      setPerspective(perspective)\n    },\n    [setPerspective],\n  )\n\n  const schemaType = schema.get(documentType)\n  const isLiveEdit = schemaType ? isLiveEditEnabled(schemaType) : false\n\n  const isPublishedChipDisabled = useMemo(() => {\n    // If it's a live edit document the only option to edit it is through\n    // the published perspective, users should be able to select it.\n    if (isLiveEdit && !selectedReleaseId) return false\n\n    // If it's not live edit, we want to check for the existence of the published doc.\n    return !editState?.published\n  }, [isLiveEdit, selectedReleaseId, editState?.published])\n\n  const getReleaseChipState = useCallback(\n    (release: ReleaseDocument): {selected: boolean; disabled?: boolean} => {\n      if (!params?.historyVersion)\n        return {\n          selected:\n            getReleaseIdFromReleaseDocumentId(release._id) ===\n            getVersionFromId(displayed?._id || ''),\n        }\n\n      const isReleaseHistoryMatch =\n        getReleaseIdFromReleaseDocumentId(release._id) === params.historyVersion\n\n      return {selected: isReleaseHistoryMatch, disabled: isReleaseHistoryMatch}\n    },\n    [displayed?._id, params?.historyVersion],\n  )\n\n  const isPublishSelected: boolean = useMemo(() => {\n    /**\n     * The publish perspective is selected when:\n     *  - the document is live edit and there is no draft\n     *  - the document is published and the selected perspective is published\n     */\n    if (isLiveEdit && !editState?.draft?._id && !selectedReleaseId) return true\n    if (\n      isPublishedId(displayed?._id || '') &&\n      isPublishedPerspective(selectedPerspectiveName || '')\n    ) {\n      return true\n    }\n    return false\n  }, [\n    displayed?._id,\n    editState?.draft?._id,\n    isLiveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n  ])\n\n  const isDraftSelected: boolean = useMemo(() => {\n    const displayedId = displayed?._id || ''\n    /** the draft is selected when:\n     * not viewing a historical version,\n     * when the document displayed is a draft,\n     * when the perspective is null,\n     * when the document is not published and the displayed version is draft,\n     * when there is no draft (new document),\n     */\n    if (isPublishSelected) return false\n    if (params?.historyVersion) return false\n    if (selectedPerspectiveName) return false\n    if (isVersionId(displayedId)) return false\n    if (isDraftId(displayedId)) return true\n    if (\n      isPublishedId(displayedId) &&\n      editState?.published &&\n      isPublishedPerspective(selectedPerspectiveName || '')\n    )\n      return false\n    return true\n  }, [\n    displayed?._id,\n    editState?.published,\n    isPublishSelected,\n    params?.historyVersion,\n    selectedPerspectiveName,\n  ])\n\n  const isDraftDisabled: boolean = useMemo(() => {\n    // Draft is disabled when we are creating a new document inside a release\n    // or when the document is live edit and there is no draft\n    if (editState?.draft) return false\n\n    if (isCreatingDocument && selectedReleaseId) return true\n    if (isLiveEdit) return true\n    return false\n  }, [editState?.draft, isCreatingDocument, isLiveEdit, selectedReleaseId])\n\n  return (\n    <>\n      <VersionChip\n        tooltipContent={\n          <Text size={1}>\n            {editState?.published && editState?.published?._updatedAt ? (\n              <Translate\n                t={t}\n                i18nKey=\"release.chip.tooltip.published-date\"\n                values={{date: dateTimeFormat.format(new Date(editState?.published._updatedAt))}}\n              />\n            ) : (\n              <>{t('release.chip.tooltip.not-published')}</>\n            )}\n          </Text>\n        }\n        disabled={isPublishedChipDisabled}\n        onClick={handlePerspectiveChange('published')}\n        selected={isPublishSelected}\n        text={t('release.chip.published')}\n        tone=\"positive\"\n        contextValues={{\n          documentId: editState?.published?._id || editState?.id || '',\n          menuReleaseId: editState?.published?._id || editState?.id || '',\n          releases: filteredReleases.notCurrentReleases,\n          releasesLoading: loading,\n          documentType,\n          fromRelease: 'published',\n          isVersion: false,\n          disabled: !editState?.published,\n        }}\n      />\n      <VersionChip\n        tooltipContent={\n          <Text size={1}>\n            {editState?.draft ? (\n              <>\n                {editState?.draft._updatedAt ? (\n                  <Translate\n                    t={t}\n                    i18nKey=\"release.chip.tooltip.edited-date\"\n                    values={{date: dateTimeFormat.format(new Date(editState?.draft._updatedAt))}}\n                  />\n                ) : (\n                  <Translate\n                    t={t}\n                    i18nKey=\"release.chip.tooltip.created-date\"\n                    values={{date: dateTimeFormat.format(new Date(editState?.draft._createdAt))}}\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                {isLiveEdit\n                  ? t('release.chip.tooltip.draft-disabled.live-edit')\n                  : t('release.chip.tooltip.no-edits')}\n              </>\n            )}\n          </Text>\n        }\n        selected={isDraftSelected}\n        disabled={isDraftDisabled}\n        text={t('release.chip.draft')}\n        tone={editState?.draft ? 'caution' : 'neutral'}\n        onClick={handlePerspectiveChange('drafts')}\n        contextValues={{\n          documentId: editState?.draft?._id || editState?.published?._id || editState?.id || '',\n          menuReleaseId: editState?.draft?._id || editState?.published?._id || editState?.id || '',\n          releases: filteredReleases.notCurrentReleases,\n          releasesLoading: loading,\n          documentType: documentType,\n          fromRelease: 'draft',\n          isVersion: false,\n          disabled: !editState?.draft,\n        }}\n      />\n      {filteredReleases.inCreation && (\n        <VersionChip\n          tooltipContent={<TooltipContent release={filteredReleases.inCreation} />}\n          selected\n          onClick={() => {}}\n          locked={false}\n          tone={getReleaseTone(filteredReleases.inCreation)}\n          text={\n            filteredReleases.inCreation.metadata.title || t('release.placeholder-untitled-release')\n          }\n          contextValues={{\n            disabled: true, // disable the chip context menu, this one is in creation\n            documentId: displayed?._id || '',\n            menuReleaseId: filteredReleases.inCreation._id,\n            releases: filteredReleases.notCurrentReleases,\n            releasesLoading: loading,\n            documentType,\n            fromRelease: getReleaseIdFromReleaseDocumentId(filteredReleases.inCreation._id),\n            releaseState: filteredReleases.inCreation.state,\n            isVersion: true,\n          }}\n        />\n      )}\n\n      {displayed &&\n        filteredReleases.currentReleases?.map((release) => (\n          <VersionChip\n            key={release._id}\n            tooltipContent={<TooltipContent release={release} />}\n            {...getReleaseChipState(release)}\n            onClick={handlePerspectiveChange(getReleaseIdFromReleaseDocumentId(release._id))}\n            text={release.metadata.title || t('release.placeholder-untitled-release')}\n            tone={getReleaseTone(release)}\n            locked={isReleaseScheduledOrScheduling(release)}\n            contextValues={{\n              documentId: displayed?._id || '',\n              menuReleaseId: release._id,\n              releases: filteredReleases.notCurrentReleases,\n              releasesLoading: loading,\n              documentType: documentType,\n              fromRelease: getReleaseIdFromReleaseDocumentId(release._id),\n              releaseState: release.state,\n              isVersion: true,\n            }}\n          />\n        ))}\n    </>\n  )\n})\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Box, Card, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\nimport {DocumentPerspectiveList} from './perspective/DocumentPerspectiveList'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    const title = useMemo(() => <DocumentHeaderTitle />, [])\n    const tabs = useMemo(() => showTabs && <DocumentHeaderTabs />, [showTabs])\n    const backButton = useMemo(\n      () =>\n        showBackButton && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: t('pane-header.back-button.text')}}\n          />\n        ),\n      [BackLink, showBackButton, t],\n    )\n    const renderedActions = useMemo(\n      () => (\n        <Flex align=\"center\" gap={1}>\n          {unstable_languageFilter.length > 0 && (\n            <>\n              {unstable_languageFilter.map((LanguageFilterComponent, idx) => {\n                return (\n                  <LanguageFilterComponent\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`language-filter-${idx}`}\n                    schemaType={schemaType}\n                  />\n                )\n              })}\n            </>\n          )}\n\n          {menuButtonNodes.map((item) => (\n            <PaneHeaderActionButton key={item.key} node={item} />\n          ))}\n          {editState && (\n            <RenderActionCollectionState\n              actions={actions}\n              actionProps={editState}\n              group=\"paneActions\"\n            >\n              {renderPaneActions}\n            </RenderActionCollectionState>\n          )}\n\n          {showSplitPaneButton && (\n            <Button\n              aria-label={t('buttons.split-pane-button.aria-label')}\n              icon={SplitVerticalIcon}\n              key=\"split-pane-button\"\n              mode=\"bleed\"\n              onClick={onPaneSplit}\n              tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n            />\n          )}\n\n          {showSplitPaneCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              onClick={onPaneClose}\n              tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n            />\n          )}\n\n          {showPaneGroupCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n              as={BackLink}\n            />\n          )}\n        </Flex>\n      ),\n      [\n        BackLink,\n        actions,\n        editState,\n        menuButtonNodes,\n        onPaneClose,\n        onPaneSplit,\n        renderPaneActions,\n        schemaType,\n        showPaneGroupCloseButton,\n        showSplitPaneButton,\n        showSplitPaneCloseButton,\n        t,\n        unstable_languageFilter,\n      ],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <Card hidden={collapsed} style={{lineHeight: 0}}>\n          <Flex>\n            <Flex flex={1} wrap=\"wrap\" gap={1} padding={3} paddingBottom={0}>\n              <DocumentPerspectiveList />\n            </Flex>\n\n            <Box flex=\"none\" padding={3} paddingBottom={0}>\n              {renderedActions}\n            </Box>\n          </Flex>\n        </Card>\n\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={title}\n          tabs={tabs}\n          tabIndex={tabIndex}\n          backButton={backButton}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  AvatarSkeleton,\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const IconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{IconComponent && <IconComponent />}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError({versionError}: {versionError?: boolean}) {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {versionError\n            ? t('timeline.error.load-document-changes-version-title')\n            : t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {versionError\n            ? t('timeline.error.load-document-changes-version-description')\n            : t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForRev(revChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForSince(sinceChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore?.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {\n  // eslint-disable-next-line no-restricted-imports\n  Button,\n  Flex,\n  Skeleton,\n  Text,\n} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {useEffect, useLayoutEffect, useMemo, useState} from 'react'\nimport {\n  AvatarSkeleton,\n  isPublishedPerspective,\n  TIMELINE_ITEM_I18N_KEY_MAPPING,\n  useEvents,\n  usePerspective,\n  UserAvatar,\n  useRelativeTime,\n  useSource,\n  useSyncState,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\n\nimport {HISTORY_INSPECTOR_NAME} from '../constants'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING as TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY} from '../timeline'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst RELATIVE_TIME_OPTIONS = {\n  minimal: true,\n  useTemporalPhrase: true,\n} as const\n\nconst MotionButton = motion.create(Button)\n\nconst ButtonSkeleton = () => {\n  return (\n    <Flex align=\"center\" gap={3} paddingLeft={1} paddingRight={2} paddingY={2}>\n      <div style={{margin: -5}}>\n        <AvatarSkeleton $size={0} animated />\n      </div>\n      <Skeleton animated style={{width: '80px', height: '15px'}} radius={2} />\n    </Flex>\n  )\n}\n\nconst DocumentStatusButton = ({\n  author,\n  translationKey,\n  timestamp = '',\n}: {\n  author: string\n  translationKey: string\n  timestamp?: string\n}) => {\n  const {onHistoryOpen, inspector, onHistoryClose} = useDocumentPane()\n  const {t} = useTranslation()\n  const relativeTime = useRelativeTime(timestamp, RELATIVE_TIME_OPTIONS)\n\n  return (\n    <MotionButton\n      data-testid=\"pane-footer-document-status\"\n      animate={{opacity: 1}}\n      initial={{opacity: 0}} // Width of the skeleton\n      mode=\"bleed\"\n      onClick={inspector?.name === HISTORY_INSPECTOR_NAME ? onHistoryClose : onHistoryOpen}\n      padding={2}\n      muted\n    >\n      <Flex align=\"center\" flex=\"none\" gap={3}>\n        {author && (\n          <div style={{margin: -5}}>\n            <UserAvatar user={author} size={0} />\n          </div>\n        )}\n        <Text muted size={1}>\n          {t(translationKey)} {relativeTime}\n        </Text>\n      </Flex>\n    </MotionButton>\n  )\n}\n\nconst FallbackStatus = () => {\n  const {editState} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n\n  const status = useMemo(() => {\n    if (isPublishedPerspective(selectedPerspective) && editState?.published?._updatedAt) {\n      return {\n        translationKey: TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion,\n        timestamp: editState.published._updatedAt,\n      }\n    }\n    if (editState?.version?._updatedAt) {\n      return {\n        translationKey:\n          editState?.version?._updatedAt === editState?.version?._createdAt\n            ? TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion\n            : TIMELINE_ITEM_I18N_KEY_MAPPING.editDocumentVersion,\n        timestamp: editState.version._updatedAt,\n      }\n    }\n    if (editState?.draft?._updatedAt) {\n      return {\n        translationKey:\n          editState?.draft?._updatedAt === editState?.draft?._createdAt\n            ? TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion\n            : TIMELINE_ITEM_I18N_KEY_MAPPING.editDocumentVersion,\n        timestamp: editState.draft._updatedAt,\n      }\n    }\n    return null\n  }, [\n    selectedPerspective,\n    editState?.published?._updatedAt,\n    editState?.version?._updatedAt,\n    editState?.version?._createdAt,\n    editState?.draft?._updatedAt,\n    editState?.draft?._createdAt,\n  ])\n  if (!status) {\n    return null\n  }\n  return (\n    <DocumentStatusButton\n      author=\"\"\n      translationKey={status.translationKey}\n      timestamp={status.timestamp}\n    />\n  )\n}\n\nconst EventsStatus = () => {\n  const {events, loading} = useEvents()\n  const event = events?.[0]\n\n  if (!event && loading) {\n    return <ButtonSkeleton />\n  }\n  if (!event) {\n    return <FallbackStatus />\n  }\n\n  return (\n    <DocumentStatusButton\n      author={event.author}\n      translationKey={TIMELINE_ITEM_I18N_KEY_MAPPING[event.type]}\n      timestamp={event.timestamp}\n    />\n  )\n}\n\nconst TimelineStatus = () => {\n  const {timelineStore} = useDocumentPane()\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const event = chunks?.[0]\n\n  if (!event && loading) {\n    return <ButtonSkeleton />\n  }\n  if (!event) {\n    return <FallbackStatus />\n  }\n\n  const author = Array.from(event.authors)[0]\n  return (\n    <DocumentStatusButton\n      author={author}\n      translationKey={TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY[event.type]}\n      timestamp={event.endTimestamp}\n    />\n  )\n}\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\nexport function DocumentStatusLine() {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n  const source = useSource()\n  const eventsEnabled = source.beta?.eventsAPI?.documents\n\n  const syncState = useSyncState(documentId, documentType, editState?.release)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  if (eventsEnabled) {\n    return <EventsStatus />\n  }\n\n  return <TimelineStatus />\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): React.JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>\n            <RestoreIcon />\n          </Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useMemo, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isPublishedPerspective,\n  isReleaseDocument,\n  isSanityCreateLinked,\n  usePerspective,\n  useSanityCreateConfig,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, revisionId, onChange: onDocumentChange} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  const showingRevision = Boolean(revisionId)\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = useMemo(() => {\n    const isReady = Boolean(editState?.ready && typeof collapsed === 'boolean')\n    if (selectedPerspective) {\n      if (isPublishedPerspective(selectedPerspective)) {\n        return isReady && Boolean(editState?.published)\n      }\n      if (isReleaseDocument(selectedPerspective)) {\n        return isReady && Boolean(editState?.version)\n      }\n    }\n    return isReady\n  }, [collapsed, editState?.published, editState?.ready, editState?.version, selectedPerspective])\n\n  let actions: React.JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? <RevisionStatusLine /> : <DocumentStatusLine />}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as: As = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return (\n    <As id={id} onKeyDown={handleKeyDown} tabIndex={-1} {...rest} ref={rootRef}>\n      {children}\n      {activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      )}\n    </As>\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  type Path,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n    isInitialValueLoading,\n    ready,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const {\n    documentLinkedBannerContent: CreateLinkedBannerContent,\n    startInCreateBanner: StartInCreateBanner,\n  } = useSanityCreateConfig().components ?? {}\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  const portalElements = useMemo(\n    () => ({[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}),\n    [documentPanelPortalElement],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider __unstable_elements={portalElements}>\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              {StartInCreateBanner && (\n                <ShowWhenPaneOpen>\n                  <StartInCreateBanner\n                    document={value}\n                    documentId={documentId}\n                    documentType={schemaType}\n                    documentReady={ready}\n                    isInitialValueLoading={!!isInitialValueLoading}\n                    panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n                  />\n                </ShowWhenPaneOpen>\n              )}\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useInsertionEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentActionsContext,\n  type DocumentActionsVersionType,\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  getVersionFromId,\n  isPublishedPerspective,\n  isReleaseDocument,\n  isReleaseScheduledOrScheduling,\n  isSanityCreateLinkedDocument,\n  isVersionId,\n  type OnPathFocusPayload,\n  type PartialContext,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePerspective,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {\n  type DocumentPaneProviderProps as DocumentPaneProviderWrapperProps,\n  type HistoryStoreProps,\n} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\ninterface DocumentPaneProviderProps extends DocumentPaneProviderWrapperProps {\n  historyStore: HistoryStoreProps\n}\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath, forcedVersion, historyStore} = props\n  const {\n    store: timelineStore,\n    error: timelineError,\n    ready: timelineReady,\n    revisionDocument,\n    onOlderRevision,\n    sinceDocument,\n    isPristine,\n    revisionId,\n    lastNonDeletedRevId,\n  } = historyStore\n\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const telemetry = useTelemetry()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n\n  const perspective = usePerspective()\n\n  const {isReleaseLocked, selectedReleaseId, selectedPerspectiveName} = useMemo(() => {\n    // TODO: COREL - Remove this after updating sanity-assist to use <PerspectiveProvider>\n    if (forcedVersion) {\n      return forcedVersion\n    }\n    return {\n      selectedPerspectiveName: perspective.selectedPerspectiveName,\n      selectedReleaseId: perspective.selectedReleaseId,\n      isReleaseLocked: isReleaseDocument(perspective.selectedPerspective)\n        ? isReleaseScheduledOrScheduling(perspective.selectedPerspective)\n        : false,\n    }\n  }, [\n    forcedVersion,\n    perspective.selectedPerspectiveName,\n    perspective.selectedReleaseId,\n    perspective.selectedPerspective,\n  ])\n\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n    version: params.version,\n  })\n\n  const initialValue = useUnique(initialValueRaw)\n  const isInitialValueLoading = initialValue.loading\n\n  const {patch} = useDocumentOperation(documentId, documentType, selectedReleaseId)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const {validation: validationRaw} = useValidationStatus(\n    documentId,\n    documentType,\n    selectedReleaseId,\n  )\n  const connectionState = useConnectionState(documentId, documentType, selectedReleaseId)\n  const liveEdit = Boolean(schemaType?.liveEdit)\n\n  const value: SanityDocumentLike = useMemo(() => {\n    if (selectedReleaseId) {\n      return editState.version || editState.draft || editState.published || initialValue.value\n    }\n    if (selectedPerspectiveName && isPublishedPerspective(selectedPerspectiveName)) {\n      return (\n        editState.published ||\n        (liveEdit ? initialValue.value : {_id: documentId, _type: documentType})\n      )\n    }\n    return editState.draft || editState.published || initialValue.value\n  }, [\n    documentId,\n    documentType,\n    editState.draft,\n    editState.published,\n    editState.version,\n    initialValue.value,\n    liveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n  ])\n\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  const getDocumentVersionType = useCallback(() => {\n    let version: DocumentActionsVersionType\n    switch (true) {\n      case Boolean(params.rev):\n        version = 'revision'\n        break\n      case selectedReleaseId && isVersionId(value._id):\n        version = 'version'\n        break\n      case selectedPerspectiveName === 'published':\n        version = 'published'\n        break\n      default:\n        version = 'draft'\n    }\n\n    return version\n  }, [selectedPerspectiveName, selectedReleaseId, params, value._id])\n\n  const actionsPerspective = useMemo(() => getDocumentVersionType(), [getDocumentVersionType])\n\n  const documentActionsProps: PartialContext<DocumentActionsContext> = useMemo(\n    () => ({\n      schemaType: documentType,\n      documentId,\n      versionType: actionsPerspective,\n      ...(selectedReleaseId && {versionName: selectedReleaseId}),\n    }),\n    [documentType, documentId, actionsPerspective, selectedReleaseId],\n  )\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions(documentActionsProps),\n    [documentActions, documentActionsProps],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published && !editState?.version) && !isPristine\n  }, [editState?.draft, editState?.published, editState?.version, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(value._id).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [presenceStore, value._id])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceDocument\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? revisionDocument || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, revisionDocument, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit, there is a risk of data loss, so we disable editing in this case\n    if (liveEdit && editState.draft?._id) {\n      return true\n    }\n    if (!liveEdit && selectedPerspectiveName === 'published') {\n      return true\n    }\n\n    // If a release is selected, validate that the document id matches the selected release id\n    if (selectedReleaseId && getVersionFromId(value._id) !== selectedReleaseId) {\n      return true\n    }\n\n    return (\n      !ready ||\n      revisionId !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isCreateLinked ||\n      isReleaseLocked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft?._id,\n    liveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n    value._id,\n    ready,\n    revisionId,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n    isReleaseLocked,\n  ])\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error(\n      'Attempted to patch the Sanity document during initial render or in an `useInsertionEffect`. Input components should only call `onChange()` in a useEffect or an event handler.',\n    )\n  })\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  useInsertionEffect(() => {\n    // Create-linked documents enter a read-only state in Studio. However, unlinking a Create-linked\n    // document necessitates patching it. This renders it impossible to unlink a Create-linked\n    // document.\n    //\n    // Excluding Create-linked documents from this check is a simple way to ensure they can be\n    // unlinked.\n    //\n    // This does mean `handleChange` can be used to patch any part of a Create-linked document,\n    // which would otherwise be read-only.\n    if (readOnly && !isCreateLinked) {\n      patchRef.current = () => {\n        throw new Error('Attempted to patch a read-only document')\n      }\n    } else {\n      // note: this needs to happen in an insertion effect to make sure we're ready to receive patches from child components when they run their effects initially\n      // in case they do e.g. `useEffect(() => props.onChange(set(\"foo\")), [])`\n      // Note: although we discourage patch-on-mount, we still support it.\n      patchRef.current = (event: PatchEvent) => {\n        // when creating a new draft\n        if (!editState.draft && !editState.published) {\n          telemetry.log(CreatedDraft)\n        }\n\n        patch.execute(toMutationPatches(event.patches), initialValue.value)\n      }\n    }\n  }, [editState.draft, editState.published, initialValue.value, patch, telemetry, readOnly])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  useEffect(() => {\n    formStateRef.current = formState\n  }, [formState])\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId: value._id,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [presenceStore, value._id],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () =>\n      ({\n        actions,\n        activeViewId,\n        badges,\n        changesOpen,\n        closeInspector,\n        collapsedFieldSets,\n        collapsedPaths,\n        compareValue,\n        connectionState,\n        displayed,\n        documentId,\n        documentIdRaw,\n        documentType,\n        editState,\n        fieldActions,\n        focusPath,\n        inspector: currentInspector || null,\n        inspectors,\n        __internal_tasks,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onFocus: handleFocus,\n        onPathOpen: setOpenPath,\n        onHistoryClose: handleHistoryClose,\n        onHistoryOpen: handleHistoryOpen,\n        onInspectClose: handleLegacyInspectClose,\n        onMenuAction: handleMenuAction,\n        onPaneClose: handlePaneClose,\n        onPaneSplit: handlePaneSplit,\n        onSetActiveFieldGroup: handleSetActiveFieldGroup,\n        onSetCollapsedPath: handleOnSetCollapsedPath,\n        onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n        openInspector,\n        openPath,\n        index,\n        inspectOpen,\n        validation,\n        menuItemGroups: menuItemGroups || [],\n        paneKey,\n        previewUrl,\n        ready,\n        schemaType: schemaType!,\n        isPermissionsLoading,\n        isInitialValueLoading,\n        permissions,\n        setTimelineRange,\n        setIsDeleting,\n        isDeleting,\n        isDeleted,\n        timelineError,\n        timelineStore,\n        title,\n        value,\n        selectedReleaseId,\n        views,\n        formState,\n        unstable_languageFilter: languageFilter,\n        revisionId,\n        lastNonDeletedRevId,\n      }) satisfies DocumentPaneContextValue,\n    [\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      currentInspector,\n      inspectors,\n      __internal_tasks,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      setOpenPath,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      handleOnSetCollapsedPath,\n      handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups,\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      permissions,\n      setTimelineRange,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineStore,\n      title,\n      value,\n      selectedReleaseId,\n      views,\n      formState,\n      languageFilter,\n      revisionId,\n      lastNonDeletedRevId,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type ReleaseId} from '@sanity/client'\nimport {type ObjectSchemaType} from '@sanity/types'\nimport {useMemo} from 'react'\nimport {\n  EMPTY_ARRAY,\n  EventsProvider,\n  getDraftId,\n  getPublishedId,\n  getReleaseIdFromReleaseDocumentId,\n  getVersionId,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  PerspectiveProvider,\n  useArchivedReleases,\n  useEditState,\n  useEventsStore,\n  usePerspective,\n  useSchema,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\nimport {usePaneOptions} from './DocumentPane'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\nexport const DocumentEventsPane = (props: DocumentPaneProviderProps) => {\n  const {params = EMPTY_PARAMS} = usePaneRouter()\n  const options = usePaneOptions(props.pane.options, params)\n  const schema = useSchema()\n  const documentType = options.type\n  const schemaType = schema.get(options.type) as ObjectSchemaType | undefined\n  const liveEdit = Boolean(schemaType?.liveEdit)\n\n  const {selectedPerspectiveName, selectedReleaseId, selectedPerspective} = usePerspective()\n  const {data: archivedReleases} = useArchivedReleases()\n  const editState = useEditState(\n    getPublishedId(options.id),\n    documentType,\n    'default',\n    selectedReleaseId,\n  )\n\n  const showingPublishedOnDraft = liveEdit && selectedPerspective === 'drafts' && !editState?.draft\n  const {rev, since} = params\n  const historyVersion = params.historyVersion as ReleaseId | undefined\n\n  const documentId = useMemo(() => {\n    if (showingPublishedOnDraft) {\n      return getPublishedId(options.id)\n    }\n    if (\n      historyVersion &&\n      archivedReleases.some(\n        (release) => getReleaseIdFromReleaseDocumentId(release._id) === historyVersion,\n      )\n    ) {\n      // Check if we have a release that matches with this historyVersion\n      return getVersionId(options.id, historyVersion)\n    }\n    if (typeof selectedPerspectiveName === 'undefined') {\n      return getDraftId(options.id)\n    }\n    if (selectedPerspectiveName === 'published') {\n      return getPublishedId(options.id)\n    }\n    if (selectedReleaseId) {\n      return getVersionId(options.id, selectedPerspectiveName)\n    }\n    return options.id\n  }, [\n    archivedReleases,\n    historyVersion,\n    selectedPerspectiveName,\n    options.id,\n    showingPublishedOnDraft,\n    selectedReleaseId,\n  ])\n\n  const eventsStore = useEventsStore({documentId, documentType: options.type, rev, since})\n\n  const historyStoreProps = useMemo(\n    () => ({\n      error: eventsStore.error,\n      revisionId: eventsStore.revision?.revisionId || null,\n      onOlderRevision: Boolean(eventsStore.revision?.document && eventsStore.revision?.revisionId),\n      revisionDocument: eventsStore.revision?.document || null,\n      sinceDocument: eventsStore.sinceRevision?.document || null,\n      ready: !eventsStore.loading,\n      isPristine: Boolean(eventsStore.events.length === 0),\n      lastNonDeletedRevId:\n        eventsStore.events.find(\n          (e) => !isDeleteDocumentGroupEvent(e) && !isDeleteDocumentVersionEvent(e),\n        )?.id || null,\n    }),\n    [eventsStore],\n  )\n\n  const value = useMemo(() => eventsStore, [eventsStore])\n\n  return (\n    <EventsProvider value={value}>\n      {historyVersion ? (\n        <PerspectiveProvider\n          selectedPerspectiveName={historyVersion}\n          excludedPerspectives={EMPTY_ARRAY}\n        >\n          <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n        </PerspectiveProvider>\n      ) : (\n        <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n      )}\n    </EventsProvider>\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useMemo, useState} from 'react'\nimport {getPublishedId, useTimelineSelector, useTimelineStore} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\nimport {usePaneOptions} from './DocumentPane'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\nexport const DocumentPaneWithLegacyTimelineStore = (props: DocumentPaneProviderProps) => {\n  const {pane} = props\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n\n  const params = paneRouter.params || EMPTY_PARAMS\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  const store = useTimelineStore({\n    documentId: getPublishedId(options.id),\n    documentType: options.type,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  const onOlderRevision = useTimelineSelector(store, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(store, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(store, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(store, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(store, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(store, (state) => state.isPristine)\n  const lastNonDeletedRevId = useTimelineSelector(store, (state) => state.lastNonDeletedRevId)\n\n  const historyStoreProps = useMemo(\n    () => ({\n      store,\n      error: timelineError,\n      revisionId: revTime?.id || null,\n      onOlderRevision: onOlderRevision,\n      revisionDocument: timelineDisplayed as SanityDocument | null,\n      sinceDocument: sinceAttributes as SanityDocument | null,\n      ready: timelineReady,\n      isPristine: Boolean(isPristine),\n      lastNonDeletedRevId,\n    }),\n    [\n      store,\n      timelineError,\n      revTime?.id,\n      onOlderRevision,\n      timelineDisplayed,\n      sinceAttributes,\n      timelineReady,\n      isPristine,\n      lastNonDeletedRevId,\n    ],\n  )\n  return <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n}\n","import {memo} from 'react'\nimport {useSource} from 'sanity'\n\nimport {DocumentEventsPane} from './DocumentEventsPane'\nimport {DocumentPaneWithLegacyTimelineStore} from './DocumentPaneLegacyTimeline'\nimport {type DocumentPaneProviderProps} from './types'\n\n/**\n * @internal\n */\nexport const DocumentPaneProviderWrapper = memo((props: DocumentPaneProviderProps) => {\n  const source = useSource()\n  if (source.beta?.eventsAPI?.documents) {\n    return <DocumentEventsPane {...props} />\n  }\n  return <DocumentPaneWithLegacyTimelineStore {...props} />\n})\nDocumentPaneProviderWrapper.displayName = 'Memo(DocumentPaneProviderWrapper)'\n","import {useEffect, useRef} from 'react'\nimport {usePerspective} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\n\n/**\n * This hooks takes care of resetting the history related params when the perspective changes.\n * It needs to be placed in a stable component, like the `DocumentPane`, which won't be unmounted when the perspective changes.\n */\nexport function useResetHistoryParams() {\n  const {params = EMPTY_PARAMS, setParams} = usePaneRouter()\n\n  const {selectedPerspectiveName} = usePerspective()\n  const isMounted = useRef(false)\n\n  const updateHistoryParams = useEffectEvent((_perspective?: string) => {\n    // Check if any of the history related params are set, and reset them, don't unnecessarily update the params\n    const PARAMS_TO_UPDATE = ['since', 'historyVersion', 'rev', 'preserveRev']\n    const shouldUpdateParams = PARAMS_TO_UPDATE.some((param) => params[param])\n    if (!shouldUpdateParams) return\n\n    setParams({\n      ...params,\n      // Reset the history related params when the perspective changes, as they don't make sense\n      // in the context of the new perspective - preserveRev is used when setting draft revision.\n      rev: params.preserveRev === 'true' ? params.rev : undefined,\n      preserveRev: undefined,\n      since: undefined,\n      historyVersion: undefined,\n    })\n  })\n  useEffect(() => {\n    // Skip the first run to avoid resetting the params on initial load\n    if (isMounted.current) {\n      updateHistoryParams(selectedPerspectiveName)\n    }\n  }, [selectedPerspectiveName])\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n}\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  usePerspective,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProviderWrapper} from './DocumentPaneProviderWrapper'\nimport {type DocumentPaneProviderProps} from './types'\nimport {useResetHistoryParams} from './useResetHistoryParams'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const {selectedPerspectiveName} = usePerspective()\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n  useResetHistoryParams()\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProviderWrapper\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}-${selectedPerspectiveName || ''}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProviderWrapper>\n  )\n}\n\n/**\n * @internal\n */\nexport function usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    noDocumentsContent,\n    onRetry,\n    paneTitle,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n    t,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId, isVersionId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    const isVersion = doc?.id && isVersionId(doc._id)\n    const hasDraft = Boolean(entry.draft)\n\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft,\n      isVersion,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type ClientPerspective, type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchOptions,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  perspective?: ClientPerspective\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    perspective,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeAllVersions: true,\n      includeResult: false,\n      visibility: 'query',\n      tag: 'listen-search-query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({\n    filter,\n    limit,\n    params,\n    searchQuery,\n    perspective,\n    sort,\n    staticTypeNames,\n  })\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions: SearchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n              perspective,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {type ClientPerspective} from '@sanity/client'\nimport {observableCallback} from 'observable-callback'\nimport {useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  perspective?: ClientPerspective\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {\n    filter: searchFilter,\n    params: paramsProp,\n    sortOrder,\n    searchQuery,\n    perspective,\n    apiVersion,\n  } = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [[onRetry$, onRetry]] = useState(() => observableCallback())\n  const [[onFetchFullList$, onLoadFullList]] = useState(() => observableCallback())\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      perspective,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    perspective,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useActiveReleases,\n  useI18nText,\n  usePerspective,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n  const releases = useActiveReleases()\n  const {perspectiveStack} = usePerspective()\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {\n    error,\n    isLoadingFullList,\n    isLoading: documentListIsLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    onRetry,\n  } = useDocumentList({\n    apiVersion,\n    filter,\n    perspective: perspectiveStack.length === 0 ? 'raw' : perspectiveStack,\n    params,\n    searchQuery: searchQuery?.trim(),\n    sortOrder,\n  })\n\n  const isLoading = documentListIsLoading || releases.loading\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => {\n      inputRef.current = ref\n    },\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} versions={undefined} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n  includeAllVersions: true,\n  tag: 'document-sheet-list-store',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useState} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const [previous, setPrevious] = useState<ValueType>(value)\n  if (!shallowEquals(previous, value)) {\n    setPrevious(value)\n    return value\n  }\n  return previous\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\nPaneContainer.displayName = 'Memo(PaneContainer)'\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {type SearchParam} from 'sanity/router'\n\nimport {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link structure.BaseIntentParams} and {@link structure.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n\n  searchParams?: SearchParam[]\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEditSchemaType, version} = props\n\n  if (liveEditSchemaType && !version) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = getPaneParams(intent, params)\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n\nfunction getPaneParams(\n  intent: string,\n  {template, version}: Record<string, string>,\n): {template?: string; version?: string} {\n  if (intent !== 'create') return EMPTY_PARAMS\n  if (template && version) return {template, version}\n  if (template) return {template}\n  if (version) return {version}\n  return EMPTY_PARAMS\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  usePerspective,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): React.JSX.Element {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  if (selectedReleaseId) {\n    return (\n      <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n        <Card flex={1} padding={2} paddingTop={0}>\n          <TimelineError versionError />\n        </Card>\n      </Flex>\n    )\n  }\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {\n  type DocumentGroupEvent,\n  Event,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  useTranslation,\n} from 'sanity'\n\nimport {Tooltip} from '../../../../../ui-components'\n\nexport interface TimelineItemProps {\n  event: DocumentGroupEvent\n  isSelected: boolean\n  onSelect: (chunk: DocumentGroupEvent) => void\n  optionsMenu?: React.ReactNode\n}\n\nconst getIsSelectable = (event: DocumentGroupEvent) => {\n  return (\n    !isDeleteDocumentVersionEvent(event) &&\n    !isDeleteDocumentGroupEvent(event) &&\n    !isUnpublishDocumentEvent(event) &&\n    !isScheduleDocumentVersionEvent(event) &&\n    !isUnscheduleDocumentVersionEvent(event)\n  )\n}\n\nexport function EventTimelineItem({event, isSelected, onSelect, optionsMenu}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const isSelectable = getIsSelectable(event)\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(event)\n      }\n    },\n    [onSelect, event, isSelectable],\n  )\n  return (\n    <Tooltip content={isSelectable ? '' : t('changes.not-selectable')} disabled={isSelectable}>\n      <Flex gap={1}>\n        <Card\n          as={isSelectable ? 'button' : 'div'}\n          onClick={handleClick}\n          padding={2}\n          pressed={isSelected}\n          radius={2}\n          data-ui=\"timelineItem\"\n          data-testid=\"timeline-item-button\"\n          data-chunk-timestamp={event.timestamp}\n          style={{\n            cursor: isSelectable ? 'pointer' : 'default',\n          }}\n        >\n          <Event event={event} showChangesBy=\"tooltip\" />\n        </Card>\n        {optionsMenu}\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {\n  Flex,\n  Menu,\n  // eslint-disable-next-line no-restricted-imports\n  MenuItem,\n  Text,\n  usePortal,\n} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  ContextMenuButton,\n  getReleaseTone,\n  getVersionFromId,\n  type PublishDocumentVersionEvent,\n  RELEASES_INTENT,\n  Translate,\n  useSetPerspective,\n  useTranslation,\n  VersionInlineBadge,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\nimport {usePaneRouter} from 'sanity/structure'\n\nimport {MenuButton} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TIMELINE_MENU_PORTAL} from '../timelineMenu'\n\nexport function PublishedEventMenu({event}: {event: PublishDocumentVersionEvent}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const portalContext = usePortal()\n  const {params, setParams} = usePaneRouter()\n  const setPerspective = useSetPerspective()\n\n  const handleOpenReleaseDocument = useCallback(() => {\n    setParams({\n      ...params,\n      rev: event.versionRevisionId || '@lastPublished',\n      since: undefined,\n      historyEvent: event.id,\n      historyVersion: getVersionFromId(event.versionId),\n    })\n  }, [setParams, params, event])\n\n  const handleOpenDraftDocument = useCallback(() => {\n    setParams({\n      ...params,\n      rev: event.versionRevisionId,\n      preserveRev: 'true',\n      since: undefined,\n    })\n    setTimeout(() => {\n      // A bug is generated when we change the perspective and the params at the same time\n      // Resetting the params to the value it had before, because the paneRouter uses the previous value\n      setPerspective('drafts')\n    }, 100)\n  }, [setParams, params, event.versionRevisionId, setPerspective])\n\n  const VersionBadge = ({children}: {children: React.ReactNode}) => {\n    return (\n      <VersionInlineBadge $tone={event.release ? getReleaseTone(event.release) : undefined}>\n        {children}\n      </VersionInlineBadge>\n    )\n  }\n  return (\n    <MenuButton\n      id={`timeline-item-menu-button-${event.versionId}`}\n      button={\n        <ContextMenuButton\n          aria-label={t('timeline-item.menu-button.aria-label')}\n          tooltipProps={{content: t('timeline-item.menu-button.tooltip')}}\n        />\n      }\n      menu={\n        <Menu padding={1}>\n          {event.release ? (\n            <>\n              <IntentLink\n                intent={RELEASES_INTENT}\n                params={{id: event.release?.name}}\n                style={{textDecoration: 'none'}}\n              >\n                <MenuItem padding={3}>\n                  <Flex align={'center'}>\n                    <Text size={1} style={{textDecoration: 'none'}}>\n                      <Translate\n                        components={{\n                          VersionBadge: ({children}) => <VersionBadge>{children} </VersionBadge>,\n                        }}\n                        i18nKey=\"events.open.release\"\n                        values={{\n                          releaseTitle: event.release.metadata.title,\n                        }}\n                        t={t}\n                      />\n                    </Text>\n                  </Flex>\n                </MenuItem>\n              </IntentLink>\n              <MenuItem onClick={handleOpenReleaseDocument}>\n                <Flex align={'center'}>\n                  <Text size={1}>\n                    <Translate\n                      components={{\n                        VersionBadge: ({children}) => <VersionBadge>{children} </VersionBadge>,\n                      }}\n                      i18nKey=\"events.inspect.release\"\n                      values={{\n                        releaseTitle: event.release.metadata.title,\n                      }}\n                      t={t}\n                    />\n                  </Text>\n                </Flex>\n              </MenuItem>\n            </>\n          ) : (\n            <MenuItem onClick={handleOpenDraftDocument} disabled={!event.versionRevisionId}>\n              <Flex align={'center'}>\n                <Text size={1}>\n                  <Translate\n                    components={{\n                      VersionBadge: ({children}) => (\n                        <VersionInlineBadge $tone=\"caution\">{children}</VersionInlineBadge>\n                      ),\n                    }}\n                    i18nKey=\"events.open.draft\"\n                    t={t}\n                  />\n                </Text>\n              </Flex>\n            </MenuItem>\n          )}\n        </Menu>\n      }\n      popover={{\n        // when used inside the timeline menu we want to keep the element inside the popover, to avoid closing the popover when clicking expand.\n        portal: portalContext.elements?.[TIMELINE_MENU_PORTAL] ? TIMELINE_MENU_PORTAL : true,\n        placement: 'bottom',\n        fallbackPlacements: ['bottom-end', 'bottom-start'],\n      }}\n    />\n  )\n}\n","import {Box, Flex, Spinner, Stack, Text} from '@sanity/ui'\nimport {motion, type Variants} from 'framer-motion'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  type DocumentGroupEvent,\n  getDocumentVariantType,\n  isCreateDocumentVersionEvent,\n  isEditDocumentVersionEvent,\n  isPublishDocumentVersionEvent,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from '../expandableTimelineItemButton'\nimport {ListWrapper, Root} from '../timeline.styled'\nimport {EventTimelineItem} from './EventTimelineItem'\nimport {PublishedEventMenu} from './PublishedEventMenu'\n\ninterface TimelineProps {\n  events: DocumentGroupEvent[]\n  hasMoreEvents: boolean | null\n  selectedEventId?: string\n  onLoadMore: () => void\n  onSelect: (event: DocumentGroupEvent) => void\n  fetchEventChildren: (event: DocumentGroupEvent) => Promise<void>\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nconst TimelineItemWrapper = motion.create(Box)\nconst CHILDREN_ITEMS_VARIANTS: Variants = {\n  initial: {\n    opacity: 0,\n  },\n  animate: {\n    opacity: 1,\n  },\n  exit: {\n    opacity: 0,\n  },\n}\n\nconst ITEM_HEIGHT = 57\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const EventsTimeline = ({\n  events: allEvents,\n  hasMoreEvents,\n  selectedEventId,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n  fetchEventChildren,\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedEventId) {\n      // Find that event and if it has a parent, expand the parent.\n      const selectedEvent = allEvents.find((event) => event.id === selectedEventId)\n      if (selectedEvent && 'parentId' in selectedEvent && selectedEvent.parentId) {\n        return new Set([selectedEvent.parentId])\n      }\n    }\n    return new Set()\n  })\n  const [expandingParents, setExpandingParents] = useState<Set<string>>(new Set())\n\n  const events = useMemo(() => {\n    return allEvents.filter((event) => {\n      if (isCreateDocumentVersionEvent(event) && event.parentId) {\n        // Check if it's the last event in the list, in that case, we want to show it\n        const isLastEvent = allEvents[allEvents.length - 1].id === event.id\n        if (isLastEvent) return true\n        return expandedParents.has(event.parentId)\n      }\n      if (isEditDocumentVersionEvent(event) && event.parentId) {\n        return expandedParents.has(event.parentId)\n      }\n      return true\n    })\n  }, [expandedParents, allEvents])\n\n  const handleExpandParent = useCallback(\n    (event: DocumentGroupEvent) => async () => {\n      const parentId = event.id\n\n      let isExpanding = false\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else {\n          isExpanding = true\n          next.add(parentId)\n        }\n\n        return next\n      })\n      if (isExpanding) {\n        setExpandingParents((prev) => {\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n        await fetchEventChildren(event)\n        setExpandingParents((prev) => {\n          const next = new Set(prev)\n          next.delete(parentId)\n          return next\n        })\n      }\n    },\n    [fetchEventChildren, setExpandingParents],\n  )\n\n  const handleSelectChunk = useCallback(\n    (event: DocumentGroupEvent) => {\n      onSelect(event)\n    },\n    [onSelect],\n  )\n\n  const renderOptionsMenu = useCallback(\n    (event: DocumentGroupEvent) => {\n      const documentVariantType = getDocumentVariantType(event.documentId)\n      if (isPublishDocumentVersionEvent(event) && documentVariantType === 'published') {\n        return <PublishedEventMenu event={event} />\n      }\n      if (\n        isPublishDocumentVersionEvent(event) &&\n        documentVariantType === 'draft' &&\n        event.creationEvent\n      ) {\n        return (\n          <ExpandableTimelineItemButton\n            isExpanded={expandedParents.has(event.id)}\n            onExpand={handleExpandParent(event)}\n          />\n        )\n      }\n      return null\n    },\n    [expandedParents, handleExpandParent],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<DocumentGroupEvent[][number]>>(\n    (event, {activeIndex}) => {\n      /**\n       * The create version event will be present while expanding (loading the edits), so we are attaching to it the loading block at the top.\n       * - publishEvent (expanding?)\n       * --- loadingBlock  ~createEvent~\n       * */\n      const showExpandingLoader =\n        isCreateDocumentVersionEvent(event) &&\n        event.parentId &&\n        expandingParents.has(event.parentId)\n\n      const isLastEvent = activeIndex === events.length - 1\n      if (showExpandingLoader) {\n        return (\n          <TimelineItemWrapper\n            animate={{opacity: 1}}\n            initial={{opacity: 0}}\n            transition={{duration: 0.2, delay: 0.2}}\n          >\n            {/* We need this item to match the same height as the rest of the list items, which is 57px */}\n            <Flex align=\"center\" justify=\"center\" style={{height: ITEM_HEIGHT}}>\n              <Spinner />\n            </Flex>\n          </TimelineItemWrapper>\n        )\n      }\n      return (\n        <TimelineItemWrapper\n          paddingBottom={1}\n          paddingRight={1}\n          key={event.timestamp}\n          animate=\"animate\"\n          exit=\"exit\"\n          initial=\"initial\"\n          variants={'parentId' in event ? CHILDREN_ITEMS_VARIANTS : undefined}\n          paddingLeft={\n            (isEditDocumentVersionEvent(event) || isCreateDocumentVersionEvent(event)) &&\n            event.parentId &&\n            !isLastEvent\n              ? 4\n              : 1\n          }\n        >\n          <EventTimelineItem\n            event={event}\n            isSelected={event.id === selectedEventId}\n            onSelect={handleSelectChunk}\n            optionsMenu={renderOptionsMenu(event)}\n          />\n\n          {isLastEvent && hasMoreEvents && <LoadingBlock />}\n        </TimelineItemWrapper>\n      )\n    },\n    [\n      expandingParents,\n      selectedEventId,\n      handleSelectChunk,\n      renderOptionsMenu,\n      events.length,\n      hasMoreEvents,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n  const selectedIndex = events.findIndex((event) => event.id === selectedEventId)\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {events.length > 0 ? (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={ITEM_HEIGHT}\n            items={events}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      ) : (\n        <Stack padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </Stack>\n      )}\n    </Root>\n  )\n}\n\nEventsTimeline.displayName = 'EventsTimeline'\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentGroupEvent,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  TIMELINE_ITEM_I18N_KEY_MAPPING,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../../ui-components'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {TimelineError} from '../TimelineError'\nimport {EventsTimeline} from './EventsTimeline'\n\ninterface TimelineMenuProps {\n  event: DocumentGroupEvent | null\n  events: DocumentGroupEvent[]\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nconst formatParams = {\n  timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n}\n\nexport function EventsTimelineMenu({event, events, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n  const toast = useToast()\n  const {\n    nextCursor,\n    loading,\n    error: eventsError,\n    findRangeForRevision,\n    findRangeForSince,\n    loadMoreEvents,\n    expandEvent,\n  } = useEvents()\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleGlobalKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (open && (e.key === 'Escape' || e.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revEvent: DocumentGroupEvent) => {\n      try {\n        if (\n          isDeleteDocumentVersionEvent(revEvent) ||\n          isDeleteDocumentGroupEvent(revEvent) ||\n          isUnpublishDocumentEvent(revEvent) ||\n          isScheduleDocumentVersionEvent(revEvent) ||\n          isUnscheduleDocumentVersionEvent(revEvent)\n        ) {\n          console.error('Event is not selectable')\n          return\n        }\n        const [since, rev] = findRangeForRevision(revEvent?.id)\n        setTimelineRange(since, rev)\n        handleClose()\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [t, toast, setTimelineRange, findRangeForRevision, handleClose],\n  )\n\n  const selectSince = useCallback(\n    (sinceEvent: DocumentGroupEvent) => {\n      try {\n        const [since, rev] = findRangeForSince(sinceEvent.id)\n        setTimelineRange(since, rev)\n        handleClose()\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [findRangeForSince, setTimelineRange, toast, t, handleClose],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading && nextCursor) {\n      loadMoreEvents()\n    }\n  }, [loading, loadMoreEvents, nextCursor])\n\n  const content = useMemo(() => {\n    if (eventsError) return <TimelineError />\n\n    return (\n      <EventsTimeline\n        events={events}\n        fetchEventChildren={expandEvent}\n        hasMoreEvents={Boolean(nextCursor)}\n        selectedEventId={event?.id}\n        onLoadMore={handleLoadMore}\n        onSelect={mode === 'rev' ? selectRev : selectSince}\n      />\n    )\n  }, [\n    eventsError,\n    mode,\n    expandEvent,\n    events,\n    nextCursor,\n    event?.id,\n    handleLoadMore,\n    selectSince,\n    selectRev,\n  ])\n\n  const revLabel = event\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[event.type], {\n        context: 'timestamp',\n        timestamp: new Date(event.timestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  // eslint-disable-next-line no-nested-ternary\n  const sinceLabel = event\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[event.type], {\n        context: 'timestamp',\n        timestamp: new Date(event.timestamp),\n        formatParams,\n      })\n    : events.length > 0\n      ? t('timeline.since-version-missing')\n      : t('timeline.no-previous-events')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={loading || !events.length}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={loading ? t('timeline.loading-history') : buttonLabel}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {BoundaryElementProvider, Box, Card, Flex, Spinner, Text} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {type ReactElement, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  ChangesError,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {EventsTimelineMenu} from '../../timeline/events/EventsTimelineMenu'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nconst SpinnerContainer = styled(Flex)`\n  width: 100%;\n  position: absolute;\n  bottom: -4px;\n`\n\nconst DIFF_INITIAL_VALUE = {\n  diff: null,\n  loading: true,\n}\nexport function EventsInspector({showChanges}: {showChanges: boolean}): ReactElement {\n  const {documentId, schemaType, timelineError, value, formState} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const {events, revision, sinceRevision, getChangesList} = useEvents()\n\n  const isComparingCurrent = !revision?.revisionId\n  const changesList$ = useMemo(() => getChangesList(), [getChangesList])\n  const {diff, loading: diffLoading} = useObservable(changesList$, DIFF_INITIAL_VALUE)\n\n  const {t} = useTranslation('studio')\n\n  const documentContext: DocumentChangeContextInstance = useMemo(() => {\n    return {\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent: isComparingCurrent && !formState?.readOnly,\n      value,\n      showFromValue: true,\n    }\n  }, [diff, documentId, isComparingCurrent, formState?.readOnly, schemaType, value])\n\n  const [sinceEvent, toEvent] = useMemo(() => {\n    if (!events) return [null, null]\n    return [\n      events.find((e) => e.id === sinceRevision?.revisionId) || null,\n      events.find((e) => e.id === revision?.revisionId) || events[0],\n    ]\n  }, [events, revision?.revisionId, sinceRevision?.revisionId])\n\n  const sinceEvents = useMemo(() => {\n    // The sinceEvents need to account the toEvent showing only events that are older than the toEvent\n    if (!toEvent) return events.slice(1)\n    return events.slice(events.indexOf(toEvent) + 1).map((event) => {\n      // If the to event has a parent id, we need to remove the parent id from the since events or they won't be rendered, as they have no parent to expand.\n      if ('parentId' in toEvent && 'parentId' in event && event.parentId === toEvent.parentId) {\n        return {...event, parentId: undefined}\n      }\n      return event\n    })\n  }, [events, toEvent])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3} style={{position: 'relative'}}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {t('changes.inspector.from-label')}\n          </Text>\n          <EventsTimelineMenu\n            event={sinceEvent || null}\n            events={sinceEvents}\n            mode=\"since\"\n            placement=\"bottom-start\"\n          />\n          <Text size={1} muted>\n            {t('changes.inspector.to-label')}\n          </Text>\n          <EventsTimelineMenu\n            event={toEvent || null}\n            events={events}\n            mode=\"rev\"\n            placement=\"bottom-end\"\n          />\n        </Grid>\n        {diffLoading && (\n          <motion.div\n            animate={{opacity: 1}}\n            initial={{opacity: 0}}\n            transition={{delay: 0.2, duration: 0.2}}\n          >\n            <SpinnerContainer justify=\"center\" align=\"center\" gap={2}>\n              <Text muted size={0}>\n                {t('changes.loading-changes')}\n              </Text>\n              <Spinner size={0} />\n            </SpinnerContainer>\n          </motion.div>\n        )}\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={revision?.loading || sinceRevision?.loading || false}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <ChangesError />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!documentContext.rootDiff) {\n    return (\n      <motion.div\n        animate={{opacity: 1}}\n        initial={{opacity: 0}}\n        transition={{delay: 0.2, duration: 0.2}}\n      >\n        <NoChanges />\n      </motion.div>\n    )\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={documentContext.rootDiff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type DocumentGroupEvent,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  LoadingBlock,\n  ScrollContainer,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\nimport {styled} from 'styled-components'\n\nimport {EventsTimeline} from '../../timeline/events/EventsTimeline'\nimport {TimelineError} from '../../timeline/TimelineError'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function EventsSelector({showList}: {showList: boolean}) {\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n  const {setTimelineRange} = useDocumentPane()\n  const getScrollerRef = useCallback(\n    (el: HTMLDivElement | null) => {\n      if (!listHeight && el) {\n        /**\n         * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n         * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n         * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n         */\n        setListHeight(el.clientHeight ? el.clientHeight - 1 : 0)\n        setScrollRef(el)\n      }\n    },\n    [listHeight],\n  )\n  const {\n    events,\n    nextCursor,\n    loading,\n    error,\n    revision,\n    loadMoreEvents,\n    findRangeForRevision,\n    expandEvent,\n  } = useEvents()\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n\n  const selectRev = useCallback(\n    (event: DocumentGroupEvent) => {\n      try {\n        if (\n          isDeleteDocumentVersionEvent(event) ||\n          isDeleteDocumentGroupEvent(event) ||\n          isUnpublishDocumentEvent(event) ||\n          isScheduleDocumentVersionEvent(event) ||\n          isUnscheduleDocumentVersionEvent(event)\n        ) {\n          console.error('Event is not selectable')\n          return\n        }\n        const [since, rev] = findRangeForRevision(event.id)\n        setTimelineRange(since, rev)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [t, toast, setTimelineRange, findRangeForRevision],\n  )\n\n  const initialLoad = loading && !events.length\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {error ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList &&\n              !initialLoad ? (\n                <EventsTimeline\n                  events={events}\n                  fetchEventChildren={expandEvent}\n                  hasMoreEvents={Boolean(nextCursor)}\n                  // If we have a revision, we select it, otherwise we select the first event\n                  selectedEventId={revision?.revisionId || events[0]?.id}\n                  onLoadMore={loadMoreEvents}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n              {loading && <LoadingBlock />}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type Chunk,\n  ScrollContainer,\n  usePerspective,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineRange, timelineStore} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    if (!el?.clientHeight) return\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el.clientHeight - 1)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForRev(revChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore?.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError || selectedReleaseId ? (\n          <TimelineError versionError={Boolean(selectedReleaseId)} />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useSource, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {EventsInspector} from './EventsInspector'\nimport {EventsSelector} from './EventsSelector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const source = useSource()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n      // Reset the since when changing the tab, as it's not relevant for the history tab\n      since: tab === 'history' ? undefined : params?.since,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        {source.beta?.eventsAPI?.documents ? (\n          <EventsSelector showList={paneRouterTab === 'history'} />\n        ) : (\n          <HistorySelector showList={paneRouterTab === 'history'} />\n        )}\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        {source.beta?.eventsAPI?.documents ? (\n          <>\n            {paneRouterTab === 'review' ? (\n              <EventsInspector showChanges={paneRouterTab === 'review'} />\n            ) : null}\n          </>\n        ) : (\n          <ChangesInspector showChanges={paneRouterTab === 'review'} />\n        )}\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {\n      ...params,\n      since: undefined,\n      rev: undefined,\n      changesInspectorTab: undefined,\n      historyVersion: undefined,\n    },\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n  const Icon = MARKER_ICON[marker.level]\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>\n                <Icon />\n              </Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  usePerspective,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {selectedReleaseId} = usePerspective()\n  const {validation: validationMarkers} = useValidationStatus(\n    documentId,\n    documentType,\n    selectedReleaseId,\n  )\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n        __internalApplicationType: 'sanity/structure',\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): React.JSX.Element {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","color","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Symbol","for","t4","t5","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","data","loading","useActiveReleases","releasesIds","useReleasesIds","perspectiveStack","selectedPerspectiveName","usePerspective","documentPreviewStore","_id","getPreviewStateObservable","ids","stack","previewStateObservable","draft","isLoading","published","version","versions","previewIsLoading","useObservable","status","tooltip","t6","getPreviewValueWithFallback","perspective","t7","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","t14","t15","t16","Card","map","item_0","borderTop","undefined","documentCount","minWidth","filter","_temp","t17","index","projectId","datasetName","CopyIcon","content","navigator","clipboard","writeText","then","push","catch","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","useLayoutEffect","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","toLowerCaseNoSpaces","str","toLocaleLowerCase","replaceAll","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","child","childIndex","key","child_0","childIndex_0","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","nodeIndex","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","Text","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","searchParams","linkRef","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","selectedReleaseId","isReleaseActive","useIsReleaseActive","tCore","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","FolderIcon","preview","metaKey","preloading","setPreload","timeoutRef","startTransition","handleMouseEnter","handleMouseLeave","PreloadDocumentPane","RenderActionCollectionState","actionProps","onActionComplete","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","_DEBUG","EMPTY_PARAMS","freeze","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","setMenuItems","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","displayed","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","DocumentInspectorPanel","closeInspector","features","handleClose","Component","component","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","div","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","outline","ignoreCase","Banner","Icon","paddingY","DeletedDocumentBanners","isDeleted","isDeleting","selectedPerspective","isPublishedPerspective","isDraftPerspective","DeletedDocumentBanner","lastNonDeletedRevId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","ArchivedReleaseBanner","release","metadata","DocumentRemoveIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","log","err","response","errMessage","finally","onSubmit","fullscreen","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","WarningOutlineIcon","AddToReleaseBanner","currentRelease","LATEST","getReleaseTone","createVersion","useVersionOperations","getReleaseIdFromReleaseDocumentId","handleAddToRelease","Label","backgroundColor","borderRadius","textDecoration","fontWeight","ArchivedReleaseDocumentBanner","archivedReleases","useArchivedReleases","historyEvent","since","historyVersion","handleGoBack","r","VersionBadge","ResolvedLiveEdit","DraftLiveEditBanner","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","ScheduledReleaseBanner","formatRelativeLocalePublishDate","date","TitleContainer","Stack","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","editState","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","isLocked","transactionSyncLock","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","handleInitialValue","useEffectEvent","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","changed","focused","members","readOnly","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","createPatchChannel","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","permissions","isPermissionsLoading","parentPortal","usePortal","_portalElement","setPortalElement","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","view","activeView","portalElement","splitPanes","formViewHidden","ActiveViewComponent","historical","activeViewNode","isLiveEdit","scrollTo","inspectDialog","showInspector","isCreatingDocument","isReleaseDocument","isReleaseScheduledOrScheduling","getVersionFromId","banners","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Button","Grid","ModalDialog","footer","showCloseButton","header","Dialog","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","sideMenuItems","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","revisionId","isRestoreAction","historyActions","toLowerCase","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","TooltipContent","releaseType","intendedPublishAt","DATE_TIME_FORMAT","dateStyle","timeStyle","DocumentPerspectiveList","setPerspective","useSetPerspective","dateTimeFormat","useDateTimeFormat","releases","documentVersions","useDocumentVersions","filteredReleases","notCurrentReleases","currentReleases","inCreation","activeReleases","versionDocExists","releaseId","archivedRelease","handlePerspectiveChange","isPublishedChipDisabled","getReleaseChipState","isReleaseHistoryMatch","isPublishSelected","isPublishedId","isDraftSelected","displayedId","isVersionId","isDraftId","isDraftDisabled","format","menuReleaseId","releasesLoading","fromRelease","isVersion","releaseState","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","renderedActions","LanguageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","whiteSpace","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","getElementById","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","overflowY","FlipIcon","ChevronLeftIcon","ExpandableTimelineItemButton","stopPropagation","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","NameSkeleton","Skeleton","font","UserLine","user","useUser","collaborators","TimelineItem","chunk","isSelected","onSelect","optionsMenu","endTimestamp","timestamp","IconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","forEach","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","renderItem","activeIndex","TimelineError","versionError","Popover","TIMELINE_MENU_PORTAL","TimelineMenu","setTimelineRange","timelineError","timelineStore","open","setOpen","button","setButton","popoverRef","setPopoverRef","useTimelineSelector","realRevChunk","sinceTime","handleOpen","handleGlobalKeyDown","focus","selectRev","revChunk","sinceId","revId","findRangeForRev","selectSince","sinceChunk","findRangeForSince","handleLoadMore","loadMore","formatParams","revLabel","sinceLabel","buttonLabel","ChevronDownIcon","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","MotionButton","ButtonSkeleton","DocumentStatusButton","author","translationKey","onHistoryOpen","onHistoryClose","relativeTime","FallbackStatus","createDocumentVersion","editDocumentVersion","EventsStatus","events","useEvents","TimelineStatus","TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","setStatus","eventsEnabled","useSource","beta","eventsAPI","documents","lastUpdated","timerId","timerId_0","state_0","StatusText","RevisionStatusLine","useResizeObserver","onResize","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","handleResize","isReady","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","KeyboardShortcutResponder","actionsBoxElement","onActionStart","onKeyDown","rootRef","As","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","isInitialValueLoading","paneParams","zOffsets","getSanityCreateLinkMetadata","documentLinkedBannerContent","CreateLinkedBannerContent","startInCreateBanner","StartInCreateBanner","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","onConnectorSetFocus","portalElements","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","forcedVersion","historyStore","store","timelineReady","revisionDocument","onOlderRevision","sinceDocument","isPristine","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","isReleaseLocked","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","getDocumentVersionType","actionsPerspective","documentActionsProps","versionType","versionName","languageFilter","setFocusPath","focusPathRef","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","newSince","newRev","handleBlur","blurredPath","disableBlurRef","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","patchRef","useInsertionEffect","toMutationPatches","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentEventsPane","usePaneOptions","showingPublishedOnDraft","getVersionId","eventsStore","useEventsStore","sinceRevision","historyStoreProps","isDeleteDocumentGroupEvent","isDeleteDocumentVersionEvent","DocumentPaneWithLegacyTimelineStore","setTimelineError","onError","useTimelineStore","revTime","sinceAttributes","timelineDisplayed","_temp5","_temp6","_temp7","state_1","state_2","state_3","state_4","state_5","DocumentPaneProviderWrapper","useResetHistoryParams","isMounted","_perspective","param","preserveRev","updateHistoryParams","DocumentPane","parentSourceName","source","DocumentPaneInner","resolveNewDocumentOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","isLastItem","showSpinner","showMaxItemsMessage","limit","noDocumentsContent","mainContent","removePublishedWithDrafts","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","includeAllVersions","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","documentListIsLoading","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","ChevronRightIcon","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","addSelectedStateToMenuItems","isEqual","previous","setPrevious","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","liveEditSchemaType","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","getPaneParams","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","getIsSelectable","isUnpublishDocumentEvent","isScheduleDocumentVersionEvent","isUnscheduleDocumentVersionEvent","EventTimelineItem","cursor","PublishedEventMenu","portalContext","versionId","versionRevisionId","handleOpenReleaseDocument","handleOpenDraftDocument","RELEASES_INTENT","MenuItem","children_0","releaseTitle","children_1","fallbackPlacements","children_2","TimelineItemWrapper","CHILDREN_ITEMS_VARIANTS","animate","exit","ITEM_HEIGHT","EventsTimeline","allEvents","hasMoreEvents","selectedEventId","fetchEventChildren","selectedEvent","expandingParents","setExpandingParents","isCreateDocumentVersionEvent","isEditDocumentVersionEvent","isExpanding","renderOptionsMenu","documentVariantType","getDocumentVariantType","isPublishDocumentVersionEvent","creationEvent","showExpandingLoader","isLastEvent","EventsTimelineMenu","nextCursor","eventsError","findRangeForRevision","loadMoreEvents","expandEvent","revEvent","sinceEvent","SpinnerContainer","DIFF_INITIAL_VALUE","EventsInspector","getChangesList","changesList$","diffLoading","toEvent","sinceEvents","EventsSelector","showList","listHeight","setListHeight","getScrollerRef","initialLoad","HistorySelector","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","paneRouterTab","setPaneRouterTab","changesInspector","RestoreIcon","getPathTitles","f","itemType","_key","MARKER_ICON","InfoOutlineIcon","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","Fragment","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","__internalApplicationType","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194]}},
    {"offset": {"line": 14278, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}