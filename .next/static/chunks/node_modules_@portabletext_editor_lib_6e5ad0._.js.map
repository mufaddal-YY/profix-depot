{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"util.slice-blocks.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.is-keyed-segment.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.block-offset.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.get-block-end-point.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.get-block-start-point.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.get-text-block-text.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.is-empty-text-block.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.is-equal-selection-points.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.is-span.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.slice-blocks.ts"],"sourcesContent":["import type {KeyedSegment, PathSegment} from '@sanity/types'\n\n/**\n * @public\n */\nexport function isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {BlockOffset} from '../behaviors/behavior.types'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset,\n  direction,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint:\n    | {path: [KeyedSegment, 'children', KeyedSegment]; offset: number}\n    | undefined\n  let skippedInlineObject = false\n\n  for (const block of value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (direction === 'forward') {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (offsetLeft <= child.text.length) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: offsetLeft,\n          }\n          break\n        }\n\n        offsetLeft -= child.text.length\n\n        continue\n      }\n\n      if (!isPortableTextSpan(child)) {\n        skippedInlineObject = true\n        continue\n      }\n\n      if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n        if (skippedInlineObject) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: 0,\n          }\n        }\n        break\n      }\n\n      if (offsetLeft > child.text.length) {\n        offsetLeft -= child.text.length\n        continue\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n\n        offsetLeft -= child.text.length\n\n        if (offsetLeft !== 0) {\n          break\n        }\n      }\n    }\n  }\n\n  return selectionPoint\n}\n\n/**\n * @public\n */\nexport function spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = isKeyedSegment(selectionPoint.path[0])\n    ? selectionPoint.path[0]._key\n    : undefined\n  const spanKey = isKeyedSegment(selectionPoint.path[2])\n    ? selectionPoint.path[2]._key\n    : undefined\n\n  if (!blockKey || !spanKey) {\n    return undefined\n  }\n\n  for (const block of value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (child._key === spanKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getBlockEndPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    const lastChild = node.children[node.children.length - 1]\n\n    if (lastChild) {\n      return {\n        path: [...path, 'children', {_key: lastChild._key}],\n        offset: isPortableTextSpan(lastChild) ? lastChild.text.length : 0,\n      }\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import {\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getBlockStartPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    return {\n      path: [...path, 'children', {_key: node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\n\n/**\n * @public\n */\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport {getTextBlockText} from './util.get-text-block-text'\n\n/**\n * @public\n */\nexport function isEmptyTextBlock(block: PortableTextBlock) {\n  if (!isPortableTextTextBlock(block)) {\n    return false\n  }\n\n  const onlyText = block.children.every(isPortableTextSpan)\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n","import type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function isEqualSelectionPoints(\n  a: EditorSelectionPoint,\n  b: EditorSelectionPoint,\n) {\n  return (\n    a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path)\n  )\n}\n","import type {PortableTextChild, PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '../selectors'\n\n/**\n * @public\n */\nexport function isSpan(\n  context: Pick<EditorContext, 'schema'>,\n  child: PortableTextChild,\n): child is PortableTextSpan {\n  return child._type === context.schema.span.name\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelection} from '../selectors'\n\n/**\n * @public\n */\nexport function sliceBlocks({\n  blocks,\n  selection,\n}: {\n  blocks: Array<PortableTextBlock>\n  selection: EditorSelection\n}): Array<PortableTextBlock> {\n  const slice: Array<PortableTextBlock> = []\n\n  if (!selection) {\n    return slice\n  }\n\n  let startBlock: PortableTextBlock | undefined\n  const middleBlocks: PortableTextBlock[] = []\n  let endBlock: PortableTextBlock | undefined\n\n  const startPoint = selection.backward ? selection.focus : selection.anchor\n  const endPoint = selection.backward ? selection.anchor : selection.focus\n\n  const startBlockKey = isKeySegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeySegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n  const startChildKey = isKeySegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endChildKey = isKeySegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return slice\n  }\n\n  for (const block of blocks) {\n    if (!isPortableTextTextBlock(block)) {\n      if (block._key === startBlockKey && block._key === endBlockKey) {\n        startBlock = block\n        break\n      }\n    }\n\n    if (block._key === startBlockKey) {\n      if (!isPortableTextTextBlock(block)) {\n        startBlock = block\n        continue\n      }\n\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isPortableTextSpan(child)) {\n              const text =\n                child._key === endChildKey\n                  ? child.text.slice(startPoint.offset, endPoint.offset)\n                  : child.text.slice(startPoint.offset)\n\n              startBlock = {\n                ...block,\n                children: [\n                  {\n                    ...child,\n                    text,\n                  },\n                ],\n              }\n            } else {\n              startBlock = {\n                ...block,\n                children: [child],\n              }\n            }\n\n            if (startChildKey === endChildKey) {\n              break\n            }\n            continue\n          }\n\n          if (startBlock && isPortableTextTextBlock(startBlock)) {\n            if (\n              endChildKey &&\n              child._key === endChildKey &&\n              isPortableTextSpan(child)\n            ) {\n              startBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n            } else {\n              startBlock.children.push(child)\n            }\n\n            if (\n              block._key === endBlockKey &&\n              endChildKey &&\n              child._key === endChildKey\n            ) {\n              break\n            }\n          }\n        }\n\n        if (startBlockKey === endBlockKey) {\n          break\n        }\n\n        continue\n      }\n\n      startBlock = block\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n    }\n\n    if (block._key === endBlockKey) {\n      if (!isPortableTextTextBlock(block)) {\n        endBlock = block\n        break\n      }\n\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: [],\n        }\n\n        for (const child of block.children) {\n          if (endBlock && isPortableTextTextBlock(endBlock)) {\n            if (child._key === endChildKey && isPortableTextSpan(child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n\n              break\n            }\n\n            endBlock.children.push(child)\n\n            if (endChildKey && child._key === endChildKey) {\n              break\n            }\n          }\n        }\n\n        break\n      }\n\n      endBlock = block\n\n      break\n    }\n\n    if (startBlock) {\n      middleBlocks.push(block)\n    }\n  }\n\n  return [\n    ...(startBlock ? [startBlock] : []),\n    ...middleBlocks,\n    ...(endBlock ? [endBlock] : []),\n  ]\n}\n"],"names":["isKeyedSegment","segment","blockOffsetToSpanSelectionPoint","value","blockOffset","direction","offsetLeft","offset","selectionPoint","skippedInlineObject","block","_key","path","isPortableTextTextBlock","child","children","isPortableTextSpan","text","length","spanSelectionPointToBlockOffset","blockKey","undefined","spanKey","getBlockEndPoint","node","lastChild","getBlockStartPoint","getTextBlockText","map","join","isEmptyTextBlock","onlyText","every","blockText","isEqualSelectionPoints","a","b","JSON","stringify","isSpan","context","_type","schema","span","name","sliceBlocks","blocks","selection","slice","startBlock","middleBlocks","endBlock","startPoint","backward","focus","anchor","endPoint","startBlockKey","isKeySegment","endBlockKey","startChildKey","endChildKey","push"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8]}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"file":"util.block-offsets-to-selection.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/asserters.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/parse-blocks.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.block-offsets-to-selection.ts"],"sourcesContent":["import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import type {\n  PortableTextBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    refreshKeys: boolean\n  }\n}): PortableTextBlock | undefined {\n  return (\n    parseTextBlock({block, context, options}) ??\n    parseBlockObject({blockObject: block, context, options})\n  )\n}\n\nfunction parseBlockObject({\n  blockObject,\n  context,\n  options,\n}: {\n  blockObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(blockObject)) {\n    return undefined\n  }\n\n  if (\n    blockObject._type === context.schema.block.name ||\n    blockObject._type === 'block' ||\n    !context.schema.blockObjects.some(({name}) => name === blockObject._type)\n  ) {\n    return undefined\n  }\n\n  return {\n    ...blockObject,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof blockObject._key === 'string'\n        ? blockObject._key\n        : context.keyGenerator(),\n  }\n}\n\nexport function isTextBlock(\n  schema: EditorSchema,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return (\n    parseTextBlock({\n      block,\n      context: {schema, keyGenerator: () => ''},\n      options: {refreshKeys: false},\n    }) !== undefined\n  )\n}\n\nfunction parseTextBlock({\n  block,\n  context,\n  options,\n}: {\n  block: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return undefined\n  }\n\n  const _key = options.refreshKeys\n    ? context.keyGenerator()\n    : typeof block._key === 'string'\n      ? block._key\n      : context.keyGenerator()\n\n  const unparsedMarkDefs: Array<unknown> = Array.isArray(block.markDefs)\n    ? block.markDefs\n    : []\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef)) {\n      return []\n    }\n\n    if (typeof markDef._key !== 'string') {\n      return []\n    }\n\n    if (\n      context.schema.annotations.some(\n        (annotation) => annotation.name === markDef._type,\n      )\n    ) {\n      const _key = options.refreshKeys ? context.keyGenerator() : markDef._key\n      markDefKeyMap.set(markDef._key, _key)\n\n      return [\n        {\n          ...markDef,\n          _key,\n        },\n      ]\n    }\n\n    return []\n  })\n\n  const unparsedChildren: Array<unknown> = Array.isArray(block.children)\n    ? block.children\n    : []\n\n  const children = unparsedChildren\n    .map(\n      (child) =>\n        parseSpan({span: child, context, markDefKeyMap, options}) ??\n        parseInlineObject({inlineObject: child, context, options}),\n    )\n    .filter((child) => child !== undefined)\n\n  const parsedBlock: PortableTextTextBlock = {\n    // Spread the entire block to allow custom properties on it\n    ...block,\n    _key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs,\n  }\n\n  /**\n   * Reset text block .style if it's somehow set to an invalid type\n   */\n  if (\n    typeof parsedBlock.style !== 'string' ||\n    !context.schema.styles.find((style) => style.value === block.style)\n  ) {\n    const defaultStyle = context.schema.styles.at(0)?.value\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      delete parsedBlock.style\n    }\n  }\n\n  /**\n   * Reset text block .listItem if it's somehow set to an invalid type\n   */\n  if (\n    typeof parsedBlock.listItem !== 'string' ||\n    !context.schema.lists.find((list) => list.value === block.listItem)\n  ) {\n    delete parsedBlock.listItem\n  }\n\n  /**\n   * Reset text block .level if it's somehow set to an invalid type\n   */\n  if (typeof parsedBlock.level !== 'number') {\n    delete parsedBlock.level\n  }\n\n  return parsedBlock\n}\n\nexport function parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options,\n}: {\n  span: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  markDefKeyMap: Map<string, string>\n  options: {refreshKeys: boolean}\n}): PortableTextSpan | undefined {\n  if (!isTypedObject(span)) {\n    return undefined\n  }\n\n  // In reality, the span schema name is always 'span', but we only the check here anyway\n  if (span._type !== context.schema.span.name || span._type !== 'span') {\n    return undefined\n  }\n\n  const unparsedMarks: Array<unknown> = Array.isArray(span.marks)\n    ? span.marks\n    : []\n  const marks = unparsedMarks.flatMap((mark) => {\n    if (typeof mark !== 'string') {\n      return []\n    }\n\n    const markDefKey = markDefKeyMap.get(mark)\n\n    if (markDefKey !== undefined) {\n      return [markDefKey]\n    }\n\n    if (\n      context.schema.decorators.some((decorator) => decorator.value === mark)\n    ) {\n      return [mark]\n    }\n\n    return []\n  })\n\n  return {\n    // Spread the entire span to allow custom properties on it\n    ...span,\n    _type: 'span',\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof span._key === 'string'\n        ? span._key\n        : context.keyGenerator(),\n    text: typeof span.text === 'string' ? span.text : '',\n    marks,\n  }\n}\n\nfunction parseInlineObject({\n  inlineObject,\n  context,\n  options,\n}: {\n  inlineObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(inlineObject)) {\n    return undefined\n  }\n\n  if (\n    inlineObject._type === context.schema.span.name ||\n    inlineObject._type === 'span' ||\n    // Respect the schema definition and don't parse inline objects that are not defined\n    !context.schema.inlineObjects.some(({name}) => name === inlineObject._type)\n  ) {\n    return undefined\n  }\n\n  return {\n    // Spread the entire inline object to allow custom properties on it\n    ...inlineObject,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof inlineObject._key === 'string'\n        ? inlineObject._key\n        : context.keyGenerator(),\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {BlockOffset} from '../behaviors'\nimport type {EditorSelection} from '../selectors'\nimport {blockOffsetToSpanSelectionPoint} from './util.block-offset'\n\n/**\n * @public\n */\nexport function blockOffsetsToSelection({\n  value,\n  offsets,\n  backward,\n}: {\n  value: Array<PortableTextBlock>\n  offsets: {anchor: BlockOffset; focus: BlockOffset}\n  backward?: boolean\n}): EditorSelection {\n  const anchor = blockOffsetToSpanSelectionPoint({\n    value,\n    blockOffset: offsets.anchor,\n    direction: backward ? 'backward' : 'forward',\n  })\n  const focus = blockOffsetToSpanSelectionPoint({\n    value,\n    blockOffset: offsets.focus,\n    direction: backward ? 'forward' : 'backward',\n  })\n\n  if (!anchor || !focus) {\n    return null\n  }\n\n  return {\n    anchor,\n    focus,\n    backward,\n  }\n}\n"],"names":["isTypedObject","object","isRecord","_type","value","parseBlock","context","block","options","parseTextBlock","parseBlockObject","blockObject","schema","name","blockObjects","some","_key","refreshKeys","keyGenerator","isTextBlock","undefined","unparsedMarkDefs","Array","isArray","markDefs","markDefKeyMap","Map","flatMap","markDef","annotations","annotation","set","children","map","child","parseSpan","span","parseInlineObject","inlineObject","filter","parsedBlock","length","text","marks","style","styles","find","defaultStyle","at","listItem","lists","list","level","mark","markDefKey","get","decorators","decorator","inlineObjects","blockOffsetsToSelection","offsets","backward","anchor","blockOffsetToSpanSelectionPoint","blockOffset","direction","focus"],"mappings":"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","ignoreList":[0,1,2]}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"file":"selector.is-at-the-start-of-block.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.guards.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selectors.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-point.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-point.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-next-inline-object.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-inline-object.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-slice.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-text.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-collapsed.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-expanded.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-caret-word-selection.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-end-of-block.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-start-of-block.ts"],"sourcesContent":["import {\n  isPortableTextListBlock,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\n\n/**\n * @alpha\n */\nexport type BehaviorGuards = ReturnType<typeof createGuards>\n\nexport function createGuards({schema}: {schema: EditorSchema}) {\n  function isListBlock(block: unknown): block is PortableTextListBlock {\n    return isPortableTextListBlock(block) && block._type === schema.block.name\n  }\n\n  function isTextBlock(block: unknown): block is PortableTextTextBlock {\n    return isPortableTextTextBlock(block) && block._type === schema.block.name\n  }\n\n  return {isListBlock, isTextBlock}\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextListBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const guards = createGuards(context)\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && guards.isListBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  const focusBlock = getFocusTextBlock({context})\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[2])\n      ? context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = ({context}) => {\n  const focusChild = getFocusChild({context})\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const node = context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const node = context.value[context.value.length - 1]\n    ? context.value[context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: [KeyedSegment]}>\n> = ({context}) => {\n  if (!context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: [KeyedSegment]}> =\n    []\n  const startKey = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  for (const block of context.value) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock({context})\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock({context})\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  return context.selection.backward\n    ? context.selection.anchor\n    : context.selection.focus\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectionStartPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  return context.selection.backward\n    ? context.selection.focus\n    : context.selection.anchor\n}\n","import {\n  isKeySegment,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../utils'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  const focusTextBlock = getFocusTextBlock({context})\n  const selectionEndPoint = getSelectionEndPoint({context})\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import {\n  isKeySegment,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../utils'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getPreviousInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  const focusTextBlock = getFocusTextBlock({context})\n  const selectionStartPoint = getSelectionStartPoint({context})\n  const selectionStartPointChildKey =\n    selectionStartPoint && isKeySegment(selectionStartPoint.path[2])\n      ? selectionStartPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionStartPointChildKey) {\n    return undefined\n  }\n\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (!isSpan(context, child)) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return inlineObject\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {sliceBlocks} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedSlice: EditorSelector<Array<PortableTextBlock>> = ({\n  context,\n}) => {\n  return sliceBlocks({blocks: context.value, selection: context.selection})\n}\n","import {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSlice} from './selector.get-selected-slice'\n\n/**\n * @public\n */\nexport const getSelectionText: EditorSelector<string> = ({context}) => {\n  const selectedSlice = getSelectedSlice({context})\n\n  return selectedSlice.reduce((text, block) => {\n    if (!isPortableTextTextBlock(block)) {\n      return text\n    }\n\n    return (\n      text +\n      block.children.reduce((text, child) => {\n        if (isPortableTextSpan(child)) {\n          return text + child.text\n        }\n\n        return text\n      }, '')\n    )\n  }, '')\n}\n","import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = ({context}) => {\n  if (!context.selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(context.selection.anchor.path) ===\n      JSON.stringify(context.selection.focus.path) &&\n    context.selection?.anchor.offset === context.selection?.focus.offset\n  )\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const isSelectionExpanded: EditorSelector<boolean> = ({context}) => {\n  return !isSelectionCollapsed({context})\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  getBlockEndPoint,\n  getBlockStartPoint,\n  spanSelectionPointToBlockOffset,\n  type BlockOffset,\n} from '../utils'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = ({\n  context,\n}) => {\n  if (!context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed({context})) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock({context})\n  const selectionStartPoint = getSelectionStartPoint({context})\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        value: context.value,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject({context})\n  const blockStartPoint = getBlockStartPoint(focusTextBlock)\n  const textBefore = getSelectionText({\n    context: {\n      ...context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject({context})\n  const blockEndPoint = getBlockEndPoint(focusTextBlock)\n  const textAfter = getSelectionText({\n    context: {\n      ...context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    value: context.value,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    value: context.value,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    context: {\n      ...context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return ({context}) => {\n    if (!context.selection || !isSelectionCollapsed({context})) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint(block)\n\n    return utils.isEqualSelectionPoints(context.selection.focus, blockEndPoint)\n  }\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return ({context}) => {\n    if (!context.selection || !isSelectionCollapsed({context})) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint(block)\n\n    return utils.isEqualSelectionPoints(\n      context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n"],"names":["createGuards","schema","isListBlock","block","isPortableTextListBlock","_type","name","isTextBlock","isPortableTextTextBlock","getFocusBlock","context","key","selection","isKeySegment","focus","path","_key","undefined","node","value","find","getFocusListBlock","guards","focusBlock","getFocusTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isPortableTextSpan","getFirstBlock","getLastBlock","length","getSelectedBlocks","selectedBlocks","startKey","backward","anchor","endKey","push","getSelectionStartBlock","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","getSelectionEndPoint","getSelectionStartPoint","getNextInlineObject","focusTextBlock","selectionEndPoint","selectionEndPointChildKey","endPointChildFound","inlineObject","child","isSpan","getPreviousInlineObject","selectionStartPoint","selectionStartPointChildKey","getSelectedSlice","sliceBlocks","blocks","getSelectionText","reduce","text","isSelectionCollapsed","JSON","stringify","offset","isSelectionExpanded","getCaretWordSelection","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","blockStartPoint","getBlockStartPoint","textDirectlyBefore","split","at","nextInlineObject","blockEndPoint","getBlockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","caretWordEndSelectionPoint","caretWordSelection","isAtTheEndOfBlock","utils","isAtTheStartOfBlock"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12]}},
    {"offset": {"line": 756, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 762, "column": 0}, "map": {"version":3,"file":"selector.is-active-style.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-spans.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-active-list-item.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-active-style.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-trimmed-selection.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.is-active-annotation.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.is-active-decorator.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.is-active-list-item.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.is-active-style.ts"],"sourcesContent":["import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextSpan,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }>\n> = ({context}) => {\n  if (!context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }> = []\n\n  const startPoint = context.selection.backward\n    ? context.selection.focus\n    : context.selection.anchor\n  const endPoint = context.selection.backward\n    ? context.selection.anchor\n    : context.selection.focus\n\n  const startBlockKey = isKeySegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeySegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startSpanKey = isKeySegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endSpanKey = isKeySegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  for (const block of context.value) {\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (selectedSpans.length > 0) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const guards = createGuards(context)\n  const selectedBlocks = getSelectedBlocks({context}).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter(guards.isTextBlock)\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = ({\n  context,\n}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const guards = createGuards(context)\n  const selectedBlocks = getSelectedBlocks({context}).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter(guards.isTextBlock)\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextSpan,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {isEmptyTextBlock, isKeyedSegment} from '../utils'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = ({\n  context,\n}) => {\n  if (!context.selection) {\n    return context.selection\n  }\n\n  const startPoint = getSelectionStartPoint({context})\n  const endPoint = getSelectionEndPoint({context})\n\n  if (!startPoint || !endPoint) {\n    return context.selection\n  }\n\n  const startBlockKey = isKeyedSegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : null\n  const startChildKey = isKeyedSegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : null\n  const endBlockKey = isKeyedSegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : null\n  const endChildKey = isKeyedSegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : null\n\n  if (!startBlockKey || !endBlockKey) {\n    return context.selection\n  }\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (isPortableTextTextBlock(block) && isEmptyTextBlock(block)) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    if (block._key === endBlockKey && isEmptyTextBlock(block)) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isPortableTextSpan(child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isPortableTextSpan(child) && block.children.length === 1\n\n        if (\n          (isPortableTextSpan(child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isPortableTextSpan(child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isPortableTextSpan(child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      context: {\n        ...context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      context: {\n        ...context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (focusTextBlock && !isEmptyTextBlock(focusTextBlock.node)) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\nimport {getFocusSpan, getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const focusSpan = getFocusSpan(snapshot)\n\n    const selectedSpans = isSelectionExpanded(snapshot)\n      ? getSelectedSpans(snapshot)\n      : focusSpan\n        ? [focusSpan]\n        : []\n\n    if (selectedSpans.length === 0) {\n      return false\n    }\n\n    if (\n      selectedSpans.some(\n        (span) => !span.node.marks || span.node.marks?.length === 0,\n      )\n    ) {\n      return false\n    }\n\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isPortableTextTextBlock(block.node) ? (block.node.markDefs ?? []) : [],\n    )\n\n    return selectedSpans.every((span) => {\n      const spanMarkDefs =\n        span.node.marks?.flatMap((mark) => {\n          const markDef = selectionMarkDefs.find(\n            (markDef) => markDef._key === mark,\n          )\n\n          return markDef ? [markDef._type] : []\n        }) ?? []\n\n      return spanMarkDefs.includes(annotation)\n    })\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    return snapshot.context.activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n"],"names":["getSelectedSpans","context","selection","selectedSpans","startPoint","backward","focus","anchor","endPoint","startBlockKey","isKeySegment","path","_key","undefined","endBlockKey","startSpanKey","endSpanKey","block","value","isPortableTextTextBlock","child","children","isPortableTextSpan","offset","text","length","push","node","getActiveListItem","guards","createGuards","selectedTextBlocks","getSelectedBlocks","map","filter","isTextBlock","firstTextBlock","at","firstListItem","listItem","every","getActiveStyle","firstStyle","style","getTrimmedSelection","getSelectionStartPoint","getSelectionEndPoint","isKeyedSegment","startChildKey","endChildKey","startBlockFound","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","span","lonelySpan","trimmedSelection","isSelectionCollapsed","focusTextBlock","getFocusTextBlock","isActiveAnnotation","annotation","snapshot","selectedBlocks","focusSpan","getFocusSpan","isSelectionExpanded","some","marks","selectionMarkDefs","flatMap","markDefs","mark","markDef","find","_type","includes","isActiveDecorator","decorator","activeDecorators","isActiveListItem","isActiveStyle"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7]}},
    {"offset": {"line": 1019, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1025, "column": 0}, "map": {"version":3,"file":"behavior.core.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.types.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.core.annotations.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/is-hotkey.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.core.insert-break.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts"],"sourcesContent":["import type {\n  KeyedSegment,\n  PortableTextBlock,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'\nimport type {ConverterEvent} from '../converters/converter.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: 'annotation.add'\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'annotation.remove'\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: 'annotation.toggle'\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'block.set'\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: 'block.unset'\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: 'blur'\n    }\n  | {\n      type: 'data transfer.set'\n      data: string\n      dataTransfer: DataTransfer\n      mimeType: MIMEType\n    }\n  | {\n      type: 'decorator.add'\n      decorator: string\n      offsets?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: 'decorator.remove'\n      decorator: string\n    }\n  | {\n      type: 'decorator.toggle'\n      decorator: string\n    }\n  | {\n      type: 'delete'\n      selection: NonNullable<EditorSelection>\n    }\n  | {\n      type: 'delete.backward'\n      unit: TextUnit\n    }\n  | {\n      type: 'delete.block'\n      blockPath: [KeyedSegment]\n    }\n  | {\n      type: 'delete.forward'\n      unit: TextUnit\n    }\n  | {\n      type: 'delete.text'\n      anchor: BlockOffset\n      focus: BlockOffset\n    }\n  | {\n      type: 'focus'\n    }\n  | {\n      type: 'history.redo'\n    }\n  | {\n      type: 'history.undo'\n    }\n  | {\n      type: 'insert.blocks'\n      blocks: Array<PortableTextBlock>\n    }\n  | {\n      type: 'insert.block object'\n      placement: 'auto' | 'after' | 'before'\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'insert.inline object'\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'insert.break'\n    }\n  | {\n      type: 'insert.soft break'\n    }\n  | {\n      type: 'insert.block'\n      block: PortableTextBlock\n      placement: 'auto' | 'after' | 'before'\n    }\n  | {\n      type: 'insert.span'\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: 'insert.text'\n      text: string\n      options?: TextInsertTextOptions\n    }\n  | {\n      type: 'insert.text block'\n      placement: 'auto' | 'after' | 'before'\n      textBlock?: {\n        children?: PortableTextTextBlock['children']\n      }\n    }\n  | {\n      type: 'list item.add'\n      listItem: string\n    }\n  | {\n      type: 'list item.remove'\n      listItem: string\n    }\n  | {\n      type: 'list item.toggle'\n      listItem: string\n    }\n  | {\n      type: 'move.block'\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: 'move.block down'\n      at: [KeyedSegment]\n    }\n  | {\n      type: 'move.block up'\n      at: [KeyedSegment]\n    }\n  | {\n      type: 'select'\n      selection: EditorSelection\n    }\n  | {\n      type: 'select.previous block'\n    }\n  | {\n      type: 'select.next block'\n    }\n  | {\n      type: 'style.add'\n      style: string\n    }\n  | {\n      type: 'style.remove'\n      style: string\n    }\n  | {\n      type: 'style.toggle'\n      style: string\n    }\n  | (PickFromUnion<\n      ConverterEvent,\n      'type',\n      | 'deserialization.failure'\n      | 'deserialization.success'\n      | 'serialization.failure'\n      | 'serialization.success'\n    > & {dataTransfer: DataTransfer})\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | {\n      type: 'copy'\n      data: DataTransfer\n    }\n  | {\n      type: 'deserialize'\n      dataTransfer: DataTransfer\n    }\n  | {\n      type: 'key.down'\n      keyboardEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: 'key.up'\n      keyboardEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: 'paste'\n      data: DataTransfer\n    }\n  | {\n      type: 'serialize'\n      originEvent: 'copy' | 'cut' | 'drag' | 'unknown'\n      dataTransfer: DataTransfer\n    }\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends `custom.${TType}` = `custom.${TType}`,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**\n * @beta\n */\nexport type BehaviorActionIntend =\n  | SyntheticBehaviorEvent\n  | {\n      type: 'raise'\n      event: SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'noop'\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n\n/**\n * @beta\n */\nexport type BehaviorAction = OmitFromUnion<\n  BehaviorActionIntend,\n  'type',\n  'raise'\n> & {\n  editor: PortableTextSlateEditor\n}\n\n/**\n * @beta\n */\nexport function raise(\n  event: SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorActionIntend, 'type', 'raise'> {\n  return {type: 'raise', event}\n}\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\n/**\n * @beta\n */\nexport type Behavior<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends BehaviorEvent = PickFromUnion<\n    BehaviorEvent,\n    'type',\n    TBehaviorEventType\n  >,\n> = {\n  /**\n   * The internal editor event that triggers this behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>\n  /**\n   * Array of behavior action sets.\n   */\n  actions: Array<BehaviorActionIntendSet<TBehaviorEvent, TGuardResponse>>\n}\n\n/**\n * @beta\n */\nexport type BehaviorGuard<TBehaviorEvent, TGuardResponse> = ({\n  context,\n  event,\n}: {\n  context: EditorContext\n  event: TBehaviorEvent\n}) => TGuardResponse | false\n\n/**\n * @beta\n */\nexport type BehaviorActionIntendSet<TBehaviorEvent, TGuardResponse> = (\n  {\n    context,\n    event,\n  }: {\n    context: EditorContext\n    event: TBehaviorEvent\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorActionIntend>\n\n/**\n * @beta\n *\n * @example\n *\n * ```tsx\n * const noLowerCaseA = defineBehavior({\n *   on: 'insert.text',\n *   guard: ({event, context}) => event.text === 'a',\n *   actions: [({event, context}) => [{type: 'insert.text', text: 'A'}]],\n * })\n * ```\n *\n *\n *\n *\n *\n */\nexport function defineBehavior<\n  TPayload extends Record<string, unknown>,\n  TBehaviorEventType extends\n    BehaviorEvent['type'] = CustomBehaviorEvent['type'],\n  TGuardResponse = true,\n>(\n  behavior: Behavior<\n    TBehaviorEventType,\n    TGuardResponse,\n    TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n  >,\n): Behavior\nexport function defineBehavior<\n  TPayload extends never = never,\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends\n    BehaviorEvent = TBehaviorEventType extends `custom.${infer TType}`\n    ? CustomBehaviorEvent<TPayload, TType>\n    : PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>,\n>(\n  behavior: Behavior<TBehaviorEventType, TGuardResponse, TBehaviorEvent>,\n): Behavior {\n  return behavior as unknown as Behavior\n}\n\n/**\n * @beta\n */\nexport type BlockOffset = {\n  path: [KeyedSegment]\n  offset: number\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior, raise} from './behavior.types'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({context}) => {\n    if (!selectors.isSelectionCollapsed({context})) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection({context})\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        context: {\n          ...context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', selection: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport {isHotkey} from '../internal-utils/is-hotkey'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {defineBehavior, raise} from './behavior.types'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.keyboardEvent)\n    const focusBlockObject = selectors.getFocusBlockObject({context})\n    const nextBlock = selectors.getNextBlock({context})\n\n    return isArrowDown && focusBlockObject && !nextBlock\n  },\n  actions: [() => [raise({type: 'insert.text block', placement: 'after'})]],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.keyboardEvent)\n    const focusBlockObject = selectors.getFocusBlockObject({context})\n    const previousBlock = selectors.getPreviousBlock({context})\n\n    return isArrowUp && focusBlockObject && !previousBlock\n  },\n  actions: [\n    () => [\n      raise({type: 'insert.text block', placement: 'before'}),\n      raise({type: 'select.previous block'}),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({context}) => {\n    const focusBlockObject = selectors.getFocusBlockObject({context})\n    const collapsedSelection = selectors.isSelectionCollapsed({context})\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [() => [raise({type: 'insert.text block', placement: 'after'})]],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const previousBlock = selectors.getPreviousBlock({context})\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        blockPath: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        selection: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({context}) => {\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const nextBlock = selectors.getNextBlock({context})\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        blockPath: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        selection: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {defineBehavior, raise} from './behavior.types'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'key.down',\n    guard: ({context, event}) =>\n      isHotkey('mod+b', event.keyboardEvent) &&\n      context.schema.decorators.some(\n        (decorator) => decorator.value === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'key.down',\n    guard: ({context, event}) =>\n      isHotkey('mod+i', event.keyboardEvent) &&\n      context.schema.decorators.some((decorator) => decorator.value === 'em'),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'key.down',\n    guard: ({context, event}) =>\n      isHotkey('mod+u', event.keyboardEvent) &&\n      context.schema.decorators.some(\n        (decorator) => decorator.value === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'key.down',\n    guard: ({context, event}) =>\n      isHotkey(\"mod+'\", event.keyboardEvent) &&\n      context.schema.decorators.some((decorator) => decorator.value === 'code'),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior, raise} from './behavior.types'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({context}) => {\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n\n    if (!context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock = selectors.isAtTheEndOfBlock(focusTextBlock)({\n      context,\n    })\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({context}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: context.schema.block.name,\n          _key: context.keyGenerator(),\n          children: [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: context.schema.styles[0]?.value,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({context}) => {\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n\n    if (!context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan({context})\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        context.schema.decorators.some(\n          (decorator) => decorator.value === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !context.schema.decorators.some(\n            (decorator) => decorator.value === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock = selectors.isAtTheStartOfBlock(focusTextBlock)({\n      context,\n    })\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {context},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          children: [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: context.schema.styles[0]?.value,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n}\n","import {createGuards} from '../behavior-actions/behavior.guards'\nimport {isHotkey} from '../internal-utils/is-hotkey'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {defineBehavior, raise} from './behavior.types'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const focusSpan = selectors.getFocusSpan({context})\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const focusSpan = selectors.getFocusSpan({context})\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({context}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const focusListBlock = selectors.getFocusListBlock({context})\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isTab = isHotkey('Tab', event.keyboardEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks({context})\n    const guards = createGuards(context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.keyboardEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks({context})\n    const guards = createGuards(context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\n/**\n * @beta\n */\nexport const coreBehaviors = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n]\n"],"names":["isCustomBehaviorEvent","event","type","startsWith","raise","defineBehavior","behavior","addAnnotationOnCollapsedSelection","on","guard","context","selectors","caretWordSelection","selection","actions","annotation","coreAnnotationBehaviors","IS_MAC","window","test","navigator","userAgent","modifiers","alt","control","meta","shift","aliases","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","left","mod","opt","option","return","right","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","split","rawHotkeySegment","optional","endsWith","length","hotkeySegment","slice","keyName","toKeyName","modifier","alias","code","undefined","TypeError","key","keyCode","toKeyCode","toLowerCase","name","toUpperCase","charCodeAt","arrowDownOnLonelyBlockObject","isArrowDown","keyboardEvent","focusBlockObject","nextBlock","placement","arrowUpOnLonelyBlockObject","isArrowUp","previousBlock","breakingBlockObject","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","isEmptyTextBlock","node","isPortableTextTextBlock","_","blockPath","path","anchor","offset","focus","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","schema","decorators","some","decorator","value","emShortcut","underlineShortcut","codeShortcut","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","listItem","focusLevel","level","block","_type","_key","keyGenerator","children","span","text","marks","markDefs","style","styles","breakingAtTheStartOfTextBlock","focusSpan","focusDecorators","filter","mark","focusAnnotations","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","props","at","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedBlocks","guards","createGuards","selectedListBlocks","flatMap","isListBlock","map","selectedListBlock","Math","min","max","unindentListOnShiftTab","coreListBehaviors","coreBehaviors"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7]}},
    {"offset": {"line": 1618, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1624, "column": 0}, "map": {"version":3,"file":"plugin.event-listener.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/create-editor-schema.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/define-schema.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/debug.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/paths.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/ranges.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/values.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/weakMaps.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/schema.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/mutation-machine.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/validateValue.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/withChanges.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/withoutPatching.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.2.0/node_modules/%40sanity/diff-match-patch/dist/index.js","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/withUndoRedo.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/key-generator.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/with-applying-behavior-actions.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/sync-machine.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/components/Synchronizer.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/converters/converter.json.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/converters/converter.portable-text.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/converters/converter.text-html.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/converters/converter.text-plain.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/converters/converters.core.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/operationToPatches.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-break.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.list-item.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.style.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/node_modules/.pnpm/%40portabletext%2Btoolkit%402.0.17/node_modules/%40portabletext/toolkit/dist/index.js","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.decorator.add.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/sibling-utils.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action-utils.insert-block.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.block.set.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.block.unset.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.data-transfer-set.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.text.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-block-object.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-blocks.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-inline-object.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-span.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert.block.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behavior-actions/behavior.actions.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/applyPatch.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextBlockStyle.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextSelections.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.default.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/key-is.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.foundational.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/get-active-decorators.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/editor-snapshot.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/get-value.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/editor-selector.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/plugins/plugin.event-listener.tsx"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @public\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title:\n          blockObject.name === 'image' && blockObject.title === undefined\n            ? 'Image'\n            : blockObject.title,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {assign, emit, setup} from 'xstate'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingPatches: Array<Patch>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as {type: 'patch'; patch: Patch},\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutation': emit(({context}) => ({\n      type: 'mutation' as const,\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(\n        context.slateEditor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(context.slateEditor),\n      ),\n    })),\n    'clear pending patches': assign({\n      pendingPatches: [],\n    }),\n    'defer patch': assign({\n      pendingPatches: ({context, event}) => [\n        ...context.pendingPatches,\n        event.patch,\n      ],\n    }),\n  },\n  guards: {\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      on: {\n        patch: {\n          actions: ['defer patch', 'emit has pending patches'],\n          target: 'has pending patches',\n        },\n      },\n    },\n    'has pending patches': {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [\n          {\n            guard: 'slate is normalizing',\n            target: 'idle',\n            actions: ['emit mutation', 'clear pending patches'],\n          },\n          {\n            reenter: true,\n          },\n        ],\n      },\n      on: {\n        patch: {\n          actions: ['defer patch'],\n          reenter: true,\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst IS_APPLYING_BEHAVIOR_ACTIONS: WeakMap<Editor, boolean | undefined> =\n  new WeakMap()\n\nexport function withApplyingBehaviorActions(editor: Editor, fn: () => void) {\n  const prev = IS_APPLYING_BEHAVIOR_ACTIONS.get(editor)\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, true)\n  Editor.withoutNormalizing(editor, fn)\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, prev)\n}\n\nexport function isApplyingBehaviorActions(editor: Editor) {\n  return IS_APPLYING_BEHAVIOR_ACTIONS.get(editor) ?? false\n}\n\n////////\n\nconst CURRENT_BEHAVIOR_ACTION_INTEND_SET: WeakMap<\n  Editor,\n  {actionSetId: string} | undefined\n> = new WeakMap()\n\nexport function withApplyingBehaviorActionIntendSet(\n  editor: Editor,\n  fn: () => void,\n) {\n  const current = CURRENT_BEHAVIOR_ACTION_INTEND_SET.get(editor)\n  CURRENT_BEHAVIOR_ACTION_INTEND_SET.set(editor, {\n    actionSetId: defaultKeyGenerator(),\n  })\n  withApplyingBehaviorActions(editor, fn)\n  CURRENT_BEHAVIOR_ACTION_INTEND_SET.set(editor, current)\n}\n\nexport function getCurrentBehaviorActionSetId(editor: Editor) {\n  return CURRENT_BEHAVIOR_ACTION_INTEND_SET.get(editor)?.actionSetId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentBehaviorActionSetId} from '../with-applying-behavior-actions'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousBehaviorActionIntendSetId =\n      getCurrentBehaviorActionSetId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentBehaviorActionIntendSetId =\n        getCurrentBehaviorActionSetId(editor)\n\n      let merge =\n        currentBehaviorActionIntendSetId !== undefined &&\n        previousBehaviorActionIntendSetId === undefined\n          ? false\n          : currentBehaviorActionIntendSetId !== undefined &&\n              previousBehaviorActionIntendSetId !== undefined\n            ? currentBehaviorActionIntendSetId ===\n              previousBehaviorActionIntendSetId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentBehaviorActionIntendSetId === undefined &&\n            previousBehaviorActionIntendSetId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousBehaviorActionIntendSetId = currentBehaviorActionIntendSetId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoActionImplementation: BehaviorActionImplementation<\n  'history.undo'\n> = ({action}) => {\n  const editor = action.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoActionImplementation: BehaviorActionImplementation<\n  'history.redo'\n> = ({action}) => {\n  const editor = action.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          entry: [\n            () => {\n              debug('entry: syncing initial value')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing initial value')\n            },\n          ],\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: [\n            'emit done syncing initial value',\n            () => {\n              debug('entry: done syncing initial value')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: done syncing initial value')\n            },\n          ],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: syncing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->idle')\n            },\n          ],\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          entry: [\n            () => {\n              debug('entry: syncing->busy')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->busy')\n            },\n          ],\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                target: '.',\n                reenter: true,\n                actions: [\n                  () => {\n                    debug('reenter: syncing->busy')\n                  },\n                ],\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          entry: [\n            () => {\n              debug('entry: syncing->syncing')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->syncing')\n            },\n          ],\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.invalid value',\n          })\n          break\n        case 'value changed':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.value changed',\n          })\n          break\n        default:\n          props.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value})\n  }, [syncActorRef, value])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      mutationActorRef.send(event)\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({context, event}) => {\n    const portableTextConverter = context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      context,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({context, event}) => {\n    const portableTextConverter = context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      context,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({context, event}) => {\n    if (!context.selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: context.value,\n      selection: context.selection,\n    })\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({context, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context,\n        block,\n        options: {refreshKeys: true},\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterTextHtml = defineConverter({\n  mimeType: 'text/html',\n  serialize: ({context, event}) => {\n    if (!context.selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: context.value,\n      selection: context.selection,\n    })\n\n    const html = toHTML(blocks, {\n      onMissingComponent: false,\n      components: {\n        unknownType: ({children}) =>\n          children !== undefined ? `${children}` : '',\n      },\n    })\n\n    if (html === '') {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n        reason: 'Serialized HTML is empty',\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: html,\n      mimeType: 'text/html',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({context, event}) => {\n    const blocks = htmlToBlocks(event.data, context.schema.portableText, {\n      keyGenerator: context.keyGenerator,\n      unstable_whitespaceOnPasteMode:\n        context.schema.block.options.unstable_whitespaceOnPasteMode,\n    }) as Array<PortableTextBlock>\n\n    return {\n      type: 'deserialization.success',\n      data: blocks,\n      mimeType: 'text/html',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {isPortableTextTextBlock, type PortableTextBlock} from '@sanity/types'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterTextPlain = defineConverter({\n  mimeType: 'text/plain',\n  serialize: ({context, event}) => {\n    if (!context.selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: context.value,\n      selection: context.selection,\n    })\n\n    const data = blocks\n      .map((block) => {\n        if (isPortableTextTextBlock(block)) {\n          return block.children\n            .map((child) => {\n              if (child._type === context.schema.span.name) {\n                return child.text\n              }\n\n              return `[${\n                context.schema.inlineObjects.find(\n                  (inlineObjectType) => inlineObjectType.name === child._type,\n                )?.title ?? 'Object'\n              }]`\n            })\n            .join('')\n        }\n\n        return `[${\n          context.schema.blockObjects.find(\n            (blockObjectType) => blockObjectType.name === block._type,\n          )?.title ?? 'Object'\n        }]`\n      })\n      .join('\\n\\n')\n\n    return {\n      type: 'serialization.success',\n      data,\n      mimeType: 'text/plain',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({context, event}) => {\n    const html = escapeHtml(event.data)\n      .split(/\\n{2,}/)\n      .map((line) =>\n        line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>',\n      )\n      .join('')\n\n    const textToHtml = `<html><body>${html}</body></html>`\n\n    const blocks = htmlToBlocks(textToHtml, context.schema.portableText, {\n      keyGenerator: context.keyGenerator,\n    }) as Array<PortableTextBlock>\n\n    return {\n      type: 'deserialization.success',\n      data: blocks,\n      mimeType: 'text/plain',\n    }\n  },\n})\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {converterTextHtml} from './converter.text-html'\nimport {converterTextPlain} from './converter.text-plain'\n\nexport const coreConverters = [\n  converterJson,\n  converterPortableText,\n  converterTextHtml,\n  converterTextPlain,\n]\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, insertText, Node, Path, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    if (!selectionAcrossBlocks) {\n      Transforms.splitNodes(editor, {\n        at: editor.selection,\n      })\n\n      const [nextBlock, nextBlockPath] = Editor.node(\n        editor,\n        Path.next(focusBlockPath),\n        {depth: 1},\n      )\n\n      const nextChild = Node.child(nextBlock, 0)\n      const firstChildIsInlineObject = !editor.isTextSpan(nextChild)\n\n      if (firstChildIsInlineObject) {\n        // If the first child in the next block is an inline object then we\n        // add an empty span right before it to a place to put the cursor.\n        // This is a Slate constraint that we have to adhere to.\n        Transforms.insertNodes(\n          editor,\n          {\n            _key: context.keyGenerator(),\n            _type: 'span',\n            text: '',\n            marks: [],\n          },\n          {\n            at: [nextBlockPath[0], 0],\n          },\n        )\n      }\n\n      Transforms.setSelection(editor, {\n        anchor: {path: [...nextBlockPath, 0], offset: 0},\n        focus: {path: [...nextBlockPath, 0], offset: 0},\n      })\n\n      /**\n       * Assign new keys to markDefs that are now split across two blocks\n       */\n      if (\n        editor.isTextBlock(nextBlock) &&\n        nextBlock.markDefs &&\n        nextBlock.markDefs.length > 0\n      ) {\n        const newMarkDefKeys = new Map<string, string>()\n\n        const prevNodeSpans = Array.from(Node.children(editor, focusBlockPath))\n          .map((entry) => entry[0])\n          .filter((node) => editor.isTextSpan(node))\n        const children = Node.children(editor, nextBlockPath)\n\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child)) {\n            continue\n          }\n\n          const marks = child.marks ?? []\n\n          // Go through the marks of the span and figure out if any of\n          // them refer to annotations that are also present in the\n          // previous block\n          for (const mark of marks) {\n            if (\n              schema.decorators.some((decorator) => decorator.value === mark)\n            ) {\n              continue\n            }\n\n            if (\n              prevNodeSpans.some((prevNodeSpan) =>\n                prevNodeSpan.marks?.includes(mark),\n              ) &&\n              !newMarkDefKeys.has(mark)\n            ) {\n              // This annotation is both present in the previous block\n              // and this block, so let's assign a new key to it\n              newMarkDefKeys.set(mark, keyGenerator())\n            }\n          }\n\n          const newMarks = marks.map((mark) => newMarkDefKeys.get(mark) ?? mark)\n\n          // No need to update the marks if they are the same\n          if (!isEqual(marks, newMarks)) {\n            Transforms.setNodes(\n              editor,\n              {marks: newMarks},\n              {\n                at: childPath,\n              },\n            )\n          }\n        }\n\n        // Time to update all the markDefs that need a new key because\n        // they've been split across blocks\n        const newMarkDefs = nextBlock.markDefs.map((markDef) => ({\n          ...markDef,\n          _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n        }))\n\n        // No need to update the markDefs if they are the same\n        if (!isEqual(nextBlock.markDefs, newMarkDefs)) {\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {\n              at: nextBlockPath,\n              match: (node) => editor.isTextBlock(node),\n            },\n          )\n        }\n      }\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({action}) => {\n  insertText(action.editor, '\\n')\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleListItemActionImplementation: BehaviorActionImplementation<\n  'list item.toggle'\n> = ({context, action}) => {\n  const isActive = isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem,\n  })\n\n  if (isActive) {\n    removeListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.remove'},\n    })\n  } else {\n    addListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.add'},\n    })\n  }\n}\n\nexport const removeListItemActionImplementation: BehaviorActionImplementation<\n  'list item.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isListBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.unsetNodes(action.editor, ['listItem', 'level'], {at})\n  }\n}\n\nexport const addListItemActionImplementation: BehaviorActionImplementation<\n  'list item.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        level: 1,\n        listItem: action.listItem,\n      },\n      {at},\n    )\n  }\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleStyleActionImplementation: BehaviorActionImplementation<\n  'style.toggle'\n> = ({context, action}) => {\n  const isActive = isStyleActive({\n    editor: action.editor,\n    style: action.style,\n  })\n\n  if (isActive) {\n    removeStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.remove'},\n    })\n  } else {\n    addStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.add'},\n    })\n  }\n}\n\nexport const removeStyleActionImplementation: BehaviorActionImplementation<\n  'style.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const defaultStyle = context.schema.styles[0].value\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: defaultStyle,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport const addStyleActionImplementation: BehaviorActionImplementation<\n  'style.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: action.style,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toPortableTextRange, toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const decoratorAddActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({context, action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = action.offsets?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        value,\n        blockOffset: action.offsets.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = action.offsets?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        value,\n        blockOffset: action.offsets.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, action.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = toPortableTextRange(value, selection, context.schema)\n  const anchorOffset = editorSelection\n    ? utils.spanSelectionPointToBlockOffset({\n        value,\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.spanSelectionPointToBlockOffset({\n        value,\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      value: newValue,\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      context: {\n        activeDecorators: [],\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      const existingMarks: string[] =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      const marks = {\n        ...(Editor.marks(editor) || {}),\n        marks: [...existingMarks, mark],\n      }\n      editor.marks = marks as Text\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {decoratorAddActionImplementation} from '../../behavior-actions/behavior.action.decorator.add'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    decoratorAddActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {isListItemActive} from '../../behavior-actions/behavior.action.list-item'\nimport {isStyleActive} from '../../behavior-actions/behavior.action.style'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    const annotationKey = context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === action.annotation.name &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              _type: action.annotation.name,\n              _key: annotationKey,\n              ...action.annotation.value,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === action.annotation.name,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n\n      if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n        Transforms.removeNodes(editor, {at: focusBlockPath})\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockSetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.set'\n> = ({context, action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(action.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(action.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`)\n  }\n\n  const {_type, ...filteredProps} = action.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(action.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockUnsetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.unset'\n> = ({context, action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(action.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(action.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`)\n  }\n\n  if (isTextBlock(context.schema, parsedBlock)) {\n    const propsToRemove = action.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(action.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      action.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const dataTransferSetActionImplementation: BehaviorActionImplementation<\n  'data transfer.set'\n> = ({action}) => {\n  action.dataTransfer.setData(action.mimeType, action.data)\n}\n","import {deleteFragment, select} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteActionImplementation: BehaviorActionImplementation<\n  'delete'\n> = ({action}) => {\n  const range = toSlateRange(action.selection, action.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(action.selection)}`,\n    )\n  }\n\n  select(action.editor, range)\n  deleteFragment(action.editor)\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteTextActionImplementation: BehaviorActionImplementation<\n  'delete.text'\n> = ({context, action}) => {\n  const value = fromSlateValue(\n    action.editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  )\n\n  const selection = utils.blockOffsetsToSelection({\n    value,\n    offsets: {\n      anchor: action.anchor,\n      focus: action.focus,\n    },\n  })\n\n  if (!selection) {\n    throw new Error('Unable to find selection from block offsets')\n  }\n\n  const trimmedSelection = selectors.getTrimmedSelection({\n    context: {\n      converters: [],\n      schema: context.schema,\n      keyGenerator: context.keyGenerator,\n      activeDecorators: [],\n      value,\n      selection,\n    },\n  })\n\n  if (!trimmedSelection) {\n    throw new Error('Unable to find trimmed selection')\n  }\n\n  const range = toSlateRange(trimmedSelection, action.editor)\n\n  if (!range) {\n    throw new Error('Unable to find Slate range from trimmed selection')\n  }\n\n  Transforms.delete(action.editor, {\n    at: range,\n  })\n}\n","import {toSlateValue} from '../internal-utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert.block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {isEqual, uniq} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlocksActionImplementation: BehaviorActionImplementation<\n  'insert.blocks'\n> = ({context, action}) => {\n  const fragment = toSlateValue(action.blocks, {schemaTypes: context.schema})\n\n  if (!action.editor.selection) {\n    return\n  }\n  // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n  const [focusBlock, focusPath] = Editor.node(\n    action.editor,\n    action.editor.selection,\n    {\n      depth: 1,\n    },\n  )\n\n  if (\n    action.editor.isTextBlock(focusBlock) &&\n    action.editor.isTextBlock(fragment[0])\n  ) {\n    const {markDefs} = focusBlock\n    if (!isEqual(markDefs, fragment[0].markDefs)) {\n      Transforms.setNodes(\n        action.editor,\n        {\n          markDefs: uniq([\n            ...(fragment[0].markDefs || []),\n            ...(markDefs || []),\n          ]),\n        },\n        {at: focusPath, mode: 'lowest', voids: false},\n      )\n    }\n  }\n\n  const isPasteToEmptyEditor = isEqualToEmptyEditor(\n    action.editor.children,\n    context.schema,\n  )\n\n  if (isPasteToEmptyEditor) {\n    // Special case for pasting directly into an empty editor (a placeholder block).\n    // When pasting content starting with multiple empty blocks,\n    // `editor.insertFragment` can potentially duplicate the keys of\n    // the placeholder block because of operations that happen\n    // inside `editor.insertFragment` (involves an `insert_node` operation).\n    // However by splitting the placeholder block first in this situation we are good.\n    Transforms.splitNodes(action.editor, {at: [0, 0]})\n    action.editor.insertFragment(fragment)\n    Transforms.removeNodes(action.editor, {at: [0]})\n  } else {\n    // All other inserts\n    action.editor.insertFragment(fragment)\n  }\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockActionImplementation: BehaviorActionImplementation<\n  'insert.block'\n> = ({context, action}) => {\n  const parsedBlock = parseBlock({\n    block: action.block,\n    context,\n    options: {refreshKeys: false},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(action.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {deleteForward, insertText, Path, Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  BehaviorAction,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoActionImplementation,\n  historyUndoActionImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport {toSlatePath} from '../internal-utils/paths'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {PickFromUnion} from '../type-utils'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {blockSetBehaviorActionImplementation} from './behavior.action.block.set'\nimport {blockUnsetBehaviorActionImplementation} from './behavior.action.block.unset'\nimport {dataTransferSetActionImplementation} from './behavior.action.data-transfer-set'\nimport {decoratorAddActionImplementation} from './behavior.action.decorator.add'\nimport {deleteActionImplementation} from './behavior.action.delete'\nimport {deleteTextActionImplementation} from './behavior.action.delete.text'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {insertBlocksActionImplementation} from './behavior.action.insert-blocks'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {insertBlockActionImplementation} from './behavior.action.insert.block'\nimport {\n  addListItemActionImplementation,\n  removeListItemActionImplementation,\n  toggleListItemActionImplementation,\n} from './behavior.action.list-item'\nimport {\n  addStyleActionImplementation,\n  removeStyleActionImplementation,\n  toggleStyleActionImplementation,\n} from './behavior.action.style'\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'block.set': blockSetBehaviorActionImplementation,\n  'block.unset': blockUnsetBehaviorActionImplementation,\n  'blur': ({action}) => {\n    ReactEditor.blur(action.editor)\n  },\n  'data transfer.set': dataTransferSetActionImplementation,\n  'decorator.add': decoratorAddActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'delete': deleteActionImplementation,\n  'delete.backward': ({action}) => {\n    action.editor.deleteBackward(action.unit)\n  },\n  'delete.forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete.block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete.text': deleteTextActionImplementation,\n  'deserialization.failure': ({action}) => {\n    console.error(\n      `Deserialization of ${action.mimeType} failed with reason ${action.reason}`,\n    )\n  },\n  'deserialization.success': ({context, action}) => {\n    insertBlocksActionImplementation({\n      context,\n      action: {\n        type: 'insert.blocks',\n        blocks: action.data,\n        editor: action.editor,\n      },\n    })\n  },\n  'history.redo': historyRedoActionImplementation,\n  'history.undo': historyUndoActionImplementation,\n  'insert.block': insertBlockActionImplementation,\n  'insert.blocks': insertBlocksActionImplementation,\n  'insert.block object': insertBlockObjectActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert.text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'list item.add': addListItemActionImplementation,\n  'list item.remove': removeListItemActionImplementation,\n  'list item.toggle': toggleListItemActionImplementation,\n  'move.block': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [toSlatePath(action.to, action.editor)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block down': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [Path.next(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block up': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n\n    if (!Path.hasPrevious(at)) {\n      return\n    }\n\n    const to = [Path.previous(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'noop': () => {},\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'select.previous block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select previous block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n\n    if (!Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\")\n      return\n    }\n\n    const previousBlockPath = Path.previous(blockPath)\n\n    Transforms.select(action.editor, previousBlockPath)\n  },\n  'select.next block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select next block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n    const nextBlockPath = [blockPath[0] + 1]\n\n    Transforms.select(action.editor, nextBlockPath)\n  },\n  'serialization.failure': ({action}) => {\n    console.error(\n      `Serialization of ${action.mimeType} failed with reason ${action.reason}`,\n    )\n  },\n  'serialization.success': ({context, action}) => {\n    dataTransferSetActionImplementation({\n      context,\n      action: {\n        ...action,\n        type: 'data transfer.set',\n      },\n    })\n  },\n  'style.toggle': toggleStyleActionImplementation,\n  'style.add': addStyleActionImplementation,\n  'style.remove': removeStyleActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', SyntheticBehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.set': {\n      behaviorActionImplementations['block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.unset': {\n      behaviorActionImplementations['block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'data transfer.set': {\n      behaviorActionImplementations['data transfer.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete': {\n      behaviorActionImplementations.delete({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'deserialization.failure': {\n      behaviorActionImplementations['deserialization.failure']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'deserialization.success': {\n      behaviorActionImplementations['deserialization.success']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'history.redo': {\n      behaviorActionImplementations['history.redo']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'history.undo': {\n      behaviorActionImplementations['history.undo']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block': {\n      behaviorActionImplementations['insert.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.blocks': {\n      behaviorActionImplementations['insert.blocks']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block object': {\n      behaviorActionImplementations['insert.block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text block': {\n      behaviorActionImplementations['insert.text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.add': {\n      behaviorActionImplementations['list item.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.remove': {\n      behaviorActionImplementations['list item.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.toggle': {\n      behaviorActionImplementations['list item.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.previous block': {\n      behaviorActionImplementations['select.previous block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.next block': {\n      behaviorActionImplementations['select.next block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'serialization.failure': {\n      behaviorActionImplementations['serialization.failure']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'serialization.success': {\n      behaviorActionImplementations['serialization.success']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.add': {\n      behaviorActionImplementations['style.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.remove': {\n      behaviorActionImplementations['style.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['style.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport {insertSoftBreakActionImplementation} from '../../behavior-actions/behavior.action.insert-break'\nimport {performAction} from '../../behavior-actions/behavior.actions'\nimport {toPortableTextRange} from '../../internal-utils/ranges'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorActions} from '../with-applying-behavior-actions'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          // These events are not relevant for Behaviors\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'error':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'patches':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n          case 'unset':\n            break\n\n          case 'custom.*':\n            editorActor.send({\n              type: 'custom behavior event',\n              behaviorEvent: event.event,\n              editor,\n            })\n            break\n\n          default:\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: event,\n              editor,\n            })\n            break\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    const {\n      deleteBackward,\n      deleteForward,\n      insertBreak,\n      insertData,\n      insertText,\n      select,\n      setFragmentData,\n    } = editor\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak()\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertData(dataTransfer)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'deserialize',\n          dataTransfer,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertSoftBreakActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {type: 'insert.soft break', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText(text, options)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n          options,\n        },\n        editor,\n        defaultActionCallback: () => {\n          insertText(text, options)\n        },\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          selection: toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            range,\n            editorActor.getSnapshot().context.schema,\n          ),\n        },\n        editor,\n        defaultActionCallback: () => {\n          select(location)\n        },\n      })\n      return\n    }\n\n    editor.setFragmentData = (dataTransfer, originEvent) => {\n      if (isApplyingBehaviorActions(editor)) {\n        setFragmentData(dataTransfer)\n        return\n      }\n\n      dataTransfer.clearData()\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'serialize',\n          dataTransfer,\n          originEvent: originEvent ?? 'unknown',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    } else {\n      return false\n    }\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'notify.unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../internal-utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'notify.selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'notify.selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport {createOperationToPatches} from '../../internal-utils/operationToPatches'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior, raise} from './behavior.types'\n\nconst toggleAnnotationOff = defineBehavior({\n  on: 'annotation.toggle',\n  guard: ({context, event}) =>\n    selectors.isActiveAnnotation(event.annotation.name)({context}),\n  actions: [\n    ({event}) => [\n      raise({type: 'annotation.remove', annotation: event.annotation}),\n    ],\n  ],\n})\n\nconst toggleAnnotationOn = defineBehavior({\n  on: 'annotation.toggle',\n  guard: ({context, event}) =>\n    !selectors.isActiveAnnotation(event.annotation.name)({context}),\n  actions: [\n    ({event}) => [\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nconst toggleDecoratorOff = defineBehavior({\n  on: 'decorator.toggle',\n  guard: ({context, event}) =>\n    selectors.isActiveDecorator(event.decorator)({context}),\n  actions: [\n    ({event}) => [\n      raise({type: 'decorator.remove', decorator: event.decorator}),\n    ],\n  ],\n})\n\nconst toggleDecoratorOn = defineBehavior({\n  on: 'decorator.toggle',\n  guard: ({context, event}) =>\n    !selectors.isActiveDecorator(event.decorator)({context}),\n  actions: [\n    ({event}) => [raise({type: 'decorator.add', decorator: event.decorator})],\n  ],\n})\n\nconst toggleListItemOff = defineBehavior({\n  on: 'list item.toggle',\n  guard: ({context, event}) =>\n    selectors.isActiveListItem(event.listItem)({context}),\n  actions: [\n    ({event}) => [\n      raise({\n        type: 'list item.remove',\n        listItem: event.listItem,\n      }),\n    ],\n  ],\n})\n\nconst toggleListItemOn = defineBehavior({\n  on: 'list item.toggle',\n  guard: ({context, event}) =>\n    !selectors.isActiveListItem(event.listItem)({context}),\n  actions: [\n    ({event}) => [\n      raise({\n        type: 'list item.add',\n        listItem: event.listItem,\n      }),\n    ],\n  ],\n})\n\nconst toggleStyleOff = defineBehavior({\n  on: 'style.toggle',\n  guard: ({context, event}) => selectors.isActiveStyle(event.style)({context}),\n  actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n})\n\nconst toggleStyleOn = defineBehavior({\n  on: 'style.toggle',\n  guard: ({context, event}) => !selectors.isActiveStyle(event.style)({context}),\n  actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n})\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({context, event}) => {\n    const deserializeEvents = context.converters.flatMap((converter) => {\n      const data = event.dataTransfer.getData(converter.mimeType)\n\n      if (!data) {\n        return []\n      }\n\n      return [\n        converter.deserialize({context, event: {type: 'deserialize', data}}),\n      ]\n    })\n\n    const firstSuccess = deserializeEvents.find(\n      (deserializeEvent) => deserializeEvent.type === 'deserialization.success',\n    )\n\n    if (!firstSuccess) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: deserializeEvents\n          .map((deserializeEvent) =>\n            deserializeEvent.type === 'deserialization.failure'\n              ? deserializeEvent.reason\n              : '',\n          )\n          .join(', '),\n      } as const\n    }\n\n    return firstSuccess\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        dataTransfer: event.dataTransfer,\n      }),\n    ],\n  ],\n})\n\nconst raiseInsertBlocks = defineBehavior({\n  on: 'deserialization.success',\n  actions: [\n    ({event}) => [\n      raise({\n        type: 'insert.blocks',\n        blocks: event.data,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({context, event}) => {\n    if (context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = context.converters.map((converter) =>\n      converter.serialize({context, event}),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) =>\n        raise({\n          ...serializeEvent,\n          dataTransfer: event.dataTransfer,\n        }),\n      ),\n  ],\n})\n\nconst raiseDataTransferSet = defineBehavior({\n  on: 'serialization.success',\n  actions: [\n    ({event}) => [\n      raise({\n        type: 'data transfer.set',\n        data: event.data,\n        dataTransfer: event.dataTransfer,\n        mimeType: event.mimeType,\n      }),\n    ],\n  ],\n})\n\nexport const defaultBehaviors = [\n  toggleAnnotationOff,\n  toggleAnnotationOn,\n  toggleDecoratorOff,\n  toggleDecoratorOn,\n  toggleListItemOff,\n  toggleListItemOn,\n  toggleStyleOff,\n  toggleStyleOn,\n  raiseDeserializationSuccessOrFailure,\n  raiseInsertBlocks,\n  raiseSerializationSuccessOrFailure,\n  raiseDataTransferSet,\n]\n","export const keyIs = {\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport {defineBehavior, raise} from './behavior.types'\n\n/**\n * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n * than an `insertLineBreak` input event. This Behavior makes sure we catch\n * that `key.down` event beforehand and raise an `insert.soft break` manually.\n */\nconst raiseSoftBreak = defineBehavior({\n  on: 'key.down',\n  guard: ({event}) => keyIs.lineBreak(event.keyboardEvent),\n  actions: [() => [raise({type: 'insert.soft break'})]],\n})\n\nexport const foundationalBehaviors = [raiseSoftBreak]\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport {toPortableTextRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  activeDecorators: Array<string>\n  converters: Array<Converter>\n  keyGenerator: () => string\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  schema,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n}) {\n  const value = fromSlateValue(\n    editor.children,\n    schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n  const selection = toPortableTextRange(value, editor.selection, schema)\n\n  const context = {\n    activeDecorators: getActiveDecorators({\n      schema,\n      slateEditorInstance: editor,\n    }),\n    converters,\n    keyGenerator,\n    schema,\n    selection,\n    value,\n  } satisfies EditorContext\n\n  return {\n    context,\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport {defaultBehaviors} from '../behaviors/behavior.default'\nimport {foundationalBehaviors} from '../behaviors/behavior.foundational'\nimport {\n  isCustomBehaviorEvent,\n  type Behavior,\n  type BehaviorAction,\n  type CustomBehaviorEvent,\n  type NativeBehaviorEvent,\n  type SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {Converter} from '../converters/converter.types'\nimport type {NamespaceEvent} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport {\n  withApplyingBehaviorActionIntendSet,\n  withApplyingBehaviorActions,\n} from './with-applying-behavior-actions'\n\nexport * from 'xstate/guards'\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'add behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'remove behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update key generator'\n      keyGenerator: () => string\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\ntype PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\ntype UnsetEvent = {\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing initial value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      defaultActionCallback?: () => void\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'custom behavior event'\n      behaviorEvent: CustomBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | CustomBehaviorEvent\n  | ExternalEditorEvent\n  | MutationEvent\n  | NamespaceEvent<EditorEmittedEvent, 'notify'>\n  | NamespaceEvent<UnsetEvent, 'notify'>\n  | PatchEvent\n  | SyntheticBehaviorEvent\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | EditorEmittedEvent\n  | PatchesEvent\n  | UnsetEvent\n  | {\n      type: 'custom.*'\n      event: CustomBehaviorEvent\n    }\n  | SyntheticBehaviorEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<Behavior>\n      converters: Set<Converter>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      converters?: Array<Converter>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behavior])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behavior)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return new Set([...event.behaviors])\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event', 'custom behavior event'])\n\n      const defaultAction =\n        event.type === 'custom behavior event' ||\n        event.behaviorEvent.type === 'copy' ||\n        event.behaviorEvent.type === 'deserialize' ||\n        event.behaviorEvent.type === 'key.down' ||\n        event.behaviorEvent.type === 'key.up' ||\n        event.behaviorEvent.type === 'paste' ||\n        event.behaviorEvent.type === 'serialize'\n          ? undefined\n          : ({\n              ...event.behaviorEvent,\n              editor: event.editor,\n            } satisfies BehaviorAction)\n      const defaultActionCallback =\n        event.type === 'behavior event'\n          ? event.defaultActionCallback\n          : undefined\n\n      const eventBehaviors = [\n        ...foundationalBehaviors,\n        ...context.behaviors.values(),\n        ...defaultBehaviors,\n      ].filter((behavior) => behavior.on === event.behaviorEvent.type)\n\n      if (eventBehaviors.length === 0) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            try {\n              defaultActionCallback()\n            } catch (error) {\n              console.error(\n                new Error(\n                  `Performing action \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                ),\n              )\n            }\n          })\n          return\n        }\n\n        if (!defaultAction) {\n          return\n        }\n\n        withApplyingBehaviorActions(event.editor, () => {\n          try {\n            performAction({\n              context,\n              action: defaultAction,\n            })\n          } catch (error) {\n            console.error(\n              new Error(\n                `Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n        })\n        event.editor.onChange()\n        return\n      }\n\n      const editorSnapshot = createEditorSnapshot({\n        converters: [...context.converters],\n        editor: event.editor,\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n      })\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard === undefined ||\n          eventBehavior.guard({\n            context: editorSnapshot.context,\n            event: event.behaviorEvent,\n          })\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: editorSnapshot.context, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          withApplyingBehaviorActionIntendSet(event.editor, () => {\n            for (const actionIntend of actionIntends) {\n              if (actionIntend.type === 'raise') {\n                if (isCustomBehaviorEvent(actionIntend.event)) {\n                  enqueue.raise({\n                    type: 'custom behavior event',\n                    behaviorEvent: actionIntend.event as CustomBehaviorEvent,\n                    editor: event.editor,\n                  })\n                } else {\n                  enqueue.raise({\n                    type: 'behavior event',\n                    behaviorEvent: actionIntend.event,\n                    editor: event.editor,\n                  })\n                }\n                continue\n              }\n\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              try {\n                performAction({context, action})\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Performing action \"${action.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n                break\n              }\n            }\n          })\n          event.editor.onChange()\n        }\n\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault()\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            try {\n              defaultActionCallback()\n            } catch (error) {\n              console.error(\n                new Error(\n                  `Performing \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                ),\n              )\n            }\n          })\n          return\n        }\n\n        if (!defaultAction) {\n          return\n        }\n\n        withApplyingBehaviorActions(event.editor, () => {\n          try {\n            performAction({\n              context,\n              action: defaultAction,\n            })\n          } catch (error) {\n            console.error(\n              new Error(\n                `Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n        })\n        event.editor.onChange()\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([...(input.behaviors ?? coreBehaviors)]),\n    converters: new Set(input.converters ?? []),\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'notify.blurred': {\n      actions: emit(({event}) => ({...event, type: 'blurred'})),\n    },\n    'notify.done loading': {actions: emit({type: 'done loading'})},\n    'notify.error': {actions: emit(({event}) => ({...event, type: 'error'}))},\n    'notify.invalid value': {\n      actions: emit(({event}) => ({...event, type: 'invalid value'})),\n    },\n    'notify.focused': {\n      actions: emit(({event}) => ({...event, type: 'focused'})),\n    },\n    'notify.selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'notify.unset': {actions: emit(({event}) => ({...event, type: 'unset'}))},\n    'notify.loading': {actions: emit({type: 'loading'})},\n    'notify.value changed': {\n      actions: emit(({event}) => ({...event, type: 'value changed'})),\n    },\n\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'patches': {actions: emit(({event}) => event)},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update key generator': {\n      actions: assign({keyGenerator: ({event}) => event.keyGenerator}),\n    },\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'copy' ||\n                event.behaviorEvent.type === 'data transfer.set' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'custom behavior event': {\n              actions: 'handle behavior event',\n            },\n            'annotation.*': {\n              actions: emit(({event}) => event),\n            },\n            'block.*': {\n              actions: emit(({event}) => event),\n            },\n            'blur': {\n              actions: emit(({event}) => event),\n            },\n            'custom.*': {\n              actions: emit(({event}) => ({type: 'custom.*', event})),\n            },\n            'decorator.*': {\n              actions: emit(({event}) => event),\n            },\n            'delete.*': {\n              actions: emit(({event}) => event),\n            },\n            'focus': {\n              actions: emit(({event}) => event),\n            },\n            'history.*': {\n              actions: emit(({event}) => event),\n            },\n            'insert.*': {\n              actions: emit(({event}) => event),\n            },\n            'list item.*': {\n              actions: emit(({event}) => event),\n            },\n            'move.*': {\n              actions: emit(({event}) => event),\n            },\n            'select': {\n              actions: emit(({event}) => event),\n            },\n            'select.*': {\n              actions: emit(({event}) => event),\n            },\n            'style.*': {\n              actions: emit(({event}) => event),\n            },\n            'text block.*': {\n              actions: emit(({event}) => event),\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: 'normalizing',\n                },\n                patch: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                mutation: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            patch: {\n              actions: 'emit patch event',\n            },\n            mutation: {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\nexport function getValue({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  return fromSlateValue(\n    slateEditorInstance.children,\n    editorActorSnapshot.context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditorInstance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    editor._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: editor._internal.slateEditor.instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({editorActorSnapshot, slateEditorInstance}),\n    },\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {\n  Behavior,\n  CustomBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport {coreConverters} from '../converters/converters.core'\nimport {compileType} from '../internal-utils/schema'\nimport type {EditableAPI} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type ExternalEditorEvent,\n} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent =\n  | ExternalEditorEvent\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  /**\n   * @beta\n   */\n  registerBehavior: (config: {behavior: Behavior}) => () => void\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createEditorFromActor(editorActor)\n}\n\nexport function useCreateEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(() => createEditorFromActor(editorActor), [editorActor])\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    converters: coreConverters,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createEditorFromActor(editorActor: EditorActor): Editor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (config) => {\n      editorActor.send({\n        type: 'add behavior',\n        behavior: config.behavior,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behavior: config.behavior,\n        })\n      }\n    },\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) => {\n      const subscription = editorActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'error':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createEditor, type Editor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'mutation': {\n          handleChange(event)\n          break\n        }\n        case 'ready': {\n          handleChange(event)\n          break\n        }\n        case 'selection': {\n          handleChange(event)\n          break\n        }\n        case 'unset': {\n          handleChange(event)\n          break\n        }\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return null\n}\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {useCreateEditor, type Editor, type EditorConfig} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useCreateEditor(props.initialConfig)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from '../editor/editor-machine'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","undefined","inlineObject","portableTextSchema","defineField","marks","decorator","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","text","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","compileType","rawType","Schema","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","mutationMachine","setup","context","events","input","emitted","actions","emit","patches","pendingPatches","snapshot","slateEditor","assign","event","patch","guards","slate is normalizing","isNormalizing","createMachine","id","initial","states","on","target","after","guard","reenter","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","unset","description","action","item","i18n","some","blk","index","isPlainObject","String","values","set","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","cld","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childKey","childType","withRemoteChanges","fn","prev","isChangingRemotely","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultKeyGenerator","randomKey","getByteHexTable","table","i","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","IS_APPLYING_BEHAVIOR_ACTIONS","withApplyingBehaviorActions","withoutNormalizing","isApplyingBehaviorActions","CURRENT_BEHAVIOR_ACTION_INTEND_SET","withApplyingBehaviorActionIntendSet","current","actionSetId","getCurrentBehaviorActionSetId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","previousBehaviorActionIntendSetId","subscriptions","push","sub","reset","forEach","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","currentBehaviorActionIntendSetId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoActionImplementation","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutSaving","err","Transforms","deselect","onChange","pop","historyRedoActionImplementation","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","currentFocus","properties","currentAnchor","newFocus","newProperties","newAnchor","level","blockIndex","newPath","Path","syncValueCallback","sendBack","streamBlocks","syncValueLogic","fromCallback","syncMachine","initialValueSynced","readOnly","assertEvent","pendingValue","previousValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","value changed while syncing","pending value equals previous value","actors","entry","exit","always","idle","busy","syncing","invoke","src","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","warn","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","delete","insertText","voids","Synchronizer","props","$","useSelector","_temp","_temp2","t0","t1","t2","t3","t4","syncActorRef","useActorRef","t5","t6","mutationActorRef","t7","t8","subscription","send","useEffect","t10","t9","subscription_0","event_0","bb15","t11","t12","t13","t14","t15","event_1","t16","s_0","s","displayName","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","refreshKeys","converterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","unstable_whitespaceOnPasteMode","converterTextPlain","inlineObjectType","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","coreConverters","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","blockKey","keys","Object","keyName","val","indexOf","insertNodePatch","position","targetKey","node","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetBlock","targetChild","childToInsert","insertBreakActionImplementation","anchorBlockPath","focusBlockPath","focusBlock","Node","descendant","splitNodes","nextBlock","nextBlockPath","next","depth","nextChild","setSelection","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","has","newMarks","newMarkDefs","markDef","insertSoftBreakActionImplementation","toggleListItemActionImplementation","isListItemActive","listItem","removeListItemActionImplementation","addListItemActionImplementation","createGuards","selectedBlocks","isListBlock","unsetNodes","toggleStyleActionImplementation","isStyleActive","removeStyleActionImplementation","addStyleActionImplementation","defaultStyle","isPortableTextSpan","isPortableTextBlock","decoratorAddActionImplementation","manualAnchor","offsets","utils","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","isExpanded","hanging","newValue","newSelection","trimmedSelection","selectors","activeDecorators","newRange","splitTextNodes","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","getPreviousSpan","spanPath","previousSpan","isBefore","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","normalizeNode","nodeEntry","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","add","previousSelectionIsCollapsed","isCollapsed","newSelectionIsCollapsed","focusSpan","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","targetPath","oldDefs","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createEditableAPI","behaviorEvent","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","undo","redo","slateSelection","focusChild","insertChild","focusChildPath","focusNode","move","distance","unit","insertBlock","placement","hasBlockStyle","hasListStyle","element","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","toDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","SlateElement","removeAnnotation","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","insertBreak","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","marksWithoutAnnotation","toggleAnnotationActionImplementation","isEditor","nextPath","insertNode","lastBlock","blockSetBehaviorActionImplementation","location","filteredProps","slateBlock","blockUnsetBehaviorActionImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","dataTransferSetActionImplementation","dataTransfer","setData","deleteActionImplementation","deleteFragment","deleteTextActionImplementation","insertBlockObjectActionImplementation","insertBlocksActionImplementation","fragment","insertFragment","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","insertBlockActionImplementation","behaviorActionImplementations","delete.backward","deleteBackward","delete.forward","delete.block","deserialization.failure","deserialization.success","insert.text","insert.text block","effect","move.block","to","moveNodes","move.block down","move.block up","hasPrevious","previous","noop","select.previous block","previousBlockPath","select.next block","serialization.failure","serialization.success","performAction","performDefaultAction","createWithEventListeners","maxBlocks","deleteForward","insertData","setFragmentData","insertSoftBreak","defaultActionCallback","clearData","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","createWithPortableTextBlockStyle","SlateText","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","createWithSchemaTypes","isPortableTextListBlock","obj","isInline","createWithUtils","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","toggleAnnotationOff","defineBehavior","raise","toggleAnnotationOn","toggleDecoratorOff","toggleDecoratorOn","toggleListItemOff","toggleListItemOn","toggleStyleOff","toggleStyleOn","raiseDeserializationSuccessOrFailure","deserializeEvents","getData","deserializeEvent","raiseInsertBlocks","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","raiseDataTransferSet","defaultBehaviors","keyIs","lineBreak","shiftKey","raiseSoftBreak","keyboardEvent","foundationalBehaviors","getActiveDecorators","slateEditorInstance","createEditorSnapshot","editorMachine","behaviors","behavior","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","message","editorSnapshot","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntends","actionIntend","isCustomBehaviorEvent","nativeEvent","preventDefault","coreBehaviors","initialReadOnly","normalizing","mutation","editorActorSnapshot","defaultCompare","a","b","useEditorSelector","selector","compare","_internal","getEditorSnapshot","createActor","editorConfigToMachineInput","start","createEditorFromActor","useCreateEditor","schemaDefinition","hasOwnProperty","registerBehavior","listener","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","useState","startTransition","PortableTextEditor","Component","change$","Subject","constructor","schemaType","Number","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EditorContext","React","EditorProvider","initialConfig","portableTextEditor","useEditor","EventListenerPlugin"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71]}},
    {"offset": {"line": 9159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9165, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/selection.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/components/DefaultObject.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/components/DraggableBlock.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/components/Element.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/components/Leaf.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/withSyncRangeDecorations.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/editor/Editable.tsx"],"sourcesContent":["import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\n\nexport function DefaultBlockObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </div>\n  )\n}\n\nexport function DefaultInlineObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </span>\n  )\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../internal-utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {DefaultBlockObject, DefaultInlineObject} from './DefaultObject'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <DefaultInlineObject value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <DefaultInlineObject value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      }\n    }\n\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n\n  className = 'pt-block pt-object-block'\n\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n\n  let renderedBlockFromProps: JSX.Element | undefined\n\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <DefaultBlockObject value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        <div ref={blockRef} contentEditable={false}>\n          {renderedBlockFromProps ? (\n            renderedBlockFromProps\n          ) : (\n            <DefaultBlockObject value={value} />\n          )}\n        </div>\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = <span ref={spanRef}>{returnedChildren}</span>\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../internal-utils/values'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EventProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'notify.selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'notify.loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'notify.done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'notify.focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'notify.selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'notify.blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n"],"names":["normalizePoint","point","value","newPath","newOffset","offset","blockKey","path","_key","childKey","block","find","blk","push","children","Array","isArray","length","child","cld","text","normalizeSelection","selection","newAnchor","newFocus","anchor","focus","isEqual","backward","DefaultBlockObject","props","$","_c","t0","Symbol","for","userSelect","t1","_type","DefaultInlineObject","debug","debugWithName","DraggableBlock","element","readOnly","blockRef","editor","useSlateStatic","dragGhostRef","useRef","undefined","isDragOver","setIsDragOver","useState","t2","Editor","isVoid","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","event","isMyDragOver","IS_DRAGGING_BLOCK_ELEMENT","get","preventDefault","dataTransfer","dropEffect","IS_DRAGGING_ELEMENT_TARGET","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","IS_DRAGGING_BLOCK_TARGET_POSITION","handleDragOver","t8","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","JSON","stringify","originalPath_0","equals","Transforms","moveNodes","at","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","style","opacity","handleDrag","t12","event_3","IS_DRAGGING","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","t18","t19","displayName","EMPTY_ANNOTATIONS","inlineBlockStyle","display","Element","attributes","schemaTypes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","selected","useSelected","inlineBlockObjectRef","focused","Range","isCollapsed","useMemo","fromSlateValue","name","KEY_TO_VALUE_ELEMENT","renderedBlock","className","blockPath","Error","node","depth","schemaType","inlineObjects","SlateElement","isElement","elmPath","debugRenders","annotations","editorElementRef","type","isListItem","blockStyleType","styles","item","level","listItem","isListBlock","listType","lists","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","blockObjects","renderedBlockFromProps","_props","EMPTY_MARKS","Leaf","editorActor","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","usePortableTextEditor","blockSelected","setFocused","setSelected","parent","decoratorValues","decorators","map","dec","marks","uniq","filter","mark","includes","annotationMarks","markDefs","def","Boolean","shouldTrackSelectionAndFocus","sel","PortableTextEditor","getSelection","isCollapsedSelection","startTransition","setSelectedFromRange","useCallback","winSelection","window","rangeCount","range","getRangeAt","intersectsNode","onBlur","on","onFocus","onSelection","unsubscribe","content","returnedChildren","Text","isText","span","forEach","annotation","t","_child","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","keys","cat","hotkey","isHotkey","nativeEvent","possibleMark","send","behaviorEvent","decorator","possibleCommand","command","withSyncRangeDecorations","slateEditor","syncRangeDecorations","originalApply","apply","op","getSnapshot","matches","PLACEHOLDER_STYLE","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useContext","EditorActorContext","useSelector","s","context","schema","useSlate","blockTypeName","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","toSlateRange","select","operations","some","o","operation","newSlateRanges","rangeDecorationItem","SlateRange","isRange","onMoved","newSelection","origin","newRange","moveRangeByOperation","getValue","newRangeSelection","toPortableTextRange","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","data","handlePaste","onPasteResult","Promise","resolve","then","result","insert","insertData","insertFragment","toSlateValue","console","catch","error","finally","handleOnFocus","isDefaultPrevented","start","handleClick","focusBlockPath","slice","focusBlock","Node","descendant","_","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","isTextBlock","insertNodes","pteCreateTextBlock","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","deselect","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","key","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","_editor","domRange","decorate","isEqualToEmptyEditor","intersection","SlateEditable"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7]}},
    {"offset": {"line": 10355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10361, "column": 0}, "map": {"version":3,"file":"util.reverse-selection.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.reverse-selection.ts"],"sourcesContent":["import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function reverseSelection(\n  selection: NonNullable<EditorSelection>,\n): NonNullable<EditorSelection> {\n  if (selection.backward) {\n    return {\n      anchor: selection.focus,\n      focus: selection.anchor,\n      backward: false,\n    }\n  }\n\n  return {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: true,\n  }\n}\n"],"names":["reverseSelection","selection","backward","anchor","focus"],"mappings":";;;AAKO,SAASA,iBACdC,SAAAA,EAC8B;IAC9B,OAAIA,UAAUC,QAAAA,GACL;QACLC,QAAQF,UAAUG,KAAAA;QAClBA,OAAOH,UAAUE,MAAAA;QACjBD,UAAU,CAAA;IAAA,IAIP;QACLC,QAAQF,UAAUG,KAAAA;QAClBA,OAAOH,UAAUE,MAAAA;QACjBD,UAAU,CAAA;IACZ;AACF","ignoreList":[0]}},
    {"offset": {"line": 10377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10383, "column": 0}, "map": {"version":3,"file":"selector.get-text-before.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/selectors/selector.get-text-before.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\nimport {reverseSelection} from '../utils/util.reverse-selection'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @public\n */\nexport const getBlockTextBefore: EditorSelector<string> = ({context}) => {\n  if (!context.selection) {\n    return ''\n  }\n\n  const selection = context.selection.backward\n    ? reverseSelection(context.selection)\n    : context.selection\n  const point = selection.anchor\n  const key = isKeyedSegment(point.path[0]) ? point.path[0]._key : undefined\n\n  const block = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getBlockStartPoint({\n    node: block,\n    path: [{_key: block._key}],\n  })\n\n  return getSelectionText({\n    context: {\n      ...context,\n      value: context.value,\n      selection: {\n        anchor: startOfBlock,\n        focus: point,\n      },\n    },\n  })\n}\n"],"names":["getBlockTextBefore","context","selection","point","backward","reverseSelection","anchor","key","isKeyedSegment","path","_key","undefined","block","value","find","startOfBlock","getBlockStartPoint","node","getSelectionText","focus"],"mappings":";;;;;;;;;AASO,MAAMA,qBAA6CA,CAAC,EAACC,OAAAA,EAAO,KAAM;IACvE,IAAI,CAACA,QAAQC,SAAAA,EACJ,OAAA;IAMT,MAAMC,QAAAA,CAHYF,QAAQC,SAAAA,CAAUE,QAAAA,2MAChCC,mBAAAA,EAAiBJ,QAAQC,SAAS,IAClCD,QAAQC,SAAAA,EACYI,MAAAA,EAClBC,OAAMC,mNAAAA,EAAeL,MAAMM,IAAAA,CAAK,CAAC,CAAC,IAAIN,MAAMM,IAAAA,CAAK,CAAC,CAAA,CAAEC,IAAAA,GAAOC,KAAAA,GAE3DC,QAAQL,MACVN,QAAQY,KAAAA,CAAMC,IAAAA,CAAMF,CAAAA,SAAUA,OAAMF,IAAAA,KAASH,GAAG,IAChDI,KAAAA;IAEJ,IAAI,CAACC,OACI,OAAA;IAGT,MAAMG,kNAAeC,qBAAAA,EAAmB;QACtCC,MAAML;QACNH,MAAM;YAAC;gBAACC,MAAME,MAAMF,IAAAA;YAAK,CAAA;SAAA;IAAA,CAC1B;IAED,sOAAOQ,mBAAAA,EAAiB;QACtBjB,SAAS;YACP,GAAGA,OAAAA;YACHY,OAAOZ,QAAQY,KAAAA;YACfX,WAAW;gBACTI,QAAQS;gBACRI,OAAOhB;YAAAA;QACT;IACF,CACD;AACH","ignoreList":[0]}},
    {"offset": {"line": 10417, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10423, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.child-selection-point-to-block-offset.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.is-text-block.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.merge-text-blocks.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/utils/util.split-text-block.ts"],"sourcesContent":["import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {BlockOffset} from '../behaviors/behavior.types'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function childSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = isKeyedSegment(selectionPoint.path[0])\n    ? selectionPoint.path[0]._key\n    : undefined\n  const childKey = isKeyedSegment(selectionPoint.path[2])\n    ? selectionPoint.path[2]._key\n    : undefined\n\n  if (!blockKey || !childKey) {\n    return undefined\n  }\n\n  for (const block of value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (child._key === childKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      if (isPortableTextSpan(child)) {\n        offset += child.text.length\n      }\n    }\n  }\n}\n","import type {PortableTextBlock, PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../selectors'\n\n/**\n * @public\n */\nexport function isTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: PortableTextBlock,\n): block is PortableTextTextBlock {\n  return block._type === context.schema.block.name\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport type {EditorContext} from '../selectors'\nimport {isTextBlock} from './util.is-text-block'\n\n/**\n * @beta\n */\nexport function mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  targetBlock: PortableTextTextBlock\n  incomingBlock: PortableTextTextBlock\n}) {\n  const parsedIncomingBlock = parseBlock({\n    context,\n    block: incomingBlock,\n    options: {refreshKeys: true},\n  })\n\n  if (!parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock)) {\n    return targetBlock\n  }\n\n  return {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [\n      ...(targetBlock.markDefs ?? []),\n      ...(parsedIncomingBlock.markDefs ?? []),\n    ],\n  }\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {isTextBlock, sliceBlocks, type EditorSelectionPoint} from '.'\nimport type {EditorContext} from '../selectors'\nimport {isSpan} from './util.is-span'\n\n/**\n * @beta\n */\nexport function splitTextBlock({\n  context,\n  block,\n  point,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: PortableTextTextBlock\n  point: EditorSelectionPoint\n}): {before: PortableTextTextBlock; after: PortableTextTextBlock} | undefined {\n  const firstChild = block.children.at(0)\n  const lastChild = block.children.at(block.children.length - 1)\n\n  if (!firstChild || !lastChild) {\n    return undefined\n  }\n\n  const before = sliceBlocks({\n    blocks: [block],\n    selection: {\n      anchor: {\n        path: [{_key: block._key}, 'children', {_key: firstChild._key}],\n        offset: 0,\n      },\n      focus: point,\n    },\n  }).at(0)\n  const after = sliceBlocks({\n    blocks: [block],\n    selection: {\n      anchor: point,\n      focus: {\n        path: [{_key: block._key}, 'children', {_key: lastChild._key}],\n        offset: isSpan(context, lastChild) ? lastChild.text.length : 0,\n      },\n    },\n  }).at(0)\n\n  if (!before || !after) {\n    return undefined\n  }\n\n  if (!isTextBlock(context, before) || !isTextBlock(context, after)) {\n    return undefined\n  }\n\n  return {before, after}\n}\n"],"names":["childSelectionPointToBlockOffset","value","selectionPoint","offset","blockKey","isKeyedSegment","path","_key","undefined","childKey","block","isPortableTextTextBlock","child","children","isPortableTextSpan","text","length","isTextBlock","context","_type","schema","name","mergeTextBlocks","targetBlock","incomingBlock","parsedIncomingBlock","parseBlock","options","refreshKeys","markDefs","splitTextBlock","point","firstChild","at","lastChild","before","sliceBlocks","blocks","selection","anchor","focus","after","isSpan"],"mappings":"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","ignoreList":[0,1,2,3]}},
    {"offset": {"line": 10527, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10533, "column": 0}, "map": {"version":3,"file":"behavior.markdown.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.markdown.ts"],"sourcesContent":["import {isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\nimport * as selectors from '../selectors'\nimport {getBlockTextBefore} from '../selectors/selector.get-text-before'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {defineBehavior} from './behavior.types'\n\n/**\n * @beta\n */\nexport type MarkdownBehaviorsConfig = {\n  horizontalRuleObject?: (context: {\n    schema: EditorSchema\n  }) => {name: string; value?: {[prop: string]: unknown}} | undefined\n  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined\n  headingStyle?: (context: {\n    schema: EditorSchema\n    level: number\n  }) => string | undefined\n  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined\n  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n}\n\n/**\n * @beta\n * Create markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {createMarkdownBehaviors, coreBehaviors} from '@portabletext/editor/behaviors'\n *\n * function App() {\n *  return (\n *   <EditorProvider\n *    initialConfig={{\n *    behaviors: [\n *    ...coreBehaviors,\n *    ...createMarkdownBehaviors({\n *        horizontalRuleObject: ({schema}) => {\n *          const name = schema.blockObjects.find(\n *            (object) => object.name === 'break',\n *          )?.name\n *          return name ? {name} : undefined\n *        },\n *        defaultStyle: ({schema}) => schema.styles[0].value,\n *        headingStyle: ({schema, level}) =>\n *          schema.styles.find((style) => style.value === `h${level}`)\n *            ?.value,\n *        blockquoteStyle: ({schema}) =>\n *          schema.styles.find((style) => style.value === 'blockquote')\n *            ?.value,\n *        unorderedListStyle: ({schema}) =>\n *          schema.lists.find((list) => list.value === 'bullet')?.value,\n *        orderedListStyle: ({schema}) =>\n *          schema.lists.find((list) => list.value === 'number')?.value,\n *      }),\n *      ]\n *    }}\n *    >\n *    {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n *\n */\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed({context})\n      const focusTextBlock = selectors.getFocusTextBlock({context})\n      const focusSpan = selectors.getFocusSpan({context})\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject({context})\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const caretAtTheEndOfQuote = blockOffset.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(blockText)\n      const blockquoteStyle = config.blockquoteStyle?.(context)\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert.text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, style}) => [\n        {\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'delete.text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: 2,\n          },\n        },\n      ],\n    ],\n  })\n  const automaticHr = defineBehavior({\n    on: 'insert.text',\n    guard: ({context, event}) => {\n      const hrCharacter =\n        event.text === '-'\n          ? '-'\n          : event.text === '*'\n            ? '*'\n            : event.text === '_'\n              ? '_'\n              : undefined\n\n      if (hrCharacter === undefined) {\n        return false\n      }\n\n      const hrObject = config.horizontalRuleObject?.(context)\n      const focusBlock = selectors.getFocusTextBlock({context})\n      const selectionCollapsed = selectors.isSelectionCollapsed({context})\n\n      if (!hrObject || !focusBlock || !selectionCollapsed) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject({context})\n      const textBefore = getBlockTextBefore({context})\n      const hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0,\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3,\n        },\n      }\n\n      if (\n        !previousInlineObject &&\n        textBefore === `${hrCharacter}${hrCharacter}`\n      ) {\n        return {hrObject, focusBlock, hrCharacter, hrBlockOffsets}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {hrCharacter}) => [\n        {\n          type: 'insert.text',\n          text: hrCharacter,\n        },\n      ],\n      (_, {hrObject, hrBlockOffsets}) => [\n        {\n          type: 'insert.block object',\n          placement: 'before',\n          blockObject: hrObject,\n        },\n        {\n          type: 'delete.text',\n          ...hrBlockOffsets,\n        },\n      ],\n    ],\n  })\n  const automaticHrOnPaste = defineBehavior({\n    on: 'paste',\n    guard: ({context, event}) => {\n      const text = event.data.getData('text/plain')\n      const hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/gm\n      const hrCharacters = text.match(hrRegExp)?.[0]\n      const hrObject = config.horizontalRuleObject?.(context)\n      const focusBlock = selectors.getFocusBlock({context})\n\n      if (!hrCharacters || !hrObject || !focusBlock) {\n        return false\n      }\n\n      return {hrCharacters, hrObject, focusBlock}\n    },\n    actions: [\n      (_, {hrCharacters}) => [\n        {\n          type: 'insert.text',\n          text: hrCharacters,\n        },\n      ],\n      (_, {hrObject, focusBlock}) =>\n        isPortableTextTextBlock(focusBlock.node)\n          ? [\n              {\n                type: 'insert.text block',\n                textBlock: {children: focusBlock.node.children},\n                placement: 'after',\n              },\n              {\n                type: 'insert.block object',\n                blockObject: hrObject,\n                placement: 'after',\n              },\n              {type: 'delete.block', blockPath: focusBlock.path},\n            ]\n          : [\n              {\n                type: 'insert.block object',\n                blockObject: hrObject,\n                placement: 'after',\n              },\n            ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed({context})\n      const focusTextBlock = selectors.getFocusTextBlock({context})\n      const focusSpan = selectors.getFocusSpan({context})\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject({context})\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const markdownHeadingSearch = /^#+/.exec(blockText)\n      const level = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading = blockOffset.offset === level\n\n      if (previousInlineObject || !caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const style =\n        level !== undefined\n          ? config.headingStyle?.({schema: context.schema, level})\n          : undefined\n\n      if (level !== undefined && style !== undefined) {\n        return {\n          focusTextBlock,\n          style: style,\n          level,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [event],\n      (_, {focusTextBlock, style, level}) => [\n        {\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'delete.text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: level + 1,\n          },\n        },\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete.backward',\n    guard: ({context}) => {\n      const selectionCollapsed = selectors.isSelectionCollapsed({context})\n      const focusTextBlock = selectors.getFocusTextBlock({context})\n      const focusSpan = selectors.getFocusSpan({context})\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        context.selection?.focus.offset === 0\n\n      const defaultStyle = config.defaultStyle?.(context)\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        {\n          type: 'block.set',\n          props: {style: defaultStyle},\n          at: focusTextBlock.path,\n        },\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed({context})\n      const focusTextBlock = selectors.getFocusTextBlock({context})\n      const focusSpan = selectors.getFocusSpan({context})\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject({context})\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const defaultStyle = config.defaultStyle?.(context)\n      const looksLikeUnorderedList = /^(-|\\*)/.test(blockText)\n      const unorderedListStyle = config.unorderedListStyle?.(context)\n      const caretAtTheEndOfUnorderedList = blockOffset.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1\\./.test(blockText)\n      const orderedListStyle = config.orderedListStyle?.(context)\n      const caretAtTheEndOfOrderedList = blockOffset.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [event],\n      (_, {focusTextBlock, style, listItem, listItemLength}) => [\n        {\n          type: 'block.set',\n          props: {\n            listItem,\n            level: 1,\n            style,\n          },\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'delete.text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: listItemLength + 1,\n          },\n        },\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    automaticHr,\n    automaticHrOnPaste,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n"],"names":["createMarkdownBehaviors","config","automaticBlockquoteOnSpace","defineBehavior","on","guard","context","event","text","selectionCollapsed","selectors","focusTextBlock","focusSpan","previousInlineObject","blockOffset","spanSelectionPointToBlockOffset","value","selectionPoint","path","_key","node","offset","selection","focus","blockText","getTextBlockText","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","undefined","style","actions","type","_","props","at","anchor","automaticHr","hrCharacter","hrObject","horizontalRuleObject","focusBlock","textBefore","getBlockTextBefore","hrBlockOffsets","placement","blockObject","automaticHrOnPaste","data","getData","hrRegExp","hrCharacters","match","isPortableTextTextBlock","textBlock","children","blockPath","automaticHeadingOnSpace","markdownHeadingSearch","exec","level","length","caretAtTheEndOfHeading","headingStyle","schema","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","caretAtTheEndOfOrderedList"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10901, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10907, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/plugins/plugin.behavior.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/plugins/plugin.editor-ref.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/internal-utils/get-text-to-emphasize.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/behaviors/behavior.markdown-emphasis.ts","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/plugins/plugin.markdown.tsx","file:///Users/mufaddalaurangabadi/Desktop/Profix/profix_website/node_modules/%40portabletext/editor/src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => unregister())\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","import React from 'react'\nimport type {Editor} from '../editor/create-editor'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","const asteriskPairRegex = '(?<!\\\\*)\\\\*(?!\\\\s)([^*\\\\n]+?)(?<!\\\\s)\\\\*(?!\\\\*)'\nconst underscorePairRegex = '(?<!_)_(?!\\\\s)([^_\\\\n]+?)(?<!\\\\s)_(?!_)'\nconst italicRegex = new RegExp(`(${asteriskPairRegex}|${underscorePairRegex})$`)\n\nconst doubleAsteriskPairRegex =\n  '(?<!\\\\*)\\\\*\\\\*(?!\\\\s)([^*\\\\n]+?)(?<!\\\\s)\\\\*\\\\*(?!\\\\*)'\nconst doubleUnderscorePairRegex = '(?<!_)__(?!\\\\s)([^_\\\\n]+?)(?<!\\\\s)__(?!_)'\nconst boldRegex = new RegExp(\n  `(${doubleAsteriskPairRegex}|${doubleUnderscorePairRegex})$`,\n)\n\nexport function getTextToItalic(text: string) {\n  return text.match(italicRegex)?.at(0)\n}\n\nexport function getTextToBold(text: string) {\n  return text.match(boldRegex)?.at(0)\n}\n","import {useActorRef} from '@xstate/react'\nimport {isEqual} from 'lodash'\nimport {\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {Editor} from '../editor/create-editor'\nimport {useEditor} from '../editor/editor-provider'\nimport {\n  getTextToBold,\n  getTextToItalic,\n} from '../internal-utils/get-text-to-emphasize'\nimport type {EditorSchema} from '../selectors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {defineBehavior} from './behavior.types'\n\n/**\n * @beta\n */\nexport type MarkdownEmphasisBehaviorsConfig = {\n  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n}\n\n/**\n * @beta\n */\nexport function useMarkdownEmphasisBehaviors(props: {\n  config: MarkdownEmphasisBehaviorsConfig\n}) {\n  const editor = useEditor()\n\n  useActorRef(emphasisMachine, {\n    input: {\n      editor,\n      boldDecorator: props.config.boldDecorator?.({\n        schema: editor.getSnapshot().context.schema,\n      }),\n      italicDecorator: props.config.italicDecorator?.({\n        schema: editor.getSnapshot().context.schema,\n      }),\n    },\n  })\n}\n\ntype MarkdownEmphasisEvent =\n  | {\n      type: 'emphasis.add'\n      blockOffset: utils.BlockOffset\n    }\n  | {\n      type: 'selection'\n      blockOffsets?: {\n        anchor: utils.BlockOffset\n        focus: utils.BlockOffset\n      }\n    }\n  | {\n      type: 'delete.backward'\n    }\n\nconst emphasisListener: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor; boldDecorator?: string; italicDecorator?: string}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'insert.text',\n      guard: ({context, event}) => {\n        const boldDecorator = input.boldDecorator\n        const italicDecorator = input.italicDecorator\n\n        if (boldDecorator === undefined && italicDecorator === undefined) {\n          return false\n        }\n\n        const focusTextBlock = selectors.getFocusTextBlock({context})\n        const selectionStartPoint = selectors.getSelectionStartPoint({context})\n        const selectionStartOffset = selectionStartPoint\n          ? utils.spanSelectionPointToBlockOffset({\n              value: context.value,\n              selectionPoint: selectionStartPoint,\n            })\n          : undefined\n\n        if (!focusTextBlock || !selectionStartOffset) {\n          return false\n        }\n\n        const textBefore = selectors.getBlockTextBefore({context})\n\n        const textToItalic = getTextToItalic(`${textBefore}${event.text}`)\n\n        if (textToItalic !== undefined && italicDecorator !== undefined) {\n          const prefixOffsets = {\n            anchor: {\n              path: focusTextBlock.path,\n              // Example: \"foo *bar*\".length - \"*bar*\".length = 4\n              offset: `${textBefore}${event.text}`.length - textToItalic.length,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              // Example: \"foo *bar*\".length - \"*bar*\".length + 1 = 5\n              offset:\n                `${textBefore}${event.text}`.length - textToItalic.length + 1,\n            },\n          }\n          const suffixOffsets = {\n            anchor: {\n              path: focusTextBlock.path,\n              // Example: \"foo *bar|\" (8) + \"*\".length - 1 = 8\n              offset: selectionStartOffset.offset + event.text.length - 1,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              // Example: \"foo *bar|\" (8) + \"*\".length = 9\n              offset: selectionStartOffset.offset + event.text.length,\n            },\n          }\n\n          return {\n            prefixOffsets,\n            suffixOffsets,\n            decorator: italicDecorator,\n          }\n        }\n\n        const textToBold = getTextToBold(`${textBefore}${event.text}`)\n\n        if (textToBold !== undefined && boldDecorator !== undefined) {\n          const prefixOffsets = {\n            anchor: {\n              path: focusTextBlock.path,\n              // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n              offset: `${textBefore}${event.text}`.length - textToBold.length,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              // Example: \"foo **bar**\".length - \"**bar**\".length + 2 = 6\n              offset:\n                `${textBefore}${event.text}`.length - textToBold.length + 2,\n            },\n          }\n\n          const prefixSelection = utils.blockOffsetsToSelection({\n            value: context.value,\n            offsets: prefixOffsets,\n          })\n          const inlineObjectBeforePrefixFocus =\n            selectors.getPreviousInlineObject({\n              context: {\n                ...context,\n                selection: prefixSelection\n                  ? {\n                      anchor: prefixSelection.focus,\n                      focus: prefixSelection.focus,\n                    }\n                  : null,\n              },\n            })\n          const inlineObjectBeforePrefixFocusOffset =\n            inlineObjectBeforePrefixFocus\n              ? utils.childSelectionPointToBlockOffset({\n                  value: context.value,\n                  selectionPoint: {\n                    path: inlineObjectBeforePrefixFocus.path,\n                    offset: 0,\n                  },\n                })\n              : undefined\n\n          if (\n            inlineObjectBeforePrefixFocusOffset &&\n            inlineObjectBeforePrefixFocusOffset.offset >\n              prefixOffsets.anchor.offset &&\n            inlineObjectBeforePrefixFocusOffset.offset <\n              prefixOffsets.focus.offset\n          ) {\n            return false\n          }\n\n          const suffixOffsets = {\n            anchor: {\n              path: focusTextBlock.path,\n              // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n              offset: selectionStartOffset.offset + event.text.length - 2,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n              offset: selectionStartOffset.offset + event.text.length,\n            },\n          }\n\n          const previousInlineObject = selectors.getPreviousInlineObject({\n            context,\n          })\n          const previousInlineObjectOffset = previousInlineObject\n            ? utils.childSelectionPointToBlockOffset({\n                value: context.value,\n                selectionPoint: {\n                  path: previousInlineObject.path,\n                  offset: 0,\n                },\n              })\n            : undefined\n\n          if (\n            previousInlineObjectOffset &&\n            previousInlineObjectOffset.offset > suffixOffsets.anchor.offset &&\n            previousInlineObjectOffset.offset < suffixOffsets.focus.offset\n          ) {\n            return false\n          }\n\n          return {\n            prefixOffsets,\n            suffixOffsets,\n            decorator: boldDecorator,\n          }\n        }\n\n        return false\n      },\n      actions: [\n        ({event}) => [event],\n        (_, {prefixOffsets, suffixOffsets, decorator}) => [\n          {\n            type: 'decorator.add',\n            decorator,\n            offsets: {\n              anchor: prefixOffsets.focus,\n              focus: suffixOffsets.anchor,\n            },\n          },\n          {\n            type: 'delete.text',\n            ...suffixOffsets,\n          },\n          {\n            type: 'delete.text',\n            ...prefixOffsets,\n          },\n          {\n            type: 'decorator.remove',\n            decorator,\n          },\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({\n                type: 'emphasis.add',\n                blockOffset: {\n                  ...suffixOffsets.anchor,\n                  offset:\n                    suffixOffsets.anchor.offset -\n                    (prefixOffsets.focus.offset - prefixOffsets.anchor.offset),\n                },\n              })\n            },\n          },\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst selectionListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'select',\n      guard: ({context, event}) => {\n        if (!event.selection) {\n          return {blockOffsets: undefined}\n        }\n\n        const anchor = utils.spanSelectionPointToBlockOffset({\n          value: context.value,\n          selectionPoint: event.selection.anchor,\n        })\n        const focus = utils.spanSelectionPointToBlockOffset({\n          value: context.value,\n          selectionPoint: event.selection.focus,\n        })\n\n        if (!anchor || !focus) {\n          return {blockOffsets: undefined}\n        }\n\n        return {\n          blockOffsets: {\n            anchor,\n            focus,\n          },\n        }\n      },\n      actions: [\n        (_, {blockOffsets}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'selection', blockOffsets})\n            },\n          },\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst deleteBackwardListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'delete.backward',\n      actions: [\n        () => [\n          {\n            type: 'history.undo',\n          },\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'delete.backward'})\n            },\n          },\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst emphasisMachine = setup({\n  types: {\n    context: {} as {\n      boldDecorator?: string\n      italicDecorator?: string\n      offsetAfterEmphasis?: utils.BlockOffset\n      editor: Editor\n    },\n    input: {} as {\n      boldDecorator?: string\n      italicDecorator?: string\n      editor: Editor\n    },\n    events: {} as MarkdownEmphasisEvent,\n  },\n  actors: {\n    'emphasis listener': fromCallback(emphasisListener),\n    'delete.backward listener': fromCallback(deleteBackwardListenerCallback),\n    'selection listener': fromCallback(selectionListenerCallback),\n  },\n}).createMachine({\n  id: 'emphasis',\n  context: ({input}) => ({\n    boldDecorator: input.boldDecorator,\n    italicDecorator: input.italicDecorator,\n    editor: input.editor,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      invoke: [\n        {\n          src: 'emphasis listener',\n          input: ({context}) => ({\n            editor: context.editor,\n            boldDecorator: context.boldDecorator,\n            italicDecorator: context.italicDecorator,\n          }),\n        },\n      ],\n      on: {\n        'emphasis.add': {\n          target: 'emphasis added',\n          actions: assign({\n            offsetAfterEmphasis: ({event}) => event.blockOffset,\n          }),\n        },\n      },\n    },\n    'emphasis added': {\n      exit: [\n        assign({\n          offsetAfterEmphasis: undefined,\n        }),\n      ],\n      invoke: [\n        {\n          src: 'selection listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n        {\n          src: 'delete.backward listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n      ],\n      on: {\n        'selection': {\n          target: 'idle',\n          guard: ({context, event}) => {\n            const selectionChanged = !isEqual(\n              {\n                anchor: context.offsetAfterEmphasis,\n                focus: context.offsetAfterEmphasis,\n              },\n              event.blockOffsets,\n            )\n\n            return selectionChanged\n          },\n        },\n        'delete.backward': {\n          target: 'idle',\n        },\n      },\n    },\n  },\n})\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport {\n  useMarkdownEmphasisBehaviors,\n  type MarkdownEmphasisBehaviorsConfig,\n} from '../behaviors/behavior.markdown-emphasis'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig &\n  MarkdownEmphasisBehaviorsConfig\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          boldDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,\n *          italicDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n  useMarkdownEmphasisBehaviors({config: props.config})\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return null\n}\n","import {defineBehavior, raise} from '../behaviors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({context}) =>\n      context.selection && selectors.isSelectionExpanded({context})\n        ? {selection: context.selection}\n        : false,\n    actions: [(_, {selection}) => [{type: 'delete', selection}]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * Other cases of `insert.block` are allowed.\n   *\n   * If a text block is inserted and the focus block is fully selected, then\n   * the focus block can be replaced with the inserted block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({context, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock({context})\n      const selectionStartPoint = selectors.getSelectionStartPoint({context})\n      const selectionEndPoint = selectors.getSelectionEndPoint({context})\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(context, event.block) ||\n        !selectionStartPoint ||\n        !selectionEndPoint\n      ) {\n        return false\n      }\n\n      const blockStartPoint = utils.getBlockStartPoint(focusTextBlock)\n      const blockEndPoint = utils.getBlockEndPoint(focusTextBlock)\n      const newFocus = utils.getBlockEndPoint({\n        node: event.block,\n        path: [{_key: event.block._key}],\n      })\n\n      if (\n        utils.isEqualSelectionPoints(blockStartPoint, selectionStartPoint) &&\n        utils.isEqualSelectionPoints(blockEndPoint, selectionEndPoint)\n      ) {\n        return {focusTextBlock, newFocus}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {focusTextBlock, newFocus}) => [\n        {type: 'delete.block', blockPath: focusTextBlock.path},\n        {type: 'insert.block', block: event.block, placement: 'auto'},\n        {\n          type: 'select',\n          selection: {\n            anchor: newFocus,\n            focus: newFocus,\n          },\n        },\n      ],\n    ],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({context, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock({context})\n      const selectionStartPoint = selectors.getSelectionStartPoint({context})\n      const selectionEndPoint = selectors.getSelectionEndPoint({context})\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(context, event.block) ||\n        !selectionStartPoint ||\n        !selectionEndPoint\n      ) {\n        return false\n      }\n\n      const blockBeforeStartPoint = utils.splitTextBlock({\n        context,\n        block: focusTextBlock.node,\n        point: selectionStartPoint,\n      })?.before\n      const blockAfterEndPoint = utils.splitTextBlock({\n        context,\n        block: focusTextBlock.node,\n        point: selectionEndPoint,\n      })?.after\n\n      if (!blockBeforeStartPoint || !blockAfterEndPoint) {\n        return false\n      }\n\n      const targetBlock = utils.mergeTextBlocks({\n        context,\n        targetBlock: blockBeforeStartPoint,\n        incomingBlock: event.block,\n      })\n\n      const newFocus = utils.getBlockEndPoint({\n        node: targetBlock,\n        path: [{_key: targetBlock._key}],\n      })\n\n      const mergedBlock = utils.mergeTextBlocks({\n        context,\n        targetBlock,\n        incomingBlock: blockAfterEndPoint,\n      })\n\n      return {focusTextBlock, mergedBlock, newFocus}\n    },\n    actions: [\n      (_, {focusTextBlock, mergedBlock, newFocus}) => [\n        {type: 'delete.block', blockPath: focusTextBlock.path},\n        {type: 'insert.block', block: mergedBlock, placement: 'auto'},\n        {\n          type: 'select',\n          selection: {\n            anchor: newFocus,\n            focus: newFocus,\n          },\n        },\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({context, event}) => {\n      return event.blocks\n        .filter((block) => utils.isTextBlock(context, block))\n        .reduce((targetBlock, incomingBlock) => {\n          return utils.mergeTextBlocks({\n            context,\n            targetBlock,\n            incomingBlock,\n          })\n        })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n  /**\n   * Block objects do not fit in a one-line editor\n   */\n  defineBehavior({\n    on: 'insert.block object',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * `insert.text block` is raised as an `insert.block` so it can be handled\n   * by the Behaviors above.\n   */\n  defineBehavior({\n    on: 'insert.text block',\n    actions: [\n      ({context, event}) => [\n        raise({\n          type: 'insert.block',\n          block: {\n            _key: context.keyGenerator(),\n            _type: context.schema.block.name,\n            children: event.textBlock?.children ?? [],\n          },\n          placement: event.placement,\n        }),\n      ],\n    ],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","EditorRefPlugin","React","forwardRef","_","ref","portableTextEditorRef","useRef","Symbol","for","current","useImperativeHandle","displayName","asteriskPairRegex","underscorePairRegex","italicRegex","RegExp","doubleAsteriskPairRegex","doubleUnderscorePairRegex","boldRegex","getTextToItalic","text","match","at","getTextToBold","useMarkdownEmphasisBehaviors","config","boldDecorator","schema","getSnapshot","context","italicDecorator","t2","input","useActorRef","emphasisMachine","emphasisListener","sendBack","defineBehavior","on","guard","event","undefined","focusTextBlock","selectors","selectionStartPoint","selectionStartOffset","utils","value","selectionPoint","textBefore","textToItalic","prefixOffsets","anchor","path","offset","length","focus","suffixOffsets","decorator","textToBold","prefixSelection","offsets","inlineObjectBeforePrefixFocus","selection","inlineObjectBeforePrefixFocusOffset","previousInlineObject","previousInlineObjectOffset","actions","type","effect","blockOffset","selectionListenerCallback","blockOffsets","deleteBackwardListenerCallback","setup","types","events","actors","fromCallback","createMachine","id","initial","states","invoke","src","target","assign","offsetAfterEmphasis","exit","isEqual","MarkdownPlugin","createMarkdownBehaviors","unregisterBehavior","oneLineBehaviors","placement","selectionEndPoint","block","blockStartPoint","blockEndPoint","newFocus","node","_key","blockPath","blockBeforeStartPoint","point","before","blockAfterEndPoint","after","targetBlock","incomingBlock","mergedBlock","blocks","filter","reduce","raise","keyGenerator","_type","name","children","textBlock","OneLinePlugin"],"mappings":"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","ignoreList":[0,1,2,3,4,5]}},
    {"offset": {"line": 11533, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}