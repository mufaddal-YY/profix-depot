{"version":3,"file":"pane.js","sources":["../../src/structure/i18n/index.ts","../../src/structure/components/DocTitle.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","../../src/structure/components/paneItem/PaneItemPreview.tsx","../../src/structure/components/paneRouter/BackLink.tsx","../../src/structure/components/pane/usePaneLayout.ts","../../src/structure/components/paneRouter/ChildLink.tsx","../../src/structure/components/paneRouter/ParameterizedLink.tsx","../../src/structure/components/paneRouter/ReferenceChildLink.tsx","../../src/structure/components/paneRouter/usePaneRouter.ts","../../src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","../../src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","../../src/structure/components/confirmDeleteDialog/index.tsx","../../src/structure/components/Delay.tsx","../../src/structure/components/pane/constants.ts","../../src/structure/components/pane/PaneDivider.tsx","../../src/structure/components/pane/Pane.tsx","../../src/structure/components/pane/PaneContent.styles.tsx","../../src/structure/components/pane/usePane.ts","../../src/structure/components/pane/PaneContent.tsx","../../src/structure/util/toLowerCaseNoSpaces.tsx","../../src/structure/components/pane/PaneMenuButtonItem.tsx","../../src/structure/components/pane/PaneContextMenuButton.tsx","../../src/structure/components/pane/PaneFooter.styles.tsx","../../src/structure/components/pane/PaneFooter.tsx","../../src/structure/components/pane/PaneHeader.styles.tsx","../../src/structure/components/pane/PaneHeader.tsx","../../src/structure/components/pane/PaneHeaderActionButton.tsx","../../src/structure/components/pane/PaneLayout.styles.tsx","../../src/structure/components/pane/helpers/_calcPaneResize.ts","../../src/structure/components/pane/helpers/_getDOMPath.ts","../../src/structure/components/pane/helpers/_sortElements.ts","../../src/structure/components/pane/paneLayoutController.ts","../../src/structure/components/pane/PaneLayout.tsx","../../src/structure/menuNodes.ts","../../src/structure/components/IntentButton.tsx","../../src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","../../src/structure/components/MissingSchemaType.tsx","../../src/structure/components/paneItem/PaneItem.tsx","../../src/structure/components/RenderActionCollectionState.tsx","../../src/structure/components/RenderBadgeCollectionState.tsx","../../src/structure/panes/error/ErrorPane.tsx","../../src/structure/panes/loading/getWaitMessages.ts","../../src/structure/panes/loading/LoadingPane.tsx","../../src/structure/panes/document/useDocumentPane.tsx","../../src/structure/panes/document/comments/CommentsWrapper.tsx","../../src/structure/constants.ts","../../src/structure/useStructureTool.ts","../../src/structure/panes/document/constants.ts","../../src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","../../src/structure/panes/document/useDocumentTitle.ts","../../src/structure/panes/document/DocumentOperationResults.tsx","../../src/structure/components/paneItem/helpers.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","../../src/structure/useStructureToolSetting.ts","../../src/structure/panes/document/inspectDialog/constants.ts","../../src/structure/panes/document/inspectDialog/helpers.ts","../../src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","../../src/structure/panes/document/inspectDialog/Search.tsx","../../src/structure/panes/document/inspectDialog/InspectDialog.tsx","../../src/structure/panes/document/documentPanel/banners/Banner.tsx","../../src/structure/panes/document/documentPanel/banners/DeletedDocumentBanners.tsx","../../src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","../../src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","../../src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","../../src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","../../src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","../../src/structure/panes/document/documentPanel/banners/AddToReleaseBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ArchivedReleaseDocumentBanner.tsx","../../src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","../../src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ScheduledReleaseBanner.tsx","../../src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","../../src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","../../src/structure/panes/document/documentPanel/documentViews/FormView.tsx","../../src/structure/panes/document/documentPanel/DocumentPanel.tsx","../../src/structure/panes/document/statusBar/dialogs/constants.ts","../../src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","../../src/structure/panes/document/statusBar/ActionStateDialog.tsx","../../src/structure/panes/document/statusBar/ActionMenuButton.tsx","../../src/structure/documentActions/DeleteAction.tsx","../../src/structure/documentActions/DiscardChangesAction.tsx","../../src/structure/documentActions/DuplicateAction.tsx","../../src/structure/documentActions/HistoryRestoreAction.tsx","../../src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","../../src/structure/documentActions/PublishAction.tsx","../../src/structure/documentActions/UnpublishAction.tsx","../../src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","../../src/structure/panes/document/documentPanel/header/perspective/DocumentPerspectiveList.tsx","../../src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","../../src/structure/components/spacerButton/SpacerButton.tsx","../../src/structure/panes/document/statusBar/DocumentBadges.tsx","../../src/structure/panes/document/timeline/constants.ts","../../src/structure/panes/document/timeline/helpers.ts","../../src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","../../src/structure/panes/document/timeline/timeline.styled.tsx","../../src/structure/panes/document/timeline/timelineI18n.ts","../../src/structure/panes/document/timeline/userAvatarStack.tsx","../../src/structure/panes/document/timeline/timelineItem.tsx","../../src/structure/panes/document/timeline/utils.ts","../../src/structure/panes/document/timeline/timeline.tsx","../../src/structure/panes/document/timeline/TimelineError.tsx","../../src/structure/panes/document/timeline/timelineMenu.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","../../src/structure/panes/document/statusBar/DocumentStatusLine.tsx","../../src/structure/panes/document/statusBar/RevisionStatusLine.tsx","../../src/structure/panes/document/statusBar/useResizeObserver.ts","../../src/structure/panes/document/statusBar/DocumentStatusBar.tsx","../../src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","../../src/structure/panes/document/menuItems.ts","../../src/structure/panes/document/usePreviewUrl.ts","../../src/structure/panes/document/document-layout/DocumentLayoutError.tsx","../../src/structure/panes/document/document-layout/DocumentLayout.tsx","../../src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","../../src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","../../src/structure/panes/document/getInitialValueTemplateOpts.ts","../../src/structure/panes/document/DocumentPaneProvider.tsx","../../src/structure/panes/document/DocumentEventsPane.tsx","../../src/structure/panes/document/DocumentPaneLegacyTimeline.tsx","../../src/structure/panes/document/DocumentPaneProviderWrapper.tsx","../../src/structure/panes/document/useResetHistoryParams.ts","../../src/structure/panes/document/DocumentPane.tsx","../../src/structure/panes/documentList/constants.ts","../../src/structure/panes/documentList/DocumentListPaneContent.tsx","../../src/structure/panes/documentList/helpers.ts","../../src/structure/structureBuilder/util/getExtendedProjection.ts","../../src/structure/panes/documentList/listenSearchQuery.ts","../../src/structure/panes/documentList/useDocumentList.ts","../../src/structure/panes/documentList/DocumentListPane.tsx","../../src/structure/panes/documentList/PaneHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","../../src/structure/panes/documentList/sheetList/SheetListCell.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","../../src/structure/panes/documentList/sheetList/ColumnsControl.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","../../src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","../../src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","../../src/structure/panes/documentList/PaneContainer.tsx","../../src/structure/structureBuilder/SerializeError.ts","../../src/structure/structureBuilder/Sort.ts","../../src/structure/structureBuilder/MenuItem.ts","../../src/structure/structureBuilder/MenuItemGroup.ts","../../src/structure/structureBuilder/util/validateId.ts","../../src/structure/structureBuilder/util/getStructureNodeId.ts","../../src/structure/structureBuilder/Component.ts","../../src/structure/structureBuilder/util/resolveTypeForDocument.ts","../../src/structure/structureBuilder/views/View.ts","../../src/structure/structureBuilder/views/ComponentView.ts","../../src/structure/structureBuilder/views/FormView.ts","../../src/structure/structureBuilder/views/index.ts","../../src/structure/structureBuilder/Document.ts","../../src/structure/structureBuilder/InitialValueTemplateItem.ts","../../src/structure/structureBuilder/Intent.ts","../../src/structure/structureBuilder/Layout.ts","../../src/structure/structureBuilder/GenericList.ts","../../src/structure/structureBuilder/DocumentList.ts","../../src/structure/structureBuilder/List.ts","../../src/structure/structureBuilder/ListItem.ts","../../src/structure/structureBuilder/DocumentListItem.ts","../../src/structure/structureBuilder/DocumentTypeList.ts","../../src/structure/structureBuilder/documentTypeListItems.ts","../../src/structure/structureBuilder/createStructureBuilder.ts","../../src/structure/documentBadges/LiveEditBadge.ts","../../src/structure/getIntentState.ts","../../src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","../../src/structure/panes/document/timeline/events/EventTimelineItem.tsx","../../src/structure/panes/document/timeline/events/PublishedEventMenu.tsx","../../src/structure/panes/document/timeline/events/EventsTimeline.tsx","../../src/structure/panes/document/timeline/events/EventsTimelineMenu.tsx","../../src/structure/panes/document/inspectors/changes/EventsInspector.tsx","../../src/structure/panes/document/inspectors/changes/EventsSelector.tsx","../../src/structure/panes/document/inspectors/changes/HistorySelector.tsx","../../src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","../../src/structure/panes/document/inspectors/changes/index.ts","../../src/structure/panes/document/inspectors/validation/getPathTitles.ts","../../src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","../../src/structure/panes/document/inspectors/validation/index.ts","../../src/structure/router.ts","../../src/structure/structureTool.ts","../../src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n  useActiveReleases,\n  usePerspective,\n  useReleasesIds,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const {data, loading} = useActiveReleases()\n  const {releasesIds} = useReleasesIds(data)\n  const {perspectiveStack, selectedPerspectiveName} = usePerspective()\n\n  const previewStateObservable = useMemo(\n    () =>\n      getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title, {\n        ids: releasesIds,\n        stack: perspectiveStack,\n      }),\n    [props.documentPreviewStore, schemaType, value._id, title, releasesIds, perspectiveStack],\n  )\n\n  const {\n    draft,\n    published,\n    version,\n    versions,\n    isLoading: previewIsLoading,\n  } = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n    version: null,\n    versions: {},\n    selectedPerspectiveName,\n  })\n\n  const isLoading = previewIsLoading || loading\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} versions={versions} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} versions={versions} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({\n        value,\n        draft,\n        published,\n        version,\n        perspective: selectedPerspectiveName,\n      })}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <Button\n                                  mode=\"bleed\"\n                                  icon={CopyIcon}\n                                  tooltipProps={{\n                                    content: t(\n                                      'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                    ),\n                                  }}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onClick={() => {\n                                    navigator.clipboard\n                                      .writeText(documentId)\n                                      .then(() => {\n                                        toast.push({\n                                          status: 'success',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                          ),\n                                        })\n                                      })\n                                      .catch(() => {\n                                        toast.push({\n                                          status: 'error',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title-failed',\n                                          ),\n                                        })\n                                      })\n                                  }}\n                                />\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: React.JSX.Element | (() => React.JSX.Element)\n  ms?: number\n}): React.JSX.Element {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useLayoutEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof React.JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","/**\n * Remove the spaces and lower case the string\n *\n * @param str - string to remove the spaces and lower case\n * @returns str with no spaces and lower case\n */\nexport function toLowerCaseNoSpaces(str: string | undefined): string {\n  if (!str) return ''\n  return str.toLocaleLowerCase().replaceAll(' ', '')\n}\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {toLowerCaseNoSpaces} from '../../util/toLowerCaseNoSpaces'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n        data-testid={`action-${toLowerCaseNoSpaces(node.title)}`}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed || !showTabsOrSubActions ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && (\n                  <Box padding={2}>\n                    <TitleTextSkeleton animated radius={1} size={1} />\n                  </Box>\n                )}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Box hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Box>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const [controller] = useState(() => createPaneLayoutController())\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink\n            {...linkProps}\n            intent={intent.type}\n            params={intent.params}\n            ref={linkRef}\n            searchParams={intent.searchParams}\n          />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {type ReleaseId} from '@sanity/client'\nimport {AddIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useIsReleaseActive,\n  usePerspective,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  templates: Template[],\n  item: InitialValueTemplateItem,\n  version?: ReleaseId,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    version,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n    searchParams: version ? [['perspective', version]] : undefined,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const templates = useTemplates()\n  const {selectedReleaseId} = usePerspective()\n  const isReleaseActive = useIsReleaseActive()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted || !isReleaseActive\n    const intent = getIntent(templates, firstItem, selectedReleaseId)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={\n            disabled\n              ? {content: tCore('new-document.disabled-release.tooltip')}\n              : {content: t('pane-header.create-new-button.tooltip')}\n          }\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          disabled={!isReleaseActive}\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={\n            isReleaseActive\n              ? {content: t('pane-header.create-new-button.tooltip')}\n              : {content: tCore('new-document.disabled-release.tooltip')}\n          }\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(templates, item, selectedReleaseId)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  searchParams={intent.searchParams}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useEditState,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  // Preloads the edit state on hover, using concurrent rendering with `startTransition` so preloads can be interrupted and not block rendering\n  const [preloading, setPreload] = useState(false)\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const handleMouseEnter = useCallback(() => {\n    timeoutRef.current = setTimeout(() => startTransition(() => setPreload(true)), 400)\n  }, [])\n  const handleMouseLeave = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    startTransition(() => setPreload(false))\n  }, [])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={ChildLink as FIXME}\n      // @ts-expect-error - `childId` is a valid prop on `ChildLink`\n      childId={id}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n      {preloading && schemaType?.name && value && isSanityDocument(value) && (\n        <PreloadDocumentPane documentId={id} documentType={schemaType.name} />\n      )}\n    </PreviewCard>\n  )\n}\n\nfunction PreloadDocumentPane(props: {documentId: string; documentType: string}) {\n  const {documentId, documentType} = props\n  // Preload the edit state for the document, and keep it alive until mouse leave\n  useEditState(documentId, documentType)\n\n  return null\n}\nPreloadDocumentPane.displayName = 'PreloadDocumentPane'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n  usePerspective,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n      releaseId={selectedReleaseId}\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = Object.freeze({})\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  useEffect(() => {\n    if (menuItems.length !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItems[i]\n      }\n\n      setMenuItems(newFieldActions)\n    }\n  }, [len, menuItems])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\nDocumentInspectorMenuItemsResolver.displayName = 'DocumentInspectorMenuItemsResolver'\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, displayed} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const subscribed = Boolean(displayed)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: displayed,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!displayed) {\n    return {\n      error: undefined,\n      title: t('panes.document-header-title.new.text', {\n        schemaType: schemaType?.title || schemaType?.name,\n      }),\n    }\n  }\n\n  if (error) {\n    return {\n      error: t('panes.document-list-pane.error.text', {error: error.message}),\n      title: undefined,\n    }\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Resizable} from 'sanity'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(\n  props: DocumentInspectorPanelProps,\n): React.JSX.Element | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const Component = inspector.component\n  const element = (\n    <Component onClose={handleClose} documentId={documentId} documentType={documentType} />\n  )\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        resizerPosition=\"left\"\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import {JsonInspector} from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JsonInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof React.JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n  paddingY?: number\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', paddingY = 2, ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={paddingY} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {DocumentRemoveIcon, ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  isDraftPerspective,\n  isPublishedPerspective,\n  type ReleaseDocument,\n  Translate,\n  useDocumentOperation,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeletedDocumentBanners() {\n  const {isDeleted, isDeleting} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n\n  if (\n    !isPublishedPerspective(selectedPerspective) &&\n    !isDraftPerspective(selectedPerspective) &&\n    selectedPerspective.state === 'archived'\n  ) {\n    return <ArchivedReleaseBanner release={selectedPerspective as ReleaseDocument} />\n  }\n  if (isDeleted && !isDeleting) return <DeletedDocumentBanner />\n}\n\nfunction DeletedDocumentBanner() {\n  const {documentId, documentType, lastNonDeletedRevId} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n\n  const handleRestore = useCallback(() => {\n    if (lastNonDeletedRevId) {\n      restore.execute(lastNonDeletedRevId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, lastNonDeletedRevId])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        lastNonDeletedRevId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n\nconst ArchivedReleaseBanner = ({release}: {release: ReleaseDocument}) => {\n  const {t} = useTranslation()\n\n  return (\n    <Banner\n      tone=\"caution\"\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate\n            t={t}\n            i18nKey=\"banners.deleted-release-banner.text\"\n            values={{title: release.metadata?.title}}\n          />\n        </Text>\n      }\n      data-testid=\"deleted-release-banner\"\n      icon={DocumentRemoveIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {\n      draft: DocumentAvailability\n      published: DocumentAvailability\n      version?: DocumentAvailability\n    }\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {selectedReleaseId} = usePerspective()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n          {\n            version: selectedReleaseId,\n          },\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published, version}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                  ...(version?.availability\n                    ? {\n                        version: version.availability,\n                      }\n                    : {}),\n                },\n                refValue: pathGet<Reference>(\n                  version?.snapshot || draft.snapshot || published.snapshot,\n                  parentRefPath,\n                )?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [selectedReleaseId, documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {Flex, Text} from '@sanity/ui'\nimport {type CSSProperties, useCallback} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  LATEST,\n  type ReleaseDocument,\n  Translate,\n  useTranslation,\n  useVersionOperations,\n} from 'sanity'\nimport {structureLocaleNamespace} from 'sanity/structure'\n\nimport {Button} from '../../../../../ui-components'\nimport {Banner} from './Banner'\n\nexport function AddToReleaseBanner({\n  documentId,\n  currentRelease,\n  value,\n}: {\n  documentId: string\n  currentRelease: ReleaseDocument\n  value?: Record<string, unknown>\n}): React.JSX.Element {\n  const tone = getReleaseTone(currentRelease ?? LATEST)\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n\n  const {createVersion} = useVersionOperations()\n\n  const handleAddToRelease = useCallback(async () => {\n    if (currentRelease._id) {\n      await createVersion(getReleaseIdFromReleaseDocumentId(currentRelease._id), documentId, value)\n    }\n  }, [createVersion, currentRelease._id, documentId, value])\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Translate\n              i18nKey=\"banners.release.not-in-release\"\n              t={t}\n              values={{\n                title:\n                  currentRelease?.metadata?.title || tCore('release.placeholder-untitled-release'),\n              }}\n              components={{\n                Label: ({children}) => {\n                  return (\n                    <span\n                      style={\n                        {\n                          color: `var(--card-badge-${tone ?? 'default'}-fg-color)`,\n                          backgroundColor: `var(--card-badge-${tone ?? 'default'}-bg-color)`,\n                          borderRadius: 3,\n                          textDecoration: 'none',\n                          padding: '0px 2px',\n                          fontWeight: 500,\n                        } as CSSProperties\n                      }\n                    >\n                      {children}\n                    </span>\n                  )\n                },\n              }}\n            />\n          </Text>\n\n          <Button\n            text={t('banners.release.action.add-to-release')}\n            tone={tone}\n            onClick={handleAddToRelease}\n          />\n        </Flex>\n      }\n    />\n  )\n}\n","import {Flex, Text} from '@sanity/ui'\nimport {useMemo} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  Translate,\n  useArchivedReleases,\n  useTranslation,\n  VersionInlineBadge,\n} from 'sanity'\nimport {structureLocaleNamespace, usePaneRouter} from 'sanity/structure'\n\nimport {Banner} from './Banner'\n\nexport function ArchivedReleaseDocumentBanner(): React.JSX.Element {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {data: archivedReleases} = useArchivedReleases()\n\n  const {params, setParams} = usePaneRouter()\n  const handleGoBack = () => {\n    setParams({\n      ...params,\n      rev: params?.historyEvent || undefined,\n      since: undefined,\n      historyVersion: undefined,\n    })\n  }\n\n  const release = useMemo(() => {\n    return archivedReleases.find(\n      (r) => getReleaseIdFromReleaseDocumentId(r._id) === params?.historyVersion,\n    )\n  }, [archivedReleases, params?.historyVersion])\n\n  const description =\n    release?.state === 'published'\n      ? 'banners.published-release.description'\n      : 'banners.archived-release.description'\n\n  return (\n    <Banner\n      tone=\"caution\"\n      paddingY={2}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Translate\n              t={t}\n              i18nKey={description}\n              components={{\n                VersionBadge: ({children}) => {\n                  if (!release) return children\n                  return (\n                    <VersionInlineBadge $tone={getReleaseTone(release)}>\n                      {release?.metadata.title}\n                    </VersionInlineBadge>\n                  )\n                },\n              }}\n            />\n          </Text>\n        </Flex>\n      }\n      action={{\n        text: 'Go back to published version',\n        onClick: handleGoBack,\n      }}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'LiveEdit Draft Resolved',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {type ObjectSchemaType, Translate, useDocumentOperation, useTranslation} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): React.JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  return (\n    <Banner\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={2} paddingTop={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {LockIcon} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {\n  formatRelativeLocalePublishDate,\n  getReleaseTone,\n  LATEST,\n  type ReleaseDocument,\n  Translate,\n  useTranslation,\n} from 'sanity'\n\nimport {Banner} from './Banner'\n\nexport function ScheduledReleaseBanner({\n  currentRelease,\n}: {\n  currentRelease: ReleaseDocument\n}): React.JSX.Element {\n  const tone = getReleaseTone(currentRelease ?? LATEST)\n\n  const {t: tCore} = useTranslation()\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Flex align=\"center\" justify=\"center\" gap={2}>\n              <LockIcon />{' '}\n              <Translate\n                t={tCore}\n                i18nKey=\"release.banner.scheduled-for-publishing-on\"\n                values={{\n                  date: formatRelativeLocalePublishDate(currentRelease),\n                }}\n              />\n            </Flex>\n          </Text>\n        </Flex>\n      }\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const [patchChannel] = useState(() => createPatchChannel())\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType, selectedReleaseId)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel, selectedReleaseId])\n\n  const hasRev = Boolean(value?._rev)\n  const handleInitialValue = useEffectEvent(() => {\n    // this is a workaround for an issue that caused the document pushed to withDocument to get\n    // stuck at the first initial value.\n    // This effect is triggered only when the document goes from not having a revision, to getting one\n    // so it will kick in as soon as the document is received from the backend\n    patchChannel.publish({\n      type: 'mutation',\n      patches: [],\n      snapshot: value,\n    })\n  })\n  useEffect(() => {\n    if (hasRev) {\n      handleInitialValue()\n    }\n    // React to changes in hasRev only\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  getVersionFromId,\n  isReleaseDocument,\n  isReleaseScheduledOrScheduling,\n  type ReleaseDocument,\n  ScrollContainer,\n  usePerspective,\n  VirtualizerScrollInstanceProvider,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanners,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {AddToReleaseBanner} from './banners/AddToReleaseBanner'\nimport {ArchivedReleaseDocumentBanner} from './banners/ArchivedReleaseDocumentBanner'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {ScheduledReleaseBanner} from './banners/ScheduledReleaseBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n  } = useDocumentPane()\n  const {params} = usePaneRouter()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const [_portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? _portalElement || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(() => {\n    if (activeView.type === 'component' && activeView.component) {\n      const ActiveViewComponent = activeView.component\n      return (\n        <ActiveViewComponent\n          document={{\n            draft: editState?.draft || null,\n            displayed: displayed || value,\n            historical: displayed,\n            published: editState?.published || null,\n          }}\n          documentId={documentId}\n          options={activeView.options}\n          schemaType={schemaType}\n        />\n      )\n    }\n    return false\n  }, [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value])\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n  const {selectedPerspective, selectedReleaseId} = usePerspective()\n\n  const banners = useMemo(() => {\n    if (params?.historyVersion) {\n      return <ArchivedReleaseDocumentBanner />\n    }\n    const isCreatingDocument = displayed && !displayed._createdAt\n    const isScheduledRelease =\n      isReleaseDocument(selectedPerspective) && isReleaseScheduledOrScheduling(selectedPerspective)\n\n    if (isScheduledRelease) {\n      return <ScheduledReleaseBanner currentRelease={selectedPerspective as ReleaseDocument} />\n    }\n    if (\n      displayed?._id &&\n      getVersionFromId(displayed._id) !== selectedReleaseId &&\n      ready &&\n      !isCreatingDocument\n    ) {\n      return (\n        <AddToReleaseBanner\n          documentId={value._id}\n          currentRelease={selectedPerspective as ReleaseDocument}\n          value={displayed || undefined}\n        />\n      )\n    }\n\n    if (\n      activeView.type === 'form' &&\n      isLiveEdit &&\n      ready &&\n      editState?.draft?._id &&\n      !selectedReleaseId\n    ) {\n      return (\n        <DraftLiveEditBanner\n          displayed={displayed}\n          documentId={documentId}\n          schemaType={schemaType}\n        />\n      )\n    }\n\n    if (activeView.type !== 'form' || isPermissionsLoading || !ready) return null\n\n    return (\n      <>\n        {!permissions?.granted && (\n          <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n        )}\n        <ReferenceChangedBanner />\n        <DeprecatedDocumentTypeBanner />\n        <DeletedDocumentBanners />\n      </>\n    )\n  }, [\n    params?.historyVersion,\n    displayed,\n    selectedPerspective,\n    selectedReleaseId,\n    ready,\n    activeView.type,\n    isLiveEdit,\n    editState?.draft?._id,\n    isPermissionsLoading,\n    permissions?.granted,\n    requiredPermission,\n    value._id,\n    documentId,\n    schemaType,\n  ])\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {banners}\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={setPortalElement} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\nDocumentPanel.displayName = 'DocumentPanel'\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete, release}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type, release)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n  release,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type, release)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete, release}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type, release)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({\n  id,\n  type,\n  revision,\n  onComplete,\n  release,\n}) => {\n  const {restore} = useDocumentOperation(id, type, release)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published, release} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (release) {\n      // Version documents are not publishable by this action, they should be published as part of a release\n      return null\n    }\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    release,\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n  release,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (release) {\n      // Version documents cannot be unpublished by this action, they should be unpublished as part of a release\n      return null\n    }\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    release,\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable no-warning-comments */\n/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  usePerspective,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {toLowerCaseNoSpaces} from '../../../util/toLowerCaseNoSpaces'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  const sideMenuItems = useMemo(() => {\n    return selectedReleaseId ? [firstActionState, ...menuActionStates] : menuActionStates\n  }, [selectedReleaseId, firstActionState, menuActionStates])\n\n  /* Version / Bundling handling */\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && !selectedReleaseId && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${toLowerCaseNoSpaces(firstActionState.label)}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {/* if it's in version we always only want to show the items on the side menu and not on the main action */}\n      {((showMenu && menuActionStates.length > 0) || selectedReleaseId) && (\n        <ActionMenuButton actionStates={sideMenuItems} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, revisionId: revision} = useDocumentPane()\n\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): React.JSX.Element {\n  const {connectionState, schemaType, title, value: documentValue} = useDocumentPane()\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo} from 'react'\nimport {\n  formatRelativeLocalePublishDate,\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  getVersionFromId,\n  isDraftId,\n  isPublishedId,\n  isPublishedPerspective,\n  isReleaseScheduledOrScheduling,\n  isVersionId,\n  type ReleaseDocument,\n  Translate,\n  useActiveReleases,\n  useArchivedReleases,\n  useDateTimeFormat,\n  type UseDateTimeFormatOptions,\n  useDocumentVersions,\n  usePerspective,\n  useSchema,\n  useSetPerspective,\n  useTranslation,\n  VersionChip,\n} from 'sanity'\nimport {usePaneRouter} from 'sanity/structure'\n\nimport {isLiveEditEnabled} from '../../../../../components/paneItem/helpers'\nimport {useDocumentPane} from '../../../useDocumentPane'\n\ntype FilterReleases = {\n  notCurrentReleases: ReleaseDocument[]\n  currentReleases: ReleaseDocument[]\n  inCreation: ReleaseDocument | null\n}\n\nconst TooltipContent = ({release}: {release: ReleaseDocument}) => {\n  const {t} = useTranslation()\n\n  if (release.metadata.releaseType === 'asap') {\n    return <Text size={1}>{t('release.type.asap')}</Text>\n  }\n  if (release.metadata.releaseType === 'scheduled') {\n    const isActive = release.state === 'active'\n\n    return (\n      release.metadata.intendedPublishAt && (\n        <Text size={1}>\n          {isActive ? (\n            <Translate\n              t={t}\n              i18nKey=\"release.chip.tooltip.intended-for-date\"\n              values={{\n                date: formatRelativeLocalePublishDate(release),\n              }}\n            />\n          ) : (\n            <Translate\n              t={t}\n              i18nKey=\"release.chip.tooltip.scheduled-for-date\"\n              values={{\n                date: formatRelativeLocalePublishDate(release),\n              }}\n            />\n          )}\n        </Text>\n      )\n    )\n  }\n\n  if (release.metadata.releaseType === 'undecided') {\n    return <Text size={1}>{t('release.type.undecided')}</Text>\n  }\n  return null\n}\n\nconst DATE_TIME_FORMAT: UseDateTimeFormatOptions = {\n  dateStyle: 'medium',\n  timeStyle: 'short',\n}\n\nexport const DocumentPerspectiveList = memo(function DocumentPerspectiveList() {\n  const {selectedReleaseId, selectedPerspectiveName} = usePerspective()\n  const {t} = useTranslation()\n  const setPerspective = useSetPerspective()\n  const {params} = usePaneRouter()\n  const dateTimeFormat = useDateTimeFormat(DATE_TIME_FORMAT)\n  const {data: releases, loading} = useActiveReleases()\n  const {data: archivedReleases} = useArchivedReleases()\n  const schema = useSchema()\n  const {editState, displayed, documentType, documentId} = useDocumentPane()\n  const {data: documentVersions} = useDocumentVersions({documentId})\n  const isCreatingDocument = displayed && !displayed._createdAt\n\n  const filteredReleases: FilterReleases = useMemo(() => {\n    if (!documentVersions) return {notCurrentReleases: [], currentReleases: [], inCreation: null}\n    // Gets the releases ids from the document versions, it means, the releases that the document belongs to\n    const releasesIds = documentVersions.map((id) => getVersionFromId(id))\n    const activeReleases = releases.reduce(\n      (acc: FilterReleases, release) => {\n        const versionDocExists = releasesIds.includes(\n          getReleaseIdFromReleaseDocumentId(release._id),\n        )\n        const releaseId = getReleaseIdFromReleaseDocumentId(release._id)\n        const isCreatingThisVersion =\n          isCreatingDocument &&\n          releaseId === getVersionFromId(displayed._id || '') &&\n          releaseId === selectedReleaseId\n\n        if (isCreatingThisVersion) {\n          acc.inCreation = release\n        } else if (versionDocExists) {\n          acc.currentReleases.push(release)\n        } else {\n          acc.notCurrentReleases.push(release)\n        }\n        return acc\n      },\n      {notCurrentReleases: [], currentReleases: [], inCreation: null},\n    )\n\n    // without historyVersion, version is not in an archived release\n    if (!params?.historyVersion) return activeReleases\n\n    const archivedRelease = archivedReleases.find(\n      (r) => getReleaseIdFromReleaseDocumentId(r._id) === params?.historyVersion,\n    )\n\n    // only for explicitly archived releases; published releases use published perspective\n    if (archivedRelease?.state === 'archived') {\n      activeReleases.currentReleases.push(archivedRelease)\n    }\n\n    return activeReleases\n  }, [\n    archivedReleases,\n    isCreatingDocument,\n    displayed?._id,\n    documentVersions,\n    params?.historyVersion,\n    releases,\n    selectedReleaseId,\n  ])\n\n  const handlePerspectiveChange = useCallback(\n    (perspective: Parameters<typeof setPerspective>[0]) => () => {\n      setPerspective(perspective)\n    },\n    [setPerspective],\n  )\n\n  const schemaType = schema.get(documentType)\n  const isLiveEdit = schemaType ? isLiveEditEnabled(schemaType) : false\n\n  const isPublishedChipDisabled = useMemo(() => {\n    // If it's a live edit document the only option to edit it is through\n    // the published perspective, users should be able to select it.\n    if (isLiveEdit && !selectedReleaseId) return false\n\n    // If it's not live edit, we want to check for the existence of the published doc.\n    return !editState?.published\n  }, [isLiveEdit, selectedReleaseId, editState?.published])\n\n  const getReleaseChipState = useCallback(\n    (release: ReleaseDocument): {selected: boolean; disabled?: boolean} => {\n      if (!params?.historyVersion)\n        return {\n          selected:\n            getReleaseIdFromReleaseDocumentId(release._id) ===\n            getVersionFromId(displayed?._id || ''),\n        }\n\n      const isReleaseHistoryMatch =\n        getReleaseIdFromReleaseDocumentId(release._id) === params.historyVersion\n\n      return {selected: isReleaseHistoryMatch, disabled: isReleaseHistoryMatch}\n    },\n    [displayed?._id, params?.historyVersion],\n  )\n\n  const isPublishSelected: boolean = useMemo(() => {\n    /**\n     * The publish perspective is selected when:\n     *  - the document is live edit and there is no draft\n     *  - the document is published and the selected perspective is published\n     */\n    if (isLiveEdit && !editState?.draft?._id && !selectedReleaseId) return true\n    if (\n      isPublishedId(displayed?._id || '') &&\n      isPublishedPerspective(selectedPerspectiveName || '')\n    ) {\n      return true\n    }\n    return false\n  }, [\n    displayed?._id,\n    editState?.draft?._id,\n    isLiveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n  ])\n\n  const isDraftSelected: boolean = useMemo(() => {\n    const displayedId = displayed?._id || ''\n    /** the draft is selected when:\n     * not viewing a historical version,\n     * when the document displayed is a draft,\n     * when the perspective is null,\n     * when the document is not published and the displayed version is draft,\n     * when there is no draft (new document),\n     */\n    if (isPublishSelected) return false\n    if (params?.historyVersion) return false\n    if (selectedPerspectiveName) return false\n    if (isVersionId(displayedId)) return false\n    if (isDraftId(displayedId)) return true\n    if (\n      isPublishedId(displayedId) &&\n      editState?.published &&\n      isPublishedPerspective(selectedPerspectiveName || '')\n    )\n      return false\n    return true\n  }, [\n    displayed?._id,\n    editState?.published,\n    isPublishSelected,\n    params?.historyVersion,\n    selectedPerspectiveName,\n  ])\n\n  const isDraftDisabled: boolean = useMemo(() => {\n    // Draft is disabled when we are creating a new document inside a release\n    // or when the document is live edit and there is no draft\n    if (editState?.draft) return false\n\n    if (isCreatingDocument && selectedReleaseId) return true\n    if (isLiveEdit) return true\n    return false\n  }, [editState?.draft, isCreatingDocument, isLiveEdit, selectedReleaseId])\n\n  return (\n    <>\n      <VersionChip\n        tooltipContent={\n          <Text size={1}>\n            {editState?.published && editState?.published?._updatedAt ? (\n              <Translate\n                t={t}\n                i18nKey=\"release.chip.tooltip.published-date\"\n                values={{date: dateTimeFormat.format(new Date(editState?.published._updatedAt))}}\n              />\n            ) : (\n              <>{t('release.chip.tooltip.not-published')}</>\n            )}\n          </Text>\n        }\n        disabled={isPublishedChipDisabled}\n        onClick={handlePerspectiveChange('published')}\n        selected={isPublishSelected}\n        text={t('release.chip.published')}\n        tone=\"positive\"\n        contextValues={{\n          documentId: editState?.published?._id || editState?.id || '',\n          menuReleaseId: editState?.published?._id || editState?.id || '',\n          releases: filteredReleases.notCurrentReleases,\n          releasesLoading: loading,\n          documentType,\n          fromRelease: 'published',\n          isVersion: false,\n          disabled: !editState?.published,\n        }}\n      />\n      <VersionChip\n        tooltipContent={\n          <Text size={1}>\n            {editState?.draft ? (\n              <>\n                {editState?.draft._updatedAt ? (\n                  <Translate\n                    t={t}\n                    i18nKey=\"release.chip.tooltip.edited-date\"\n                    values={{date: dateTimeFormat.format(new Date(editState?.draft._updatedAt))}}\n                  />\n                ) : (\n                  <Translate\n                    t={t}\n                    i18nKey=\"release.chip.tooltip.created-date\"\n                    values={{date: dateTimeFormat.format(new Date(editState?.draft._createdAt))}}\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                {isLiveEdit\n                  ? t('release.chip.tooltip.draft-disabled.live-edit')\n                  : t('release.chip.tooltip.no-edits')}\n              </>\n            )}\n          </Text>\n        }\n        selected={isDraftSelected}\n        disabled={isDraftDisabled}\n        text={t('release.chip.draft')}\n        tone={editState?.draft ? 'caution' : 'neutral'}\n        onClick={handlePerspectiveChange('drafts')}\n        contextValues={{\n          documentId: editState?.draft?._id || editState?.published?._id || editState?.id || '',\n          menuReleaseId: editState?.draft?._id || editState?.published?._id || editState?.id || '',\n          releases: filteredReleases.notCurrentReleases,\n          releasesLoading: loading,\n          documentType: documentType,\n          fromRelease: 'draft',\n          isVersion: false,\n          disabled: !editState?.draft,\n        }}\n      />\n      {filteredReleases.inCreation && (\n        <VersionChip\n          tooltipContent={<TooltipContent release={filteredReleases.inCreation} />}\n          selected\n          onClick={() => {}}\n          locked={false}\n          tone={getReleaseTone(filteredReleases.inCreation)}\n          text={\n            filteredReleases.inCreation.metadata.title || t('release.placeholder-untitled-release')\n          }\n          contextValues={{\n            disabled: true, // disable the chip context menu, this one is in creation\n            documentId: displayed?._id || '',\n            menuReleaseId: filteredReleases.inCreation._id,\n            releases: filteredReleases.notCurrentReleases,\n            releasesLoading: loading,\n            documentType,\n            fromRelease: getReleaseIdFromReleaseDocumentId(filteredReleases.inCreation._id),\n            releaseState: filteredReleases.inCreation.state,\n            isVersion: true,\n          }}\n        />\n      )}\n\n      {displayed &&\n        filteredReleases.currentReleases?.map((release) => (\n          <VersionChip\n            key={release._id}\n            tooltipContent={<TooltipContent release={release} />}\n            {...getReleaseChipState(release)}\n            onClick={handlePerspectiveChange(getReleaseIdFromReleaseDocumentId(release._id))}\n            text={release.metadata.title || t('release.placeholder-untitled-release')}\n            tone={getReleaseTone(release)}\n            locked={isReleaseScheduledOrScheduling(release)}\n            contextValues={{\n              documentId: displayed?._id || '',\n              menuReleaseId: release._id,\n              releases: filteredReleases.notCurrentReleases,\n              releasesLoading: loading,\n              documentType: documentType,\n              fromRelease: getReleaseIdFromReleaseDocumentId(release._id),\n              releaseState: release.state,\n              isVersion: true,\n            }}\n          />\n        ))}\n    </>\n  )\n})\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Box, Card, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\nimport {DocumentPerspectiveList} from './perspective/DocumentPerspectiveList'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    const title = useMemo(() => <DocumentHeaderTitle />, [])\n    const tabs = useMemo(() => showTabs && <DocumentHeaderTabs />, [showTabs])\n    const backButton = useMemo(\n      () =>\n        showBackButton && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: t('pane-header.back-button.text')}}\n          />\n        ),\n      [BackLink, showBackButton, t],\n    )\n    const renderedActions = useMemo(\n      () => (\n        <Flex align=\"center\" gap={1}>\n          {unstable_languageFilter.length > 0 && (\n            <>\n              {unstable_languageFilter.map((LanguageFilterComponent, idx) => {\n                return (\n                  <LanguageFilterComponent\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`language-filter-${idx}`}\n                    schemaType={schemaType}\n                  />\n                )\n              })}\n            </>\n          )}\n\n          {menuButtonNodes.map((item) => (\n            <PaneHeaderActionButton key={item.key} node={item} />\n          ))}\n          {editState && (\n            <RenderActionCollectionState\n              actions={actions}\n              actionProps={editState}\n              group=\"paneActions\"\n            >\n              {renderPaneActions}\n            </RenderActionCollectionState>\n          )}\n\n          {showSplitPaneButton && (\n            <Button\n              aria-label={t('buttons.split-pane-button.aria-label')}\n              icon={SplitVerticalIcon}\n              key=\"split-pane-button\"\n              mode=\"bleed\"\n              onClick={onPaneSplit}\n              tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n            />\n          )}\n\n          {showSplitPaneCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              onClick={onPaneClose}\n              tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n            />\n          )}\n\n          {showPaneGroupCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n              as={BackLink}\n            />\n          )}\n        </Flex>\n      ),\n      [\n        BackLink,\n        actions,\n        editState,\n        menuButtonNodes,\n        onPaneClose,\n        onPaneSplit,\n        renderPaneActions,\n        schemaType,\n        showPaneGroupCloseButton,\n        showSplitPaneButton,\n        showSplitPaneCloseButton,\n        t,\n        unstable_languageFilter,\n      ],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <Card hidden={collapsed} style={{lineHeight: 0}}>\n          <Flex>\n            <Flex flex={1} wrap=\"wrap\" gap={1} padding={3} paddingBottom={0}>\n              <DocumentPerspectiveList />\n            </Flex>\n\n            <Box flex=\"none\" padding={3} paddingBottom={0}>\n              {renderedActions}\n            </Box>\n          </Flex>\n        </Card>\n\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={title}\n          tabs={tabs}\n          tabIndex={tabIndex}\n          backButton={backButton}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  AvatarSkeleton,\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const IconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{IconComponent && <IconComponent />}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError({versionError}: {versionError?: boolean}) {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {versionError\n            ? t('timeline.error.load-document-changes-version-title')\n            : t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {versionError\n            ? t('timeline.error.load-document-changes-version-description')\n            : t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForRev(revChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForSince(sinceChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore?.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {\n  // eslint-disable-next-line no-restricted-imports\n  Button,\n  Flex,\n  Skeleton,\n  Text,\n} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {useEffect, useLayoutEffect, useMemo, useState} from 'react'\nimport {\n  AvatarSkeleton,\n  isPublishedPerspective,\n  TIMELINE_ITEM_I18N_KEY_MAPPING,\n  useEvents,\n  usePerspective,\n  UserAvatar,\n  useRelativeTime,\n  useSource,\n  useSyncState,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\n\nimport {HISTORY_INSPECTOR_NAME} from '../constants'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING as TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY} from '../timeline'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst RELATIVE_TIME_OPTIONS = {\n  minimal: true,\n  useTemporalPhrase: true,\n} as const\n\nconst MotionButton = motion.create(Button)\n\nconst ButtonSkeleton = () => {\n  return (\n    <Flex align=\"center\" gap={3} paddingLeft={1} paddingRight={2} paddingY={2}>\n      <div style={{margin: -5}}>\n        <AvatarSkeleton $size={0} animated />\n      </div>\n      <Skeleton animated style={{width: '80px', height: '15px'}} radius={2} />\n    </Flex>\n  )\n}\n\nconst DocumentStatusButton = ({\n  author,\n  translationKey,\n  timestamp = '',\n}: {\n  author: string\n  translationKey: string\n  timestamp?: string\n}) => {\n  const {onHistoryOpen, inspector, onHistoryClose} = useDocumentPane()\n  const {t} = useTranslation()\n  const relativeTime = useRelativeTime(timestamp, RELATIVE_TIME_OPTIONS)\n\n  return (\n    <MotionButton\n      data-testid=\"pane-footer-document-status\"\n      animate={{opacity: 1}}\n      initial={{opacity: 0}} // Width of the skeleton\n      mode=\"bleed\"\n      onClick={inspector?.name === HISTORY_INSPECTOR_NAME ? onHistoryClose : onHistoryOpen}\n      padding={2}\n      muted\n    >\n      <Flex align=\"center\" flex=\"none\" gap={3}>\n        {author && (\n          <div style={{margin: -5}}>\n            <UserAvatar user={author} size={0} />\n          </div>\n        )}\n        <Text muted size={1}>\n          {t(translationKey)} {relativeTime}\n        </Text>\n      </Flex>\n    </MotionButton>\n  )\n}\n\nconst FallbackStatus = () => {\n  const {editState} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n\n  const status = useMemo(() => {\n    if (isPublishedPerspective(selectedPerspective) && editState?.published?._updatedAt) {\n      return {\n        translationKey: TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion,\n        timestamp: editState.published._updatedAt,\n      }\n    }\n    if (editState?.version?._updatedAt) {\n      return {\n        translationKey:\n          editState?.version?._updatedAt === editState?.version?._createdAt\n            ? TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion\n            : TIMELINE_ITEM_I18N_KEY_MAPPING.editDocumentVersion,\n        timestamp: editState.version._updatedAt,\n      }\n    }\n    if (editState?.draft?._updatedAt) {\n      return {\n        translationKey:\n          editState?.draft?._updatedAt === editState?.draft?._createdAt\n            ? TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion\n            : TIMELINE_ITEM_I18N_KEY_MAPPING.editDocumentVersion,\n        timestamp: editState.draft._updatedAt,\n      }\n    }\n    return null\n  }, [\n    selectedPerspective,\n    editState?.published?._updatedAt,\n    editState?.version?._updatedAt,\n    editState?.version?._createdAt,\n    editState?.draft?._updatedAt,\n    editState?.draft?._createdAt,\n  ])\n  if (!status) {\n    return null\n  }\n  return (\n    <DocumentStatusButton\n      author=\"\"\n      translationKey={status.translationKey}\n      timestamp={status.timestamp}\n    />\n  )\n}\n\nconst EventsStatus = () => {\n  const {events, loading} = useEvents()\n  const event = events?.[0]\n\n  if (!event && loading) {\n    return <ButtonSkeleton />\n  }\n  if (!event) {\n    return <FallbackStatus />\n  }\n\n  return (\n    <DocumentStatusButton\n      author={event.author}\n      translationKey={TIMELINE_ITEM_I18N_KEY_MAPPING[event.type]}\n      timestamp={event.timestamp}\n    />\n  )\n}\n\nconst TimelineStatus = () => {\n  const {timelineStore} = useDocumentPane()\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const event = chunks?.[0]\n\n  if (!event && loading) {\n    return <ButtonSkeleton />\n  }\n  if (!event) {\n    return <FallbackStatus />\n  }\n\n  const author = Array.from(event.authors)[0]\n  return (\n    <DocumentStatusButton\n      author={author}\n      translationKey={TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY[event.type]}\n      timestamp={event.endTimestamp}\n    />\n  )\n}\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\nexport function DocumentStatusLine() {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n  const source = useSource()\n  const eventsEnabled = source.beta?.eventsAPI?.documents\n\n  const syncState = useSyncState(documentId, documentType, editState?.release)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  if (eventsEnabled) {\n    return <EventsStatus />\n  }\n\n  return <TimelineStatus />\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): React.JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>\n            <RestoreIcon />\n          </Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useMemo, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isPublishedPerspective,\n  isReleaseDocument,\n  isSanityCreateLinked,\n  usePerspective,\n  useSanityCreateConfig,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, revisionId, onChange: onDocumentChange} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  const showingRevision = Boolean(revisionId)\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = useMemo(() => {\n    const isReady = Boolean(editState?.ready && typeof collapsed === 'boolean')\n    if (selectedPerspective) {\n      if (isPublishedPerspective(selectedPerspective)) {\n        return isReady && Boolean(editState?.published)\n      }\n      if (isReleaseDocument(selectedPerspective)) {\n        return isReady && Boolean(editState?.version)\n      }\n    }\n    return isReady\n  }, [collapsed, editState?.published, editState?.ready, editState?.version, selectedPerspective])\n\n  let actions: React.JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? <RevisionStatusLine /> : <DocumentStatusLine />}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as: As = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return (\n    <As id={id} onKeyDown={handleKeyDown} tabIndex={-1} {...rest} ref={rootRef}>\n      {children}\n      {activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      )}\n    </As>\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  type Path,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n    isInitialValueLoading,\n    ready,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const {\n    documentLinkedBannerContent: CreateLinkedBannerContent,\n    startInCreateBanner: StartInCreateBanner,\n  } = useSanityCreateConfig().components ?? {}\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  const portalElements = useMemo(\n    () => ({[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}),\n    [documentPanelPortalElement],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider __unstable_elements={portalElements}>\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              {StartInCreateBanner && (\n                <ShowWhenPaneOpen>\n                  <StartInCreateBanner\n                    document={value}\n                    documentId={documentId}\n                    documentType={schemaType}\n                    documentReady={ready}\n                    isInitialValueLoading={!!isInitialValueLoading}\n                    panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n                  />\n                </ShowWhenPaneOpen>\n              )}\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useInsertionEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentActionsContext,\n  type DocumentActionsVersionType,\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  getVersionFromId,\n  isPublishedPerspective,\n  isReleaseDocument,\n  isReleaseScheduledOrScheduling,\n  isSanityCreateLinkedDocument,\n  isVersionId,\n  type OnPathFocusPayload,\n  type PartialContext,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePerspective,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {\n  type DocumentPaneProviderProps as DocumentPaneProviderWrapperProps,\n  type HistoryStoreProps,\n} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\ninterface DocumentPaneProviderProps extends DocumentPaneProviderWrapperProps {\n  historyStore: HistoryStoreProps\n}\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath, forcedVersion, historyStore} = props\n  const {\n    store: timelineStore,\n    error: timelineError,\n    ready: timelineReady,\n    revisionDocument,\n    onOlderRevision,\n    sinceDocument,\n    isPristine,\n    revisionId,\n    lastNonDeletedRevId,\n  } = historyStore\n\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const telemetry = useTelemetry()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n\n  const perspective = usePerspective()\n\n  const {isReleaseLocked, selectedReleaseId, selectedPerspectiveName} = useMemo(() => {\n    // TODO: COREL - Remove this after updating sanity-assist to use <PerspectiveProvider>\n    if (forcedVersion) {\n      return forcedVersion\n    }\n    return {\n      selectedPerspectiveName: perspective.selectedPerspectiveName,\n      selectedReleaseId: perspective.selectedReleaseId,\n      isReleaseLocked: isReleaseDocument(perspective.selectedPerspective)\n        ? isReleaseScheduledOrScheduling(perspective.selectedPerspective)\n        : false,\n    }\n  }, [\n    forcedVersion,\n    perspective.selectedPerspectiveName,\n    perspective.selectedReleaseId,\n    perspective.selectedPerspective,\n  ])\n\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n    version: params.version,\n  })\n\n  const initialValue = useUnique(initialValueRaw)\n  const isInitialValueLoading = initialValue.loading\n\n  const {patch} = useDocumentOperation(documentId, documentType, selectedReleaseId)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const {validation: validationRaw} = useValidationStatus(\n    documentId,\n    documentType,\n    selectedReleaseId,\n  )\n  const connectionState = useConnectionState(documentId, documentType, selectedReleaseId)\n  const liveEdit = Boolean(schemaType?.liveEdit)\n\n  const value: SanityDocumentLike = useMemo(() => {\n    if (selectedReleaseId) {\n      return editState.version || editState.draft || editState.published || initialValue.value\n    }\n    if (selectedPerspectiveName && isPublishedPerspective(selectedPerspectiveName)) {\n      return (\n        editState.published ||\n        (liveEdit ? initialValue.value : {_id: documentId, _type: documentType})\n      )\n    }\n    return editState.draft || editState.published || initialValue.value\n  }, [\n    documentId,\n    documentType,\n    editState.draft,\n    editState.published,\n    editState.version,\n    initialValue.value,\n    liveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n  ])\n\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  const getDocumentVersionType = useCallback(() => {\n    let version: DocumentActionsVersionType\n    switch (true) {\n      case Boolean(params.rev):\n        version = 'revision'\n        break\n      case selectedReleaseId && isVersionId(value._id):\n        version = 'version'\n        break\n      case selectedPerspectiveName === 'published':\n        version = 'published'\n        break\n      default:\n        version = 'draft'\n    }\n\n    return version\n  }, [selectedPerspectiveName, selectedReleaseId, params, value._id])\n\n  const actionsPerspective = useMemo(() => getDocumentVersionType(), [getDocumentVersionType])\n\n  const documentActionsProps: PartialContext<DocumentActionsContext> = useMemo(\n    () => ({\n      schemaType: documentType,\n      documentId,\n      versionType: actionsPerspective,\n      ...(selectedReleaseId && {versionName: selectedReleaseId}),\n    }),\n    [documentType, documentId, actionsPerspective, selectedReleaseId],\n  )\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions(documentActionsProps),\n    [documentActions, documentActionsProps],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published && !editState?.version) && !isPristine\n  }, [editState?.draft, editState?.published, editState?.version, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(value._id).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [presenceStore, value._id])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceDocument\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? revisionDocument || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, revisionDocument, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit, there is a risk of data loss, so we disable editing in this case\n    if (liveEdit && editState.draft?._id) {\n      return true\n    }\n    if (!liveEdit && selectedPerspectiveName === 'published') {\n      return true\n    }\n\n    // If a release is selected, validate that the document id matches the selected release id\n    if (selectedReleaseId && getVersionFromId(value._id) !== selectedReleaseId) {\n      return true\n    }\n\n    return (\n      !ready ||\n      revisionId !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isCreateLinked ||\n      isReleaseLocked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft?._id,\n    liveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n    value._id,\n    ready,\n    revisionId,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n    isReleaseLocked,\n  ])\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error(\n      'Attempted to patch the Sanity document during initial render or in an `useInsertionEffect`. Input components should only call `onChange()` in a useEffect or an event handler.',\n    )\n  })\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  useInsertionEffect(() => {\n    // Create-linked documents enter a read-only state in Studio. However, unlinking a Create-linked\n    // document necessitates patching it. This renders it impossible to unlink a Create-linked\n    // document.\n    //\n    // Excluding Create-linked documents from this check is a simple way to ensure they can be\n    // unlinked.\n    //\n    // This does mean `handleChange` can be used to patch any part of a Create-linked document,\n    // which would otherwise be read-only.\n    if (readOnly && !isCreateLinked) {\n      patchRef.current = () => {\n        throw new Error('Attempted to patch a read-only document')\n      }\n    } else {\n      // note: this needs to happen in an insertion effect to make sure we're ready to receive patches from child components when they run their effects initially\n      // in case they do e.g. `useEffect(() => props.onChange(set(\"foo\")), [])`\n      // Note: although we discourage patch-on-mount, we still support it.\n      patchRef.current = (event: PatchEvent) => {\n        // when creating a new draft\n        if (!editState.draft && !editState.published) {\n          telemetry.log(CreatedDraft)\n        }\n\n        patch.execute(toMutationPatches(event.patches), initialValue.value)\n      }\n    }\n  }, [editState.draft, editState.published, initialValue.value, patch, telemetry, readOnly])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  useEffect(() => {\n    formStateRef.current = formState\n  }, [formState])\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId: value._id,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [presenceStore, value._id],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () =>\n      ({\n        actions,\n        activeViewId,\n        badges,\n        changesOpen,\n        closeInspector,\n        collapsedFieldSets,\n        collapsedPaths,\n        compareValue,\n        connectionState,\n        displayed,\n        documentId,\n        documentIdRaw,\n        documentType,\n        editState,\n        fieldActions,\n        focusPath,\n        inspector: currentInspector || null,\n        inspectors,\n        __internal_tasks,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onFocus: handleFocus,\n        onPathOpen: setOpenPath,\n        onHistoryClose: handleHistoryClose,\n        onHistoryOpen: handleHistoryOpen,\n        onInspectClose: handleLegacyInspectClose,\n        onMenuAction: handleMenuAction,\n        onPaneClose: handlePaneClose,\n        onPaneSplit: handlePaneSplit,\n        onSetActiveFieldGroup: handleSetActiveFieldGroup,\n        onSetCollapsedPath: handleOnSetCollapsedPath,\n        onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n        openInspector,\n        openPath,\n        index,\n        inspectOpen,\n        validation,\n        menuItemGroups: menuItemGroups || [],\n        paneKey,\n        previewUrl,\n        ready,\n        schemaType: schemaType!,\n        isPermissionsLoading,\n        isInitialValueLoading,\n        permissions,\n        setTimelineRange,\n        setIsDeleting,\n        isDeleting,\n        isDeleted,\n        timelineError,\n        timelineStore,\n        title,\n        value,\n        selectedReleaseId,\n        views,\n        formState,\n        unstable_languageFilter: languageFilter,\n        revisionId,\n        lastNonDeletedRevId,\n      }) satisfies DocumentPaneContextValue,\n    [\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      currentInspector,\n      inspectors,\n      __internal_tasks,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      setOpenPath,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      handleOnSetCollapsedPath,\n      handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups,\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      permissions,\n      setTimelineRange,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineStore,\n      title,\n      value,\n      selectedReleaseId,\n      views,\n      formState,\n      languageFilter,\n      revisionId,\n      lastNonDeletedRevId,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type ReleaseId} from '@sanity/client'\nimport {type ObjectSchemaType} from '@sanity/types'\nimport {useMemo} from 'react'\nimport {\n  EMPTY_ARRAY,\n  EventsProvider,\n  getDraftId,\n  getPublishedId,\n  getReleaseIdFromReleaseDocumentId,\n  getVersionId,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  PerspectiveProvider,\n  useArchivedReleases,\n  useEditState,\n  useEventsStore,\n  usePerspective,\n  useSchema,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\nimport {usePaneOptions} from './DocumentPane'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\nexport const DocumentEventsPane = (props: DocumentPaneProviderProps) => {\n  const {params = EMPTY_PARAMS} = usePaneRouter()\n  const options = usePaneOptions(props.pane.options, params)\n  const schema = useSchema()\n  const documentType = options.type\n  const schemaType = schema.get(options.type) as ObjectSchemaType | undefined\n  const liveEdit = Boolean(schemaType?.liveEdit)\n\n  const {selectedPerspectiveName, selectedReleaseId, selectedPerspective} = usePerspective()\n  const {data: archivedReleases} = useArchivedReleases()\n  const editState = useEditState(\n    getPublishedId(options.id),\n    documentType,\n    'default',\n    selectedReleaseId,\n  )\n\n  const showingPublishedOnDraft = liveEdit && selectedPerspective === 'drafts' && !editState?.draft\n  const {rev, since} = params\n  const historyVersion = params.historyVersion as ReleaseId | undefined\n\n  const documentId = useMemo(() => {\n    if (showingPublishedOnDraft) {\n      return getPublishedId(options.id)\n    }\n    if (\n      historyVersion &&\n      archivedReleases.some(\n        (release) => getReleaseIdFromReleaseDocumentId(release._id) === historyVersion,\n      )\n    ) {\n      // Check if we have a release that matches with this historyVersion\n      return getVersionId(options.id, historyVersion)\n    }\n    if (typeof selectedPerspectiveName === 'undefined') {\n      return getDraftId(options.id)\n    }\n    if (selectedPerspectiveName === 'published') {\n      return getPublishedId(options.id)\n    }\n    if (selectedReleaseId) {\n      return getVersionId(options.id, selectedPerspectiveName)\n    }\n    return options.id\n  }, [\n    archivedReleases,\n    historyVersion,\n    selectedPerspectiveName,\n    options.id,\n    showingPublishedOnDraft,\n    selectedReleaseId,\n  ])\n\n  const eventsStore = useEventsStore({documentId, documentType: options.type, rev, since})\n\n  const historyStoreProps = useMemo(\n    () => ({\n      error: eventsStore.error,\n      revisionId: eventsStore.revision?.revisionId || null,\n      onOlderRevision: Boolean(eventsStore.revision?.document && eventsStore.revision?.revisionId),\n      revisionDocument: eventsStore.revision?.document || null,\n      sinceDocument: eventsStore.sinceRevision?.document || null,\n      ready: !eventsStore.loading,\n      isPristine: Boolean(eventsStore.events.length === 0),\n      lastNonDeletedRevId:\n        eventsStore.events.find(\n          (e) => !isDeleteDocumentGroupEvent(e) && !isDeleteDocumentVersionEvent(e),\n        )?.id || null,\n    }),\n    [eventsStore],\n  )\n\n  const value = useMemo(() => eventsStore, [eventsStore])\n\n  return (\n    <EventsProvider value={value}>\n      {historyVersion ? (\n        <PerspectiveProvider\n          selectedPerspectiveName={historyVersion}\n          excludedPerspectives={EMPTY_ARRAY}\n        >\n          <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n        </PerspectiveProvider>\n      ) : (\n        <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n      )}\n    </EventsProvider>\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useMemo, useState} from 'react'\nimport {getPublishedId, useTimelineSelector, useTimelineStore} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\nimport {usePaneOptions} from './DocumentPane'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\nexport const DocumentPaneWithLegacyTimelineStore = (props: DocumentPaneProviderProps) => {\n  const {pane} = props\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n\n  const params = paneRouter.params || EMPTY_PARAMS\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  const store = useTimelineStore({\n    documentId: getPublishedId(options.id),\n    documentType: options.type,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  const onOlderRevision = useTimelineSelector(store, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(store, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(store, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(store, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(store, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(store, (state) => state.isPristine)\n  const lastNonDeletedRevId = useTimelineSelector(store, (state) => state.lastNonDeletedRevId)\n\n  const historyStoreProps = useMemo(\n    () => ({\n      store,\n      error: timelineError,\n      revisionId: revTime?.id || null,\n      onOlderRevision: onOlderRevision,\n      revisionDocument: timelineDisplayed as SanityDocument | null,\n      sinceDocument: sinceAttributes as SanityDocument | null,\n      ready: timelineReady,\n      isPristine: Boolean(isPristine),\n      lastNonDeletedRevId,\n    }),\n    [\n      store,\n      timelineError,\n      revTime?.id,\n      onOlderRevision,\n      timelineDisplayed,\n      sinceAttributes,\n      timelineReady,\n      isPristine,\n      lastNonDeletedRevId,\n    ],\n  )\n  return <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n}\n","import {memo} from 'react'\nimport {useSource} from 'sanity'\n\nimport {DocumentEventsPane} from './DocumentEventsPane'\nimport {DocumentPaneWithLegacyTimelineStore} from './DocumentPaneLegacyTimeline'\nimport {type DocumentPaneProviderProps} from './types'\n\n/**\n * @internal\n */\nexport const DocumentPaneProviderWrapper = memo((props: DocumentPaneProviderProps) => {\n  const source = useSource()\n  if (source.beta?.eventsAPI?.documents) {\n    return <DocumentEventsPane {...props} />\n  }\n  return <DocumentPaneWithLegacyTimelineStore {...props} />\n})\nDocumentPaneProviderWrapper.displayName = 'Memo(DocumentPaneProviderWrapper)'\n","import {useEffect, useRef} from 'react'\nimport {usePerspective} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\n\n/**\n * This hooks takes care of resetting the history related params when the perspective changes.\n * It needs to be placed in a stable component, like the `DocumentPane`, which won't be unmounted when the perspective changes.\n */\nexport function useResetHistoryParams() {\n  const {params = EMPTY_PARAMS, setParams} = usePaneRouter()\n\n  const {selectedPerspectiveName} = usePerspective()\n  const isMounted = useRef(false)\n\n  const updateHistoryParams = useEffectEvent((_perspective?: string) => {\n    // Check if any of the history related params are set, and reset them, don't unnecessarily update the params\n    const PARAMS_TO_UPDATE = ['since', 'historyVersion', 'rev', 'preserveRev']\n    const shouldUpdateParams = PARAMS_TO_UPDATE.some((param) => params[param])\n    if (!shouldUpdateParams) return\n\n    setParams({\n      ...params,\n      // Reset the history related params when the perspective changes, as they don't make sense\n      // in the context of the new perspective - preserveRev is used when setting draft revision.\n      rev: params.preserveRev === 'true' ? params.rev : undefined,\n      preserveRev: undefined,\n      since: undefined,\n      historyVersion: undefined,\n    })\n  })\n  useEffect(() => {\n    // Skip the first run to avoid resetting the params on initial load\n    if (isMounted.current) {\n      updateHistoryParams(selectedPerspectiveName)\n    }\n  }, [selectedPerspectiveName])\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n}\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  usePerspective,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProviderWrapper} from './DocumentPaneProviderWrapper'\nimport {type DocumentPaneProviderProps} from './types'\nimport {useResetHistoryParams} from './useResetHistoryParams'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const {selectedPerspectiveName} = usePerspective()\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n  useResetHistoryParams()\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProviderWrapper\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}-${selectedPerspectiveName || ''}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProviderWrapper>\n  )\n}\n\n/**\n * @internal\n */\nexport function usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    noDocumentsContent,\n    onRetry,\n    paneTitle,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n    t,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId, isVersionId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    const isVersion = doc?.id && isVersionId(doc._id)\n    const hasDraft = Boolean(entry.draft)\n\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft,\n      isVersion,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type ClientPerspective, type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchOptions,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  perspective?: ClientPerspective\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    perspective,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeAllVersions: true,\n      includeResult: false,\n      visibility: 'query',\n      tag: 'listen-search-query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({\n    filter,\n    limit,\n    params,\n    searchQuery,\n    perspective,\n    sort,\n    staticTypeNames,\n  })\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions: SearchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n              perspective,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {type ClientPerspective} from '@sanity/client'\nimport {observableCallback} from 'observable-callback'\nimport {useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  perspective?: ClientPerspective\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {\n    filter: searchFilter,\n    params: paramsProp,\n    sortOrder,\n    searchQuery,\n    perspective,\n    apiVersion,\n  } = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [[onRetry$, onRetry]] = useState(() => observableCallback())\n  const [[onFetchFullList$, onLoadFullList]] = useState(() => observableCallback())\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      perspective,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    perspective,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useActiveReleases,\n  useI18nText,\n  usePerspective,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n  const releases = useActiveReleases()\n  const {perspectiveStack} = usePerspective()\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {\n    error,\n    isLoadingFullList,\n    isLoading: documentListIsLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    onRetry,\n  } = useDocumentList({\n    apiVersion,\n    filter,\n    perspective: perspectiveStack.length === 0 ? 'raw' : perspectiveStack,\n    params,\n    searchQuery: searchQuery?.trim(),\n    sortOrder,\n  })\n\n  const isLoading = documentListIsLoading || releases.loading\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => {\n      inputRef.current = ref\n    },\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} versions={undefined} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n  includeAllVersions: true,\n  tag: 'document-sheet-list-store',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useState} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const [previous, setPrevious] = useState<ValueType>(value)\n  if (!shallowEquals(previous, value)) {\n    setPrevious(value)\n    return value\n  }\n  return previous\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\nPaneContainer.displayName = 'Memo(PaneContainer)'\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {type SearchParam} from 'sanity/router'\n\nimport {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link structure.BaseIntentParams} and {@link structure.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n\n  searchParams?: SearchParam[]\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEditSchemaType, version} = props\n\n  if (liveEditSchemaType && !version) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = getPaneParams(intent, params)\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n\nfunction getPaneParams(\n  intent: string,\n  {template, version}: Record<string, string>,\n): {template?: string; version?: string} {\n  if (intent !== 'create') return EMPTY_PARAMS\n  if (template && version) return {template, version}\n  if (template) return {template}\n  if (version) return {version}\n  return EMPTY_PARAMS\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  usePerspective,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): React.JSX.Element {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  if (selectedReleaseId) {\n    return (\n      <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n        <Card flex={1} padding={2} paddingTop={0}>\n          <TimelineError versionError />\n        </Card>\n      </Flex>\n    )\n  }\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {\n  type DocumentGroupEvent,\n  Event,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  useTranslation,\n} from 'sanity'\n\nimport {Tooltip} from '../../../../../ui-components'\n\nexport interface TimelineItemProps {\n  event: DocumentGroupEvent\n  isSelected: boolean\n  onSelect: (chunk: DocumentGroupEvent) => void\n  optionsMenu?: React.ReactNode\n}\n\nconst getIsSelectable = (event: DocumentGroupEvent) => {\n  return (\n    !isDeleteDocumentVersionEvent(event) &&\n    !isDeleteDocumentGroupEvent(event) &&\n    !isUnpublishDocumentEvent(event) &&\n    !isScheduleDocumentVersionEvent(event) &&\n    !isUnscheduleDocumentVersionEvent(event)\n  )\n}\n\nexport function EventTimelineItem({event, isSelected, onSelect, optionsMenu}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const isSelectable = getIsSelectable(event)\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(event)\n      }\n    },\n    [onSelect, event, isSelectable],\n  )\n  return (\n    <Tooltip content={isSelectable ? '' : t('changes.not-selectable')} disabled={isSelectable}>\n      <Flex gap={1}>\n        <Card\n          as={isSelectable ? 'button' : 'div'}\n          onClick={handleClick}\n          padding={2}\n          pressed={isSelected}\n          radius={2}\n          data-ui=\"timelineItem\"\n          data-testid=\"timeline-item-button\"\n          data-chunk-timestamp={event.timestamp}\n          style={{\n            cursor: isSelectable ? 'pointer' : 'default',\n          }}\n        >\n          <Event event={event} showChangesBy=\"tooltip\" />\n        </Card>\n        {optionsMenu}\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {\n  Flex,\n  Menu,\n  // eslint-disable-next-line no-restricted-imports\n  MenuItem,\n  Text,\n  usePortal,\n} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  ContextMenuButton,\n  getReleaseTone,\n  getVersionFromId,\n  type PublishDocumentVersionEvent,\n  RELEASES_INTENT,\n  Translate,\n  useSetPerspective,\n  useTranslation,\n  VersionInlineBadge,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\nimport {usePaneRouter} from 'sanity/structure'\n\nimport {MenuButton} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TIMELINE_MENU_PORTAL} from '../timelineMenu'\n\nexport function PublishedEventMenu({event}: {event: PublishDocumentVersionEvent}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const portalContext = usePortal()\n  const {params, setParams} = usePaneRouter()\n  const setPerspective = useSetPerspective()\n\n  const handleOpenReleaseDocument = useCallback(() => {\n    setParams({\n      ...params,\n      rev: event.versionRevisionId || '@lastPublished',\n      since: undefined,\n      historyEvent: event.id,\n      historyVersion: getVersionFromId(event.versionId),\n    })\n  }, [setParams, params, event])\n\n  const handleOpenDraftDocument = useCallback(() => {\n    setParams({\n      ...params,\n      rev: event.versionRevisionId,\n      preserveRev: 'true',\n      since: undefined,\n    })\n    setTimeout(() => {\n      // A bug is generated when we change the perspective and the params at the same time\n      // Resetting the params to the value it had before, because the paneRouter uses the previous value\n      setPerspective('drafts')\n    }, 100)\n  }, [setParams, params, event.versionRevisionId, setPerspective])\n\n  const VersionBadge = ({children}: {children: React.ReactNode}) => {\n    return (\n      <VersionInlineBadge $tone={event.release ? getReleaseTone(event.release) : undefined}>\n        {children}\n      </VersionInlineBadge>\n    )\n  }\n  return (\n    <MenuButton\n      id={`timeline-item-menu-button-${event.versionId}`}\n      button={\n        <ContextMenuButton\n          aria-label={t('timeline-item.menu-button.aria-label')}\n          tooltipProps={{content: t('timeline-item.menu-button.tooltip')}}\n        />\n      }\n      menu={\n        <Menu padding={1}>\n          {event.release ? (\n            <>\n              <IntentLink\n                intent={RELEASES_INTENT}\n                params={{id: event.release?.name}}\n                style={{textDecoration: 'none'}}\n              >\n                <MenuItem padding={3}>\n                  <Flex align={'center'}>\n                    <Text size={1} style={{textDecoration: 'none'}}>\n                      <Translate\n                        components={{\n                          VersionBadge: ({children}) => <VersionBadge>{children} </VersionBadge>,\n                        }}\n                        i18nKey=\"events.open.release\"\n                        values={{\n                          releaseTitle: event.release.metadata.title,\n                        }}\n                        t={t}\n                      />\n                    </Text>\n                  </Flex>\n                </MenuItem>\n              </IntentLink>\n              <MenuItem onClick={handleOpenReleaseDocument}>\n                <Flex align={'center'}>\n                  <Text size={1}>\n                    <Translate\n                      components={{\n                        VersionBadge: ({children}) => <VersionBadge>{children} </VersionBadge>,\n                      }}\n                      i18nKey=\"events.inspect.release\"\n                      values={{\n                        releaseTitle: event.release.metadata.title,\n                      }}\n                      t={t}\n                    />\n                  </Text>\n                </Flex>\n              </MenuItem>\n            </>\n          ) : (\n            <MenuItem onClick={handleOpenDraftDocument} disabled={!event.versionRevisionId}>\n              <Flex align={'center'}>\n                <Text size={1}>\n                  <Translate\n                    components={{\n                      VersionBadge: ({children}) => (\n                        <VersionInlineBadge $tone=\"caution\">{children}</VersionInlineBadge>\n                      ),\n                    }}\n                    i18nKey=\"events.open.draft\"\n                    t={t}\n                  />\n                </Text>\n              </Flex>\n            </MenuItem>\n          )}\n        </Menu>\n      }\n      popover={{\n        // when used inside the timeline menu we want to keep the element inside the popover, to avoid closing the popover when clicking expand.\n        portal: portalContext.elements?.[TIMELINE_MENU_PORTAL] ? TIMELINE_MENU_PORTAL : true,\n        placement: 'bottom',\n        fallbackPlacements: ['bottom-end', 'bottom-start'],\n      }}\n    />\n  )\n}\n","import {Box, Flex, Spinner, Stack, Text} from '@sanity/ui'\nimport {motion, type Variants} from 'framer-motion'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  type DocumentGroupEvent,\n  getDocumentVariantType,\n  isCreateDocumentVersionEvent,\n  isEditDocumentVersionEvent,\n  isPublishDocumentVersionEvent,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from '../expandableTimelineItemButton'\nimport {ListWrapper, Root} from '../timeline.styled'\nimport {EventTimelineItem} from './EventTimelineItem'\nimport {PublishedEventMenu} from './PublishedEventMenu'\n\ninterface TimelineProps {\n  events: DocumentGroupEvent[]\n  hasMoreEvents: boolean | null\n  selectedEventId?: string\n  onLoadMore: () => void\n  onSelect: (event: DocumentGroupEvent) => void\n  fetchEventChildren: (event: DocumentGroupEvent) => Promise<void>\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nconst TimelineItemWrapper = motion.create(Box)\nconst CHILDREN_ITEMS_VARIANTS: Variants = {\n  initial: {\n    opacity: 0,\n  },\n  animate: {\n    opacity: 1,\n  },\n  exit: {\n    opacity: 0,\n  },\n}\n\nconst ITEM_HEIGHT = 57\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const EventsTimeline = ({\n  events: allEvents,\n  hasMoreEvents,\n  selectedEventId,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n  fetchEventChildren,\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedEventId) {\n      // Find that event and if it has a parent, expand the parent.\n      const selectedEvent = allEvents.find((event) => event.id === selectedEventId)\n      if (selectedEvent && 'parentId' in selectedEvent && selectedEvent.parentId) {\n        return new Set([selectedEvent.parentId])\n      }\n    }\n    return new Set()\n  })\n  const [expandingParents, setExpandingParents] = useState<Set<string>>(new Set())\n\n  const events = useMemo(() => {\n    return allEvents.filter((event) => {\n      if (isCreateDocumentVersionEvent(event) && event.parentId) {\n        // Check if it's the last event in the list, in that case, we want to show it\n        const isLastEvent = allEvents[allEvents.length - 1].id === event.id\n        if (isLastEvent) return true\n        return expandedParents.has(event.parentId)\n      }\n      if (isEditDocumentVersionEvent(event) && event.parentId) {\n        return expandedParents.has(event.parentId)\n      }\n      return true\n    })\n  }, [expandedParents, allEvents])\n\n  const handleExpandParent = useCallback(\n    (event: DocumentGroupEvent) => async () => {\n      const parentId = event.id\n\n      let isExpanding = false\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else {\n          isExpanding = true\n          next.add(parentId)\n        }\n\n        return next\n      })\n      if (isExpanding) {\n        setExpandingParents((prev) => {\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n        await fetchEventChildren(event)\n        setExpandingParents((prev) => {\n          const next = new Set(prev)\n          next.delete(parentId)\n          return next\n        })\n      }\n    },\n    [fetchEventChildren, setExpandingParents],\n  )\n\n  const handleSelectChunk = useCallback(\n    (event: DocumentGroupEvent) => {\n      onSelect(event)\n    },\n    [onSelect],\n  )\n\n  const renderOptionsMenu = useCallback(\n    (event: DocumentGroupEvent) => {\n      const documentVariantType = getDocumentVariantType(event.documentId)\n      if (isPublishDocumentVersionEvent(event) && documentVariantType === 'published') {\n        return <PublishedEventMenu event={event} />\n      }\n      if (\n        isPublishDocumentVersionEvent(event) &&\n        documentVariantType === 'draft' &&\n        event.creationEvent\n      ) {\n        return (\n          <ExpandableTimelineItemButton\n            isExpanded={expandedParents.has(event.id)}\n            onExpand={handleExpandParent(event)}\n          />\n        )\n      }\n      return null\n    },\n    [expandedParents, handleExpandParent],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<DocumentGroupEvent[][number]>>(\n    (event, {activeIndex}) => {\n      /**\n       * The create version event will be present while expanding (loading the edits), so we are attaching to it the loading block at the top.\n       * - publishEvent (expanding?)\n       * --- loadingBlock  ~createEvent~\n       * */\n      const showExpandingLoader =\n        isCreateDocumentVersionEvent(event) &&\n        event.parentId &&\n        expandingParents.has(event.parentId)\n\n      const isLastEvent = activeIndex === events.length - 1\n      if (showExpandingLoader) {\n        return (\n          <TimelineItemWrapper\n            animate={{opacity: 1}}\n            initial={{opacity: 0}}\n            transition={{duration: 0.2, delay: 0.2}}\n          >\n            {/* We need this item to match the same height as the rest of the list items, which is 57px */}\n            <Flex align=\"center\" justify=\"center\" style={{height: ITEM_HEIGHT}}>\n              <Spinner />\n            </Flex>\n          </TimelineItemWrapper>\n        )\n      }\n      return (\n        <TimelineItemWrapper\n          paddingBottom={1}\n          paddingRight={1}\n          key={event.timestamp}\n          animate=\"animate\"\n          exit=\"exit\"\n          initial=\"initial\"\n          variants={'parentId' in event ? CHILDREN_ITEMS_VARIANTS : undefined}\n          paddingLeft={\n            (isEditDocumentVersionEvent(event) || isCreateDocumentVersionEvent(event)) &&\n            event.parentId &&\n            !isLastEvent\n              ? 4\n              : 1\n          }\n        >\n          <EventTimelineItem\n            event={event}\n            isSelected={event.id === selectedEventId}\n            onSelect={handleSelectChunk}\n            optionsMenu={renderOptionsMenu(event)}\n          />\n\n          {isLastEvent && hasMoreEvents && <LoadingBlock />}\n        </TimelineItemWrapper>\n      )\n    },\n    [\n      expandingParents,\n      selectedEventId,\n      handleSelectChunk,\n      renderOptionsMenu,\n      events.length,\n      hasMoreEvents,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n  const selectedIndex = events.findIndex((event) => event.id === selectedEventId)\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {events.length > 0 ? (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={ITEM_HEIGHT}\n            items={events}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      ) : (\n        <Stack padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </Stack>\n      )}\n    </Root>\n  )\n}\n\nEventsTimeline.displayName = 'EventsTimeline'\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentGroupEvent,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  TIMELINE_ITEM_I18N_KEY_MAPPING,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../../ui-components'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {TimelineError} from '../TimelineError'\nimport {EventsTimeline} from './EventsTimeline'\n\ninterface TimelineMenuProps {\n  event: DocumentGroupEvent | null\n  events: DocumentGroupEvent[]\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nconst formatParams = {\n  timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n}\n\nexport function EventsTimelineMenu({event, events, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n  const toast = useToast()\n  const {\n    nextCursor,\n    loading,\n    error: eventsError,\n    findRangeForRevision,\n    findRangeForSince,\n    loadMoreEvents,\n    expandEvent,\n  } = useEvents()\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleGlobalKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (open && (e.key === 'Escape' || e.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revEvent: DocumentGroupEvent) => {\n      try {\n        if (\n          isDeleteDocumentVersionEvent(revEvent) ||\n          isDeleteDocumentGroupEvent(revEvent) ||\n          isUnpublishDocumentEvent(revEvent) ||\n          isScheduleDocumentVersionEvent(revEvent) ||\n          isUnscheduleDocumentVersionEvent(revEvent)\n        ) {\n          console.error('Event is not selectable')\n          return\n        }\n        const [since, rev] = findRangeForRevision(revEvent?.id)\n        setTimelineRange(since, rev)\n        handleClose()\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [t, toast, setTimelineRange, findRangeForRevision, handleClose],\n  )\n\n  const selectSince = useCallback(\n    (sinceEvent: DocumentGroupEvent) => {\n      try {\n        const [since, rev] = findRangeForSince(sinceEvent.id)\n        setTimelineRange(since, rev)\n        handleClose()\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [findRangeForSince, setTimelineRange, toast, t, handleClose],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading && nextCursor) {\n      loadMoreEvents()\n    }\n  }, [loading, loadMoreEvents, nextCursor])\n\n  const content = useMemo(() => {\n    if (eventsError) return <TimelineError />\n\n    return (\n      <EventsTimeline\n        events={events}\n        fetchEventChildren={expandEvent}\n        hasMoreEvents={Boolean(nextCursor)}\n        selectedEventId={event?.id}\n        onLoadMore={handleLoadMore}\n        onSelect={mode === 'rev' ? selectRev : selectSince}\n      />\n    )\n  }, [\n    eventsError,\n    mode,\n    expandEvent,\n    events,\n    nextCursor,\n    event?.id,\n    handleLoadMore,\n    selectSince,\n    selectRev,\n  ])\n\n  const revLabel = event\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[event.type], {\n        context: 'timestamp',\n        timestamp: new Date(event.timestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  // eslint-disable-next-line no-nested-ternary\n  const sinceLabel = event\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[event.type], {\n        context: 'timestamp',\n        timestamp: new Date(event.timestamp),\n        formatParams,\n      })\n    : events.length > 0\n      ? t('timeline.since-version-missing')\n      : t('timeline.no-previous-events')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={loading || !events.length}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={loading ? t('timeline.loading-history') : buttonLabel}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {BoundaryElementProvider, Box, Card, Flex, Spinner, Text} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {type ReactElement, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  ChangesError,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {EventsTimelineMenu} from '../../timeline/events/EventsTimelineMenu'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nconst SpinnerContainer = styled(Flex)`\n  width: 100%;\n  position: absolute;\n  bottom: -4px;\n`\n\nconst DIFF_INITIAL_VALUE = {\n  diff: null,\n  loading: true,\n}\nexport function EventsInspector({showChanges}: {showChanges: boolean}): ReactElement {\n  const {documentId, schemaType, timelineError, value, formState} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const {events, revision, sinceRevision, getChangesList} = useEvents()\n\n  const isComparingCurrent = !revision?.revisionId\n  const changesList$ = useMemo(() => getChangesList(), [getChangesList])\n  const {diff, loading: diffLoading} = useObservable(changesList$, DIFF_INITIAL_VALUE)\n\n  const {t} = useTranslation('studio')\n\n  const documentContext: DocumentChangeContextInstance = useMemo(() => {\n    return {\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent: isComparingCurrent && !formState?.readOnly,\n      value,\n      showFromValue: true,\n    }\n  }, [diff, documentId, isComparingCurrent, formState?.readOnly, schemaType, value])\n\n  const [sinceEvent, toEvent] = useMemo(() => {\n    if (!events) return [null, null]\n    return [\n      events.find((e) => e.id === sinceRevision?.revisionId) || null,\n      events.find((e) => e.id === revision?.revisionId) || events[0],\n    ]\n  }, [events, revision?.revisionId, sinceRevision?.revisionId])\n\n  const sinceEvents = useMemo(() => {\n    // The sinceEvents need to account the toEvent showing only events that are older than the toEvent\n    if (!toEvent) return events.slice(1)\n    return events.slice(events.indexOf(toEvent) + 1).map((event) => {\n      // If the to event has a parent id, we need to remove the parent id from the since events or they won't be rendered, as they have no parent to expand.\n      if ('parentId' in toEvent && 'parentId' in event && event.parentId === toEvent.parentId) {\n        return {...event, parentId: undefined}\n      }\n      return event\n    })\n  }, [events, toEvent])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3} style={{position: 'relative'}}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {t('changes.inspector.from-label')}\n          </Text>\n          <EventsTimelineMenu\n            event={sinceEvent || null}\n            events={sinceEvents}\n            mode=\"since\"\n            placement=\"bottom-start\"\n          />\n          <Text size={1} muted>\n            {t('changes.inspector.to-label')}\n          </Text>\n          <EventsTimelineMenu\n            event={toEvent || null}\n            events={events}\n            mode=\"rev\"\n            placement=\"bottom-end\"\n          />\n        </Grid>\n        {diffLoading && (\n          <motion.div\n            animate={{opacity: 1}}\n            initial={{opacity: 0}}\n            transition={{delay: 0.2, duration: 0.2}}\n          >\n            <SpinnerContainer justify=\"center\" align=\"center\" gap={2}>\n              <Text muted size={0}>\n                {t('changes.loading-changes')}\n              </Text>\n              <Spinner size={0} />\n            </SpinnerContainer>\n          </motion.div>\n        )}\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={revision?.loading || sinceRevision?.loading || false}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <ChangesError />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!documentContext.rootDiff) {\n    return (\n      <motion.div\n        animate={{opacity: 1}}\n        initial={{opacity: 0}}\n        transition={{delay: 0.2, duration: 0.2}}\n      >\n        <NoChanges />\n      </motion.div>\n    )\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={documentContext.rootDiff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type DocumentGroupEvent,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  LoadingBlock,\n  ScrollContainer,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\nimport {styled} from 'styled-components'\n\nimport {EventsTimeline} from '../../timeline/events/EventsTimeline'\nimport {TimelineError} from '../../timeline/TimelineError'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function EventsSelector({showList}: {showList: boolean}) {\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n  const {setTimelineRange} = useDocumentPane()\n  const getScrollerRef = useCallback(\n    (el: HTMLDivElement | null) => {\n      if (!listHeight && el) {\n        /**\n         * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n         * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n         * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n         */\n        setListHeight(el.clientHeight ? el.clientHeight - 1 : 0)\n        setScrollRef(el)\n      }\n    },\n    [listHeight],\n  )\n  const {\n    events,\n    nextCursor,\n    loading,\n    error,\n    revision,\n    loadMoreEvents,\n    findRangeForRevision,\n    expandEvent,\n  } = useEvents()\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n\n  const selectRev = useCallback(\n    (event: DocumentGroupEvent) => {\n      try {\n        if (\n          isDeleteDocumentVersionEvent(event) ||\n          isDeleteDocumentGroupEvent(event) ||\n          isUnpublishDocumentEvent(event) ||\n          isScheduleDocumentVersionEvent(event) ||\n          isUnscheduleDocumentVersionEvent(event)\n        ) {\n          console.error('Event is not selectable')\n          return\n        }\n        const [since, rev] = findRangeForRevision(event.id)\n        setTimelineRange(since, rev)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [t, toast, setTimelineRange, findRangeForRevision],\n  )\n\n  const initialLoad = loading && !events.length\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {error ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList &&\n              !initialLoad ? (\n                <EventsTimeline\n                  events={events}\n                  fetchEventChildren={expandEvent}\n                  hasMoreEvents={Boolean(nextCursor)}\n                  // If we have a revision, we select it, otherwise we select the first event\n                  selectedEventId={revision?.revisionId || events[0]?.id}\n                  onLoadMore={loadMoreEvents}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n              {loading && <LoadingBlock />}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type Chunk,\n  ScrollContainer,\n  usePerspective,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineRange, timelineStore} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    if (!el?.clientHeight) return\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el.clientHeight - 1)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForRev(revChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore?.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError || selectedReleaseId ? (\n          <TimelineError versionError={Boolean(selectedReleaseId)} />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useSource, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {EventsInspector} from './EventsInspector'\nimport {EventsSelector} from './EventsSelector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const source = useSource()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n      // Reset the since when changing the tab, as it's not relevant for the history tab\n      since: tab === 'history' ? undefined : params?.since,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        {source.beta?.eventsAPI?.documents ? (\n          <EventsSelector showList={paneRouterTab === 'history'} />\n        ) : (\n          <HistorySelector showList={paneRouterTab === 'history'} />\n        )}\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        {source.beta?.eventsAPI?.documents ? (\n          <>\n            {paneRouterTab === 'review' ? (\n              <EventsInspector showChanges={paneRouterTab === 'review'} />\n            ) : null}\n          </>\n        ) : (\n          <ChangesInspector showChanges={paneRouterTab === 'review'} />\n        )}\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {\n      ...params,\n      since: undefined,\n      rev: undefined,\n      changesInspectorTab: undefined,\n      historyVersion: undefined,\n    },\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n  const Icon = MARKER_ICON[marker.level]\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>\n                <Icon />\n              </Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  usePerspective,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {selectedReleaseId} = usePerspective()\n  const {validation: validationMarkers} = useValidationStatus(\n    documentId,\n    documentType,\n    selectedReleaseId,\n  )\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n        __internalApplicationType: 'sanity/structure',\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): React.JSX.Element {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","jsx","color","Fragment","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Text","Symbol","for","InfoOutlineIcon","t4","Tooltip","t5","jsxs","Inline","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","data","loading","useActiveReleases","releasesIds","useReleasesIds","perspectiveStack","selectedPerspectiveName","usePerspective","documentPreviewStore","_id","getPreviewStateObservable","ids","stack","previewStateObservable","draft","isLoading","published","version","versions","previewIsLoading","useObservable","TooltipDelayGroupProvider","DocumentPreviewPresence","DocumentStatusIndicator","status","DocumentStatus","tooltip","t6","getPreviewValueWithFallback","perspective","t7","SanityDefaultPreview","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","StateLink","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","PreviewCard","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","Translate","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","WarningOutlineIcon","t14","t15","Card","t16","Stack","map","item_0","borderTop","undefined","DocumentsIcon","documentCount","ChevronDownIcon","minWidth","filter","_temp","t17","index","projectId","datasetName","Button","CopyIcon","content","navigator","clipboard","writeText","then","push","catch","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","LoadingBlock","Dialog","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","ErrorBoundary","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","useLayoutEffect","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","LegacyLayerProvider","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","BoundaryElementProvider","t25","t26","IsLastPaneProvider","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","toLowerCaseNoSpaces","str","toLocaleLowerCase","replaceAll","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","MenuDivider","child","childIndex","key","child_0","childIndex_0","MenuGroup","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","MenuItem","TooltipOfDisabled","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","ContextMenuButton","nodeIndex","Menu","MenuButton","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","LayerProvider","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","StatusButton","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","searchParams","linkRef","IntentLink","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","InsufficientPermissionsMessage","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","selectedReleaseId","isReleaseActive","useIsReleaseActive","tCore","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","ChevronRightIcon","FolderIcon","preview","metaKey","preloading","setPreload","timeoutRef","startTransition","handleMouseEnter","handleMouseLeave","PreloadDocumentPane","RenderActionCollectionState","actionProps","onActionComplete","GetHookCollectionState","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsEnabledProvider","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","CommentsProvider","_DEBUG","EMPTY_PARAMS","freeze","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","setMenuItems","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","displayed","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","DocumentInspectorPanel","closeInspector","features","handleClose","Component","component","resizablePanes","Resizable","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","div","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","TextInput","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","Tab","TabList","outline","JsonInspector","ignoreCase","TabPanel","Banner","Icon","paddingY","DeletedDocumentBanners","isDeleted","isDeleting","selectedPerspective","isPublishedPerspective","isDraftPerspective","DeletedDocumentBanner","lastNonDeletedRevId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","ArchivedReleaseBanner","release","metadata","DocumentRemoveIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","log","err","response","errMessage","finally","onSubmit","fullscreen","DialogProvider","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","AddToReleaseBanner","currentRelease","LATEST","getReleaseTone","createVersion","useVersionOperations","getReleaseIdFromReleaseDocumentId","handleAddToRelease","Label","backgroundColor","borderRadius","textDecoration","fontWeight","ArchivedReleaseDocumentBanner","archivedReleases","useArchivedReleases","historyEvent","since","historyVersion","handleGoBack","r","VersionBadge","VersionInlineBadge","ResolvedLiveEdit","DraftLiveEditBanner","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","ScheduledReleaseBanner","LockIcon","formatRelativeLocalePublishDate","date","TitleContainer","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","Heading","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","editState","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","isLocked","transactionSyncLock","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","handleInitialValue","useEffectEvent","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","Spinner","FormBuilder","changed","focused","members","readOnly","PresenceOverlay","Container","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","createPatchChannel","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","permissions","isPermissionsLoading","parentPortal","usePortal","_portalElement","setPortalElement","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","view","activeView","portalElement","splitPanes","formViewHidden","ActiveViewComponent","historical","activeViewNode","isLiveEdit","scrollTo","inspectDialog","showInspector","isCreatingDocument","isReleaseDocument","isReleaseScheduledOrScheduling","getVersionFromId","banners","PortalProvider","VirtualizerScrollInstanceProvider","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","Popover","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Grid","ModalDialog","footer","showCloseButton","header","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","Hotkeys","sideMenuItems","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","revisionId","isRestoreAction","historyActions","toLowerCase","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","TooltipContent","releaseType","intendedPublishAt","DATE_TIME_FORMAT","dateStyle","timeStyle","DocumentPerspectiveList","setPerspective","useSetPerspective","dateTimeFormat","useDateTimeFormat","releases","documentVersions","useDocumentVersions","filteredReleases","notCurrentReleases","currentReleases","inCreation","activeReleases","versionDocExists","releaseId","archivedRelease","handlePerspectiveChange","isPublishedChipDisabled","getReleaseChipState","isReleaseHistoryMatch","isPublishSelected","isPublishedId","isDraftSelected","displayedId","isVersionId","isDraftId","isDraftDisabled","VersionChip","format","menuReleaseId","releasesLoading","fromRelease","isVersion","releaseState","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","renderedActions","LanguageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","Badge","whiteSpace","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","getElementById","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","overflowY","FlipIcon","ChevronLeftIcon","ExpandableTimelineItemButton","stopPropagation","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","UserAvatar","AvatarStack","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","NameSkeleton","Skeleton","font","UserLine","user","useUser","AvatarSkeleton","collaborators","TimelineItem","chunk","isSelected","onSelect","optionsMenu","endTimestamp","timestamp","IconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","forEach","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","renderItem","activeIndex","CommandList","TimelineError","versionError","TextWithTone","TIMELINE_MENU_PORTAL","TimelineMenu","setTimelineRange","timelineError","timelineStore","open","setOpen","button","setButton","popoverRef","setPopoverRef","useTimelineSelector","realRevChunk","sinceTime","handleOpen","handleGlobalKeyDown","focus","selectRev","revChunk","sinceId","revId","findRangeForRev","selectSince","sinceChunk","findRangeForSince","handleLoadMore","loadMore","formatParams","revLabel","sinceLabel","buttonLabel","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","MotionButton","ButtonSkeleton","DocumentStatusButton","author","translationKey","onHistoryOpen","onHistoryClose","relativeTime","FallbackStatus","createDocumentVersion","editDocumentVersion","EventsStatus","events","useEvents","TimelineStatus","TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","setStatus","eventsEnabled","useSource","beta","eventsAPI","documents","lastUpdated","timerId","timerId_0","state_0","StatusText","RevisionStatusLine","RestoreIcon","useResizeObserver","onResize","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","handleResize","isReady","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","KeyboardShortcutResponder","actionsBoxElement","onActionStart","onKeyDown","rootRef","As","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","isInitialValueLoading","paneParams","zOffsets","getSanityCreateLinkMetadata","documentLinkedBannerContent","CreateLinkedBannerContent","startInCreateBanner","StartInCreateBanner","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","useGlobalCopyPasteElementHandler","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","onConnectorSetFocus","portalElements","GetFormValueProvider","FieldActionsResolver","FieldActionsProvider","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","forcedVersion","historyStore","store","timelineReady","revisionDocument","onOlderRevision","sinceDocument","isPristine","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","isReleaseLocked","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","getDocumentVersionType","actionsPerspective","documentActionsProps","versionType","versionName","languageFilter","setFocusPath","focusPathRef","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","newSince","newRev","handleBlur","blurredPath","disableBlurRef","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","patchRef","useInsertionEffect","toMutationPatches","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentEventsPane","usePaneOptions","showingPublishedOnDraft","getVersionId","eventsStore","useEventsStore","sinceRevision","historyStoreProps","PerspectiveProvider","EventsProvider","isDeleteDocumentGroupEvent","isDeleteDocumentVersionEvent","DocumentPaneWithLegacyTimelineStore","setTimelineError","onError","useTimelineStore","revTime","sinceAttributes","timelineDisplayed","_temp5","_temp6","_temp7","state_1","state_2","state_3","state_4","state_5","DocumentPaneProviderWrapper","useResetHistoryParams","isMounted","_perspective","param","preserveRev","updateHistoryParams","DocumentPane","parentSourceName","source","CopyPasteProvider","SourceProvider","DocumentPaneInner","resolveNewDocumentOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","ReferenceInputOptionsProvider","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","isLastItem","showSpinner","showMaxItemsMessage","limit","noDocumentsContent","ErrorActions","mainContent","removePublishedWithDrafts","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","includeAllVersions","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","documentListIsLoading","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","Checkbox","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","Select","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","SearchHeader","Filters","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","createElement","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","SearchProvider","addSelectedStateToMenuItems","isEqual","previous","setPrevious","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","liveEditSchemaType","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","getPaneParams","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","NoChanges","ChangeList","DocumentChangeContext","getIsSelectable","isUnpublishDocumentEvent","isScheduleDocumentVersionEvent","isUnscheduleDocumentVersionEvent","EventTimelineItem","cursor","Event","PublishedEventMenu","portalContext","versionId","versionRevisionId","handleOpenReleaseDocument","handleOpenDraftDocument","RELEASES_INTENT","children_0","releaseTitle","children_1","fallbackPlacements","children_2","TimelineItemWrapper","CHILDREN_ITEMS_VARIANTS","animate","exit","ITEM_HEIGHT","EventsTimeline","allEvents","hasMoreEvents","selectedEventId","fetchEventChildren","selectedEvent","expandingParents","setExpandingParents","isCreateDocumentVersionEvent","isEditDocumentVersionEvent","isExpanding","renderOptionsMenu","documentVariantType","getDocumentVariantType","isPublishDocumentVersionEvent","creationEvent","showExpandingLoader","isLastEvent","EventsTimelineMenu","nextCursor","eventsError","findRangeForRevision","loadMoreEvents","expandEvent","revEvent","sinceEvent","SpinnerContainer","DIFF_INITIAL_VALUE","EventsInspector","getChangesList","changesList$","diffLoading","toEvent","sinceEvents","ChangesError","EventsSelector","showList","listHeight","setListHeight","getScrollerRef","initialLoad","HistorySelector","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","paneRouterTab","setPaneRouterTab","changesInspector","getPathTitles","f","itemType","_key","MARKER_ICON","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","__internalApplicationType","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":"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"}