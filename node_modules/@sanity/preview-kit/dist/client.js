import { createClient as createClient$1 } from "@sanity/client";
const createClient = (config) => {
  const {
    encodeSourceMap = detectEnableSourceMap(),
    encodeSourceMapAtPath,
    studioUrl = detectStudioUrl(),
    logger,
    ...options
  } = config;
  let shouldEncodeSourceMap = encodeSourceMap === !0;
  if (encodeSourceMap === "auto" && (shouldEncodeSourceMap = isVercelPreviewEnvironment()), typeof encodeSourceMap == "string" && encodeSourceMap !== "auto")
    throw new Error(`Invalid value for encodeSourceMap: ${encodeSourceMap}. Did you mean 'auto'?`);
  try {
    if (shouldEncodeSourceMap && config.resultSourceMap !== !1)
      return studioUrl ? (logger?.debug?.("[@sanity/preview-kit]: Creating source map enabled client"), createClient$1({
        ...options,
        // Source maps by Content Lake are required in order to know where to insert the encoded source maps into strings
        resultSourceMap: config.resultSourceMap ? config.resultSourceMap : "withKeyArraySelector",
        stega: {
          enabled: !0,
          studioUrl,
          logger,
          filter: encodeSourceMapAtPath ? (props) => encodeSourceMapAtPath({
            path: props.sourcePath,
            filterDefault: () => props.filterDefault(props)
          }) : void 0
        }
      })) : (logger?.error?.(
        "[@sanity/preview-kit]: Content source map enabled client is enabled, but no studioUrl is provided. Falling back to @sanity/client"
      ), createClient$1(options));
  } catch (err) {
    console.error(
      "[@sanity/preview-kit]: Error creating client",
      err,
      "falling back to non-embedded sourcemap mode"
    );
  }
  return createClient$1(options);
};
function isVercelPreviewEnvironment() {
  try {
    return import.meta.env.VERCEL_ENV === "preview";
  } catch {
  }
  try {
    return process.env.VERCEL_ENV === "preview";
  } catch {
  }
  return !1;
}
function detectEnableSourceMap() {
  try {
    return import.meta.env.SANITY_SOURCE_MAP === "true";
  } catch {
  }
  try {
    return process.env.SANITY_SOURCE_MAP === "true";
  } catch {
  }
  return !1;
}
function detectStudioUrl() {
  try {
    return import.meta.env.SANITY_STUDIO_URL;
  } catch {
  }
  try {
    return process.env.SANITY_STUDIO_URL;
  } catch {
  }
}
export {
  createClient
};
//# sourceMappingURL=client.js.map
