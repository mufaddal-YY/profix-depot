{"version":3,"file":"client.cjs","sources":["../src/client/createClient.ts"],"sourcesContent":["import {createClient as createSanityClient, type SanityClient} from '@sanity/client'\n\nimport type {PreviewKitClientConfig} from './types'\n\nexport type * from './types'\nexport type * from '@sanity/client'\n// eslint-disable-next-line simple-import-sort/exports\nexport type {FilterDefault} from './types'\n\ndeclare const process: {\n  env: {\n    NODE_ENV: string\n    VERCEL_ENV: string\n    SANITY_SOURCE_MAP: string\n    SANITY_STUDIO_URL: string\n  }\n}\n\n/**\n * @public\n * @deprecated - Please use `createClient` from `@sanity/client` instead\n */\nexport const createClient = (config: PreviewKitClientConfig): SanityClient => {\n  const {\n    encodeSourceMap = detectEnableSourceMap(),\n    encodeSourceMapAtPath,\n    studioUrl = detectStudioUrl(),\n    logger,\n    ...options\n  } = config\n\n  let shouldEncodeSourceMap = encodeSourceMap === true\n\n  // If encodeSourceMap is set to 'auto', then we need to check if we're running on Vercel and on a preview deployment\n  if (encodeSourceMap === 'auto') {\n    shouldEncodeSourceMap = isVercelPreviewEnvironment()\n  }\n\n  if (typeof encodeSourceMap === 'string' && encodeSourceMap !== 'auto') {\n    throw new Error(`Invalid value for encodeSourceMap: ${encodeSourceMap}. Did you mean 'auto'?`)\n  }\n\n  try {\n    if (shouldEncodeSourceMap && config.resultSourceMap !== false) {\n      if (!studioUrl) {\n        logger?.error?.(\n          '[@sanity/preview-kit]: Content source map enabled client is enabled, but no studioUrl is provided. Falling back to @sanity/client',\n        )\n        return createSanityClient(options)\n      }\n\n      logger?.debug?.('[@sanity/preview-kit]: Creating source map enabled client')\n      return createSanityClient({\n        ...options,\n        // Source maps by Content Lake are required in order to know where to insert the encoded source maps into strings\n        resultSourceMap: config.resultSourceMap ? config.resultSourceMap : 'withKeyArraySelector',\n        stega: {\n          enabled: true,\n          studioUrl,\n          logger,\n          filter: encodeSourceMapAtPath\n            ? (props) =>\n                encodeSourceMapAtPath({\n                  path: props.sourcePath,\n                  filterDefault: () => props.filterDefault(props),\n                })\n            : undefined,\n        },\n      })\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(\n      '[@sanity/preview-kit]: Error creating client',\n      err,\n      'falling back to non-embedded sourcemap mode',\n    )\n  }\n  return createSanityClient(options)\n}\n\nfunction isVercelPreviewEnvironment() {\n  try {\n    // @ts-expect-error -- VERCEL_ENV is not a declared import.meta.env variable\n    return import.meta.env.VERCEL_ENV === 'preview'\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.VERCEL_ENV === 'preview'\n  } catch {\n    // ignore\n  }\n  return false\n}\n\nfunction detectEnableSourceMap(): PreviewKitClientConfig['encodeSourceMap'] {\n  try {\n    // @ts-expect-error -- SANITY_SOURCE_MAP is not a declared import.meta.env variable\n    return import.meta.env.SANITY_SOURCE_MAP === 'true'\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.SANITY_SOURCE_MAP === 'true'\n  } catch {\n    // ignore\n  }\n  return false\n}\n\n// eslint-disable-next-line consistent-return\nfunction detectStudioUrl() {\n  try {\n    // @ts-expect-error -- SANITY_STUDIO_URL is not a declared import.meta.env variable\n    return import.meta.env.SANITY_STUDIO_URL\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.SANITY_STUDIO_URL\n  } catch {\n    // ignore\n  }\n}\n"],"names":["createSanityClient"],"mappings":";;;AAsBa,MAAA,eAAe,CAAC,WAAiD;AACtE,QAAA;AAAA,IACJ,kBAAkB,sBAAsB;AAAA,IACxC;AAAA,IACA,YAAY,gBAAgB;AAAA,IAC5B;AAAA,IACA,GAAG;AAAA,EAAA,IACD;AAEJ,MAAI,wBAAwB,oBAAoB;AAG5C,MAAA,oBAAoB,WACtB,wBAAwB,2BAAA,IAGtB,OAAO,mBAAoB,YAAY,oBAAoB;AAC7D,UAAM,IAAI,MAAM,sCAAsC,eAAe,wBAAwB;AAG3F,MAAA;AACE,QAAA,yBAAyB,OAAO,oBAAoB;AACtD,aAAK,aAOL,QAAQ,QAAQ,2DAA2D,GACpEA,OAAAA,aAAmB;AAAA,QACxB,GAAG;AAAA;AAAA,QAEH,iBAAiB,OAAO,kBAAkB,OAAO,kBAAkB;AAAA,QACnE,OAAO;AAAA,UACL,SAAS;AAAA,UACT;AAAA,UACA;AAAA,UACA,QAAQ,wBACJ,CAAC,UACC,sBAAsB;AAAA,YACpB,MAAM,MAAM;AAAA,YACZ,eAAe,MAAM,MAAM,cAAc,KAAK;AAAA,UAC/C,CAAA,IACH;AAAA,QAAA;AAAA,MACN,CACD,MAvBC,QAAQ;AAAA,QACN;AAAA,MAAA,GAEKA,OAAAA,aAAmB,OAAO;AAAA,WAsB9B,KAAK;AAEJ,YAAA;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAEF,SAAOA,OAAAA,aAAmB,OAAO;AACnC;AAEA,SAAS,6BAA6B;AAChC,MAAA;AAEK,WAAA,SAAgB,eAAe;AAAA,EAAA,QAChC;AAAA,EAAA;AAGJ,MAAA;AAEK,WAAA,QAAQ,IAAI,eAAe;AAAA,EAAA,QAC5B;AAAA,EAAA;AAGD,SAAA;AACT;AAEA,SAAS,wBAAmE;AACtE,MAAA;AAEK,WAAA,SAAgB,sBAAsB;AAAA,EAAA,QACvC;AAAA,EAAA;AAGJ,MAAA;AAEK,WAAA,QAAQ,IAAI,sBAAsB;AAAA,EAAA,QACnC;AAAA,EAAA;AAGD,SAAA;AACT;AAGA,SAAS,kBAAkB;AACrB,MAAA;AAEF,WAAO,SAAgB;AAAA,EAAA,QACjB;AAAA,EAAA;AAGJ,MAAA;AAEF,WAAO,QAAQ,IAAI;AAAA,EAAA,QACb;AAAA,EAAA;AAGV;;"}