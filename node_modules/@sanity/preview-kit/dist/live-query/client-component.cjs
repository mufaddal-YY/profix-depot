"use client";
"use strict";
var require$$0 = require("react"), hooks = require("../_chunks-cjs/hooks.cjs");
function useLiveQuery(initialData, query, queryParams2) {
  const defineStore = require$$0.useContext(hooks.defineStoreContext), queryParams = hooks.useQueryParams(queryParams2), store = require$$0.useMemo(
    () => defineStore?.(initialData, query, queryParams),
    [defineStore, initialData, queryParams, query]
  ), [serverSnapshot] = require$$0.useState(() => {
    if (initialData === void 0)
      throw new Error(
        "initialSnapshot can't be undefined, if you don't want an initial value use null instead"
      );
    try {
      return JSON.parse(JSON.stringify(initialData));
    } catch (error) {
      return console.warn(
        "Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable",
        { initialSnapshot: initialData, error }
      ), initialData;
    }
  }), getServerSnapshot = require$$0.useCallback(() => serverSnapshot, [serverSnapshot]);
  return [
    require$$0.useSyncExternalStore(
      store?.subscribe || noop,
      store?.getSnapshot || getServerSnapshot,
      getServerSnapshot
    ),
    defineStore !== null
  ];
}
function noop() {
  return () => {
  };
}
function LiveQueryClientComponent(props) {
  const { initialData, query, params, children, throwOnMissingProvider = !0 } = props, [data, enabled] = useLiveQuery(initialData, query, params);
  if (throwOnMissingProvider && !enabled)
    throw new Error(
      "<LiveQuery> require you to wrap them in a parent <LiveQueryProvider> when its 'enabled' prop is true, or set the 'throwOnMissingProvider' prop to 'false' to ignore this error"
    );
  return require$$0.isValidElement(children) ? require$$0.cloneElement(children, {
    // eslint-disable-next-line no-warning-comments
    // @ts-expect-error -- @todo fix the typings
    ...children.props,
    // all child props should override, except for `data`
    data,
    // eslint-disable-next-line no-warning-comments
    // @ts-expect-error -- @todo fix the typings
    ref: children.ref
  }) : require$$0.Children.count(children) > 1 ? require$$0.Children.only(null) : null;
}
LiveQueryClientComponent.displayName = "LiveQueryClientComponent";
module.exports = LiveQueryClientComponent;
//# sourceMappingURL=client-component.cjs.map
