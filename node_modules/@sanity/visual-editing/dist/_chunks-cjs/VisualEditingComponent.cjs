"use strict";
var reactCompilerRuntime = require("react-compiler-runtime"), router_js = require("next/router.js"), react = require("react"), enableVisualEditing = require("./enableVisualEditing.cjs");
function VisualEditingComponent(props) {
  const $ = reactCompilerRuntime.c(15), {
    components,
    refresh,
    zIndex
  } = props, router = router_js.useRouter(), routerRef = react.useRef(router), [navigate, setNavigate] = react.useState();
  let t0, t1;
  $[0] !== router ? (t0 = () => {
    routerRef.current = router;
  }, t1 = [router], $[0] = router, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), react.useEffect(t0, t1);
  let t2, t3;
  $[3] !== components || $[4] !== refresh || $[5] !== zIndex ? (t2 = () => {
    const disable = enableVisualEditing.enableVisualEditing({
      components,
      zIndex,
      refresh,
      history: {
        subscribe: (_navigate) => (setNavigate(() => _navigate), () => setNavigate(void 0)),
        update: (update) => {
          switch (update.type) {
            case "push":
              return routerRef.current.push(update.url);
            case "pop":
              return routerRef.current.back();
            case "replace":
              return routerRef.current.replace(update.url);
            default:
              throw new Error(`Unknown update type: ${update.type}`);
          }
        }
      }
    });
    return () => disable();
  }, t3 = [components, refresh, zIndex], $[3] = components, $[4] = refresh, $[5] = zIndex, $[6] = t2, $[7] = t3) : (t2 = $[6], t3 = $[7]), react.useEffect(t2, t3);
  const {
    asPath,
    basePath,
    locale,
    isReady
  } = router_js.useRouter();
  let t4, t5;
  return $[8] !== asPath || $[9] !== basePath || $[10] !== isReady || $[11] !== locale || $[12] !== navigate ? (t4 = () => {
    if (navigate && isReady) {
      const url = basePath || locale ? `${basePath}${locale ? `/${locale}` : ""}${asPath === "/" ? "" : asPath}` : asPath;
      navigate({
        type: "push",
        url
      });
    }
  }, t5 = [asPath, basePath, isReady, locale, navigate], $[8] = asPath, $[9] = basePath, $[10] = isReady, $[11] = locale, $[12] = navigate, $[13] = t4, $[14] = t5) : (t4 = $[13], t5 = $[14]), react.useEffect(t4, t5), null;
}
exports.default = VisualEditingComponent;
//# sourceMappingURL=VisualEditingComponent.cjs.map
